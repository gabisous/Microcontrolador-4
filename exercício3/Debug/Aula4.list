
Aula4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037dc  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08003898  08003898  00013898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003918  08003918  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003918  08003918  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003918  08003918  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003918  08003918  00013918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800391c  0800391c  0001391c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003920  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  0800392c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  0800392c  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000097f3  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b87  00000000  00000000  00029827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c0  00000000  00000000  0002b3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007e8  00000000  00000000  0002bc70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ae97  00000000  00000000  0002c458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009937  00000000  00000000  000472ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000afb24  00000000  00000000  00050c26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010074a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ee4  00000000  00000000  001007a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003880 	.word	0x08003880

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08003880 	.word	0x08003880

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_cfrcmple>:
 800021c:	4684      	mov	ip, r0
 800021e:	1c08      	adds	r0, r1, #0
 8000220:	4661      	mov	r1, ip
 8000222:	e7ff      	b.n	8000224 <__aeabi_cfcmpeq>

08000224 <__aeabi_cfcmpeq>:
 8000224:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000226:	f000 f8a7 	bl	8000378 <__lesf2>
 800022a:	2800      	cmp	r0, #0
 800022c:	d401      	bmi.n	8000232 <__aeabi_cfcmpeq+0xe>
 800022e:	2100      	movs	r1, #0
 8000230:	42c8      	cmn	r0, r1
 8000232:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000234 <__aeabi_fcmpeq>:
 8000234:	b510      	push	{r4, lr}
 8000236:	f000 f82b 	bl	8000290 <__eqsf2>
 800023a:	4240      	negs	r0, r0
 800023c:	3001      	adds	r0, #1
 800023e:	bd10      	pop	{r4, pc}

08000240 <__aeabi_fcmplt>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f000 f899 	bl	8000378 <__lesf2>
 8000246:	2800      	cmp	r0, #0
 8000248:	db01      	blt.n	800024e <__aeabi_fcmplt+0xe>
 800024a:	2000      	movs	r0, #0
 800024c:	bd10      	pop	{r4, pc}
 800024e:	2001      	movs	r0, #1
 8000250:	bd10      	pop	{r4, pc}
 8000252:	46c0      	nop			; (mov r8, r8)

08000254 <__aeabi_fcmple>:
 8000254:	b510      	push	{r4, lr}
 8000256:	f000 f88f 	bl	8000378 <__lesf2>
 800025a:	2800      	cmp	r0, #0
 800025c:	dd01      	ble.n	8000262 <__aeabi_fcmple+0xe>
 800025e:	2000      	movs	r0, #0
 8000260:	bd10      	pop	{r4, pc}
 8000262:	2001      	movs	r0, #1
 8000264:	bd10      	pop	{r4, pc}
 8000266:	46c0      	nop			; (mov r8, r8)

08000268 <__aeabi_fcmpgt>:
 8000268:	b510      	push	{r4, lr}
 800026a:	f000 f839 	bl	80002e0 <__gesf2>
 800026e:	2800      	cmp	r0, #0
 8000270:	dc01      	bgt.n	8000276 <__aeabi_fcmpgt+0xe>
 8000272:	2000      	movs	r0, #0
 8000274:	bd10      	pop	{r4, pc}
 8000276:	2001      	movs	r0, #1
 8000278:	bd10      	pop	{r4, pc}
 800027a:	46c0      	nop			; (mov r8, r8)

0800027c <__aeabi_fcmpge>:
 800027c:	b510      	push	{r4, lr}
 800027e:	f000 f82f 	bl	80002e0 <__gesf2>
 8000282:	2800      	cmp	r0, #0
 8000284:	da01      	bge.n	800028a <__aeabi_fcmpge+0xe>
 8000286:	2000      	movs	r0, #0
 8000288:	bd10      	pop	{r4, pc}
 800028a:	2001      	movs	r0, #1
 800028c:	bd10      	pop	{r4, pc}
 800028e:	46c0      	nop			; (mov r8, r8)

08000290 <__eqsf2>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	0042      	lsls	r2, r0, #1
 8000294:	024e      	lsls	r6, r1, #9
 8000296:	004c      	lsls	r4, r1, #1
 8000298:	0245      	lsls	r5, r0, #9
 800029a:	0a6d      	lsrs	r5, r5, #9
 800029c:	0e12      	lsrs	r2, r2, #24
 800029e:	0fc3      	lsrs	r3, r0, #31
 80002a0:	0a76      	lsrs	r6, r6, #9
 80002a2:	0e24      	lsrs	r4, r4, #24
 80002a4:	0fc9      	lsrs	r1, r1, #31
 80002a6:	2aff      	cmp	r2, #255	; 0xff
 80002a8:	d00f      	beq.n	80002ca <__eqsf2+0x3a>
 80002aa:	2cff      	cmp	r4, #255	; 0xff
 80002ac:	d011      	beq.n	80002d2 <__eqsf2+0x42>
 80002ae:	2001      	movs	r0, #1
 80002b0:	42a2      	cmp	r2, r4
 80002b2:	d000      	beq.n	80002b6 <__eqsf2+0x26>
 80002b4:	bd70      	pop	{r4, r5, r6, pc}
 80002b6:	42b5      	cmp	r5, r6
 80002b8:	d1fc      	bne.n	80002b4 <__eqsf2+0x24>
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d00d      	beq.n	80002da <__eqsf2+0x4a>
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d1f8      	bne.n	80002b4 <__eqsf2+0x24>
 80002c2:	0028      	movs	r0, r5
 80002c4:	1e45      	subs	r5, r0, #1
 80002c6:	41a8      	sbcs	r0, r5
 80002c8:	e7f4      	b.n	80002b4 <__eqsf2+0x24>
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d1f1      	bne.n	80002b4 <__eqsf2+0x24>
 80002d0:	e7eb      	b.n	80002aa <__eqsf2+0x1a>
 80002d2:	2001      	movs	r0, #1
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d1ed      	bne.n	80002b4 <__eqsf2+0x24>
 80002d8:	e7e9      	b.n	80002ae <__eqsf2+0x1e>
 80002da:	2000      	movs	r0, #0
 80002dc:	e7ea      	b.n	80002b4 <__eqsf2+0x24>
 80002de:	46c0      	nop			; (mov r8, r8)

080002e0 <__gesf2>:
 80002e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002e2:	0042      	lsls	r2, r0, #1
 80002e4:	0246      	lsls	r6, r0, #9
 80002e6:	024d      	lsls	r5, r1, #9
 80002e8:	004c      	lsls	r4, r1, #1
 80002ea:	0fc3      	lsrs	r3, r0, #31
 80002ec:	0a76      	lsrs	r6, r6, #9
 80002ee:	0e12      	lsrs	r2, r2, #24
 80002f0:	0a6d      	lsrs	r5, r5, #9
 80002f2:	0e24      	lsrs	r4, r4, #24
 80002f4:	0fc8      	lsrs	r0, r1, #31
 80002f6:	2aff      	cmp	r2, #255	; 0xff
 80002f8:	d01f      	beq.n	800033a <__gesf2+0x5a>
 80002fa:	2cff      	cmp	r4, #255	; 0xff
 80002fc:	d010      	beq.n	8000320 <__gesf2+0x40>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	d11f      	bne.n	8000342 <__gesf2+0x62>
 8000302:	4271      	negs	r1, r6
 8000304:	4171      	adcs	r1, r6
 8000306:	2c00      	cmp	r4, #0
 8000308:	d101      	bne.n	800030e <__gesf2+0x2e>
 800030a:	2d00      	cmp	r5, #0
 800030c:	d01e      	beq.n	800034c <__gesf2+0x6c>
 800030e:	2900      	cmp	r1, #0
 8000310:	d10e      	bne.n	8000330 <__gesf2+0x50>
 8000312:	4283      	cmp	r3, r0
 8000314:	d01e      	beq.n	8000354 <__gesf2+0x74>
 8000316:	2102      	movs	r1, #2
 8000318:	1e58      	subs	r0, r3, #1
 800031a:	4008      	ands	r0, r1
 800031c:	3801      	subs	r0, #1
 800031e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000320:	2d00      	cmp	r5, #0
 8000322:	d126      	bne.n	8000372 <__gesf2+0x92>
 8000324:	2a00      	cmp	r2, #0
 8000326:	d1f4      	bne.n	8000312 <__gesf2+0x32>
 8000328:	4271      	negs	r1, r6
 800032a:	4171      	adcs	r1, r6
 800032c:	2900      	cmp	r1, #0
 800032e:	d0f0      	beq.n	8000312 <__gesf2+0x32>
 8000330:	2800      	cmp	r0, #0
 8000332:	d1f4      	bne.n	800031e <__gesf2+0x3e>
 8000334:	2001      	movs	r0, #1
 8000336:	4240      	negs	r0, r0
 8000338:	e7f1      	b.n	800031e <__gesf2+0x3e>
 800033a:	2e00      	cmp	r6, #0
 800033c:	d119      	bne.n	8000372 <__gesf2+0x92>
 800033e:	2cff      	cmp	r4, #255	; 0xff
 8000340:	d0ee      	beq.n	8000320 <__gesf2+0x40>
 8000342:	2c00      	cmp	r4, #0
 8000344:	d1e5      	bne.n	8000312 <__gesf2+0x32>
 8000346:	2d00      	cmp	r5, #0
 8000348:	d1e3      	bne.n	8000312 <__gesf2+0x32>
 800034a:	e7e4      	b.n	8000316 <__gesf2+0x36>
 800034c:	2000      	movs	r0, #0
 800034e:	2e00      	cmp	r6, #0
 8000350:	d0e5      	beq.n	800031e <__gesf2+0x3e>
 8000352:	e7e0      	b.n	8000316 <__gesf2+0x36>
 8000354:	42a2      	cmp	r2, r4
 8000356:	dc05      	bgt.n	8000364 <__gesf2+0x84>
 8000358:	dbea      	blt.n	8000330 <__gesf2+0x50>
 800035a:	42ae      	cmp	r6, r5
 800035c:	d802      	bhi.n	8000364 <__gesf2+0x84>
 800035e:	d3e7      	bcc.n	8000330 <__gesf2+0x50>
 8000360:	2000      	movs	r0, #0
 8000362:	e7dc      	b.n	800031e <__gesf2+0x3e>
 8000364:	4241      	negs	r1, r0
 8000366:	4141      	adcs	r1, r0
 8000368:	4248      	negs	r0, r1
 800036a:	2102      	movs	r1, #2
 800036c:	4008      	ands	r0, r1
 800036e:	3801      	subs	r0, #1
 8000370:	e7d5      	b.n	800031e <__gesf2+0x3e>
 8000372:	2002      	movs	r0, #2
 8000374:	4240      	negs	r0, r0
 8000376:	e7d2      	b.n	800031e <__gesf2+0x3e>

08000378 <__lesf2>:
 8000378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800037a:	0042      	lsls	r2, r0, #1
 800037c:	0246      	lsls	r6, r0, #9
 800037e:	024d      	lsls	r5, r1, #9
 8000380:	004c      	lsls	r4, r1, #1
 8000382:	0fc3      	lsrs	r3, r0, #31
 8000384:	0a76      	lsrs	r6, r6, #9
 8000386:	0e12      	lsrs	r2, r2, #24
 8000388:	0a6d      	lsrs	r5, r5, #9
 800038a:	0e24      	lsrs	r4, r4, #24
 800038c:	0fc8      	lsrs	r0, r1, #31
 800038e:	2aff      	cmp	r2, #255	; 0xff
 8000390:	d00d      	beq.n	80003ae <__lesf2+0x36>
 8000392:	2cff      	cmp	r4, #255	; 0xff
 8000394:	d00f      	beq.n	80003b6 <__lesf2+0x3e>
 8000396:	2a00      	cmp	r2, #0
 8000398:	d123      	bne.n	80003e2 <__lesf2+0x6a>
 800039a:	4271      	negs	r1, r6
 800039c:	4171      	adcs	r1, r6
 800039e:	2c00      	cmp	r4, #0
 80003a0:	d10f      	bne.n	80003c2 <__lesf2+0x4a>
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d10d      	bne.n	80003c2 <__lesf2+0x4a>
 80003a6:	2000      	movs	r0, #0
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d014      	beq.n	80003d6 <__lesf2+0x5e>
 80003ac:	e00d      	b.n	80003ca <__lesf2+0x52>
 80003ae:	2e00      	cmp	r6, #0
 80003b0:	d110      	bne.n	80003d4 <__lesf2+0x5c>
 80003b2:	2cff      	cmp	r4, #255	; 0xff
 80003b4:	d115      	bne.n	80003e2 <__lesf2+0x6a>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	d10c      	bne.n	80003d4 <__lesf2+0x5c>
 80003ba:	2a00      	cmp	r2, #0
 80003bc:	d103      	bne.n	80003c6 <__lesf2+0x4e>
 80003be:	4271      	negs	r1, r6
 80003c0:	4171      	adcs	r1, r6
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d108      	bne.n	80003d8 <__lesf2+0x60>
 80003c6:	4283      	cmp	r3, r0
 80003c8:	d010      	beq.n	80003ec <__lesf2+0x74>
 80003ca:	2102      	movs	r1, #2
 80003cc:	1e58      	subs	r0, r3, #1
 80003ce:	4008      	ands	r0, r1
 80003d0:	3801      	subs	r0, #1
 80003d2:	e000      	b.n	80003d6 <__lesf2+0x5e>
 80003d4:	2002      	movs	r0, #2
 80003d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003d8:	2800      	cmp	r0, #0
 80003da:	d1fc      	bne.n	80003d6 <__lesf2+0x5e>
 80003dc:	2001      	movs	r0, #1
 80003de:	4240      	negs	r0, r0
 80003e0:	e7f9      	b.n	80003d6 <__lesf2+0x5e>
 80003e2:	2c00      	cmp	r4, #0
 80003e4:	d1ef      	bne.n	80003c6 <__lesf2+0x4e>
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d1ed      	bne.n	80003c6 <__lesf2+0x4e>
 80003ea:	e7ee      	b.n	80003ca <__lesf2+0x52>
 80003ec:	42a2      	cmp	r2, r4
 80003ee:	dc05      	bgt.n	80003fc <__lesf2+0x84>
 80003f0:	dbf2      	blt.n	80003d8 <__lesf2+0x60>
 80003f2:	42ae      	cmp	r6, r5
 80003f4:	d802      	bhi.n	80003fc <__lesf2+0x84>
 80003f6:	d3ef      	bcc.n	80003d8 <__lesf2+0x60>
 80003f8:	2000      	movs	r0, #0
 80003fa:	e7ec      	b.n	80003d6 <__lesf2+0x5e>
 80003fc:	4241      	negs	r1, r0
 80003fe:	4141      	adcs	r1, r0
 8000400:	4248      	negs	r0, r1
 8000402:	2102      	movs	r1, #2
 8000404:	4008      	ands	r0, r1
 8000406:	3801      	subs	r0, #1
 8000408:	e7e5      	b.n	80003d6 <__lesf2+0x5e>
 800040a:	46c0      	nop			; (mov r8, r8)

0800040c <__aeabi_dmul>:
 800040c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800040e:	4657      	mov	r7, sl
 8000410:	464e      	mov	r6, r9
 8000412:	4645      	mov	r5, r8
 8000414:	46de      	mov	lr, fp
 8000416:	b5e0      	push	{r5, r6, r7, lr}
 8000418:	4698      	mov	r8, r3
 800041a:	030c      	lsls	r4, r1, #12
 800041c:	004b      	lsls	r3, r1, #1
 800041e:	0006      	movs	r6, r0
 8000420:	4692      	mov	sl, r2
 8000422:	b087      	sub	sp, #28
 8000424:	0b24      	lsrs	r4, r4, #12
 8000426:	0d5b      	lsrs	r3, r3, #21
 8000428:	0fcf      	lsrs	r7, r1, #31
 800042a:	2b00      	cmp	r3, #0
 800042c:	d06c      	beq.n	8000508 <__aeabi_dmul+0xfc>
 800042e:	4add      	ldr	r2, [pc, #884]	; (80007a4 <__aeabi_dmul+0x398>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d100      	bne.n	8000436 <__aeabi_dmul+0x2a>
 8000434:	e086      	b.n	8000544 <__aeabi_dmul+0x138>
 8000436:	0f42      	lsrs	r2, r0, #29
 8000438:	00e4      	lsls	r4, r4, #3
 800043a:	4314      	orrs	r4, r2
 800043c:	2280      	movs	r2, #128	; 0x80
 800043e:	0412      	lsls	r2, r2, #16
 8000440:	4314      	orrs	r4, r2
 8000442:	4ad9      	ldr	r2, [pc, #868]	; (80007a8 <__aeabi_dmul+0x39c>)
 8000444:	00c5      	lsls	r5, r0, #3
 8000446:	4694      	mov	ip, r2
 8000448:	4463      	add	r3, ip
 800044a:	9300      	str	r3, [sp, #0]
 800044c:	2300      	movs	r3, #0
 800044e:	4699      	mov	r9, r3
 8000450:	469b      	mov	fp, r3
 8000452:	4643      	mov	r3, r8
 8000454:	4642      	mov	r2, r8
 8000456:	031e      	lsls	r6, r3, #12
 8000458:	0fd2      	lsrs	r2, r2, #31
 800045a:	005b      	lsls	r3, r3, #1
 800045c:	4650      	mov	r0, sl
 800045e:	4690      	mov	r8, r2
 8000460:	0b36      	lsrs	r6, r6, #12
 8000462:	0d5b      	lsrs	r3, r3, #21
 8000464:	d100      	bne.n	8000468 <__aeabi_dmul+0x5c>
 8000466:	e078      	b.n	800055a <__aeabi_dmul+0x14e>
 8000468:	4ace      	ldr	r2, [pc, #824]	; (80007a4 <__aeabi_dmul+0x398>)
 800046a:	4293      	cmp	r3, r2
 800046c:	d01d      	beq.n	80004aa <__aeabi_dmul+0x9e>
 800046e:	49ce      	ldr	r1, [pc, #824]	; (80007a8 <__aeabi_dmul+0x39c>)
 8000470:	0f42      	lsrs	r2, r0, #29
 8000472:	468c      	mov	ip, r1
 8000474:	9900      	ldr	r1, [sp, #0]
 8000476:	4463      	add	r3, ip
 8000478:	00f6      	lsls	r6, r6, #3
 800047a:	468c      	mov	ip, r1
 800047c:	4316      	orrs	r6, r2
 800047e:	2280      	movs	r2, #128	; 0x80
 8000480:	449c      	add	ip, r3
 8000482:	0412      	lsls	r2, r2, #16
 8000484:	4663      	mov	r3, ip
 8000486:	4316      	orrs	r6, r2
 8000488:	00c2      	lsls	r2, r0, #3
 800048a:	2000      	movs	r0, #0
 800048c:	9300      	str	r3, [sp, #0]
 800048e:	9900      	ldr	r1, [sp, #0]
 8000490:	4643      	mov	r3, r8
 8000492:	3101      	adds	r1, #1
 8000494:	468c      	mov	ip, r1
 8000496:	4649      	mov	r1, r9
 8000498:	407b      	eors	r3, r7
 800049a:	9301      	str	r3, [sp, #4]
 800049c:	290f      	cmp	r1, #15
 800049e:	d900      	bls.n	80004a2 <__aeabi_dmul+0x96>
 80004a0:	e07e      	b.n	80005a0 <__aeabi_dmul+0x194>
 80004a2:	4bc2      	ldr	r3, [pc, #776]	; (80007ac <__aeabi_dmul+0x3a0>)
 80004a4:	0089      	lsls	r1, r1, #2
 80004a6:	5859      	ldr	r1, [r3, r1]
 80004a8:	468f      	mov	pc, r1
 80004aa:	4652      	mov	r2, sl
 80004ac:	9b00      	ldr	r3, [sp, #0]
 80004ae:	4332      	orrs	r2, r6
 80004b0:	d000      	beq.n	80004b4 <__aeabi_dmul+0xa8>
 80004b2:	e156      	b.n	8000762 <__aeabi_dmul+0x356>
 80004b4:	49bb      	ldr	r1, [pc, #748]	; (80007a4 <__aeabi_dmul+0x398>)
 80004b6:	2600      	movs	r6, #0
 80004b8:	468c      	mov	ip, r1
 80004ba:	4463      	add	r3, ip
 80004bc:	4649      	mov	r1, r9
 80004be:	9300      	str	r3, [sp, #0]
 80004c0:	2302      	movs	r3, #2
 80004c2:	4319      	orrs	r1, r3
 80004c4:	4689      	mov	r9, r1
 80004c6:	2002      	movs	r0, #2
 80004c8:	e7e1      	b.n	800048e <__aeabi_dmul+0x82>
 80004ca:	4643      	mov	r3, r8
 80004cc:	9301      	str	r3, [sp, #4]
 80004ce:	0034      	movs	r4, r6
 80004d0:	0015      	movs	r5, r2
 80004d2:	4683      	mov	fp, r0
 80004d4:	465b      	mov	r3, fp
 80004d6:	2b02      	cmp	r3, #2
 80004d8:	d05e      	beq.n	8000598 <__aeabi_dmul+0x18c>
 80004da:	2b03      	cmp	r3, #3
 80004dc:	d100      	bne.n	80004e0 <__aeabi_dmul+0xd4>
 80004de:	e1f3      	b.n	80008c8 <__aeabi_dmul+0x4bc>
 80004e0:	2b01      	cmp	r3, #1
 80004e2:	d000      	beq.n	80004e6 <__aeabi_dmul+0xda>
 80004e4:	e118      	b.n	8000718 <__aeabi_dmul+0x30c>
 80004e6:	2200      	movs	r2, #0
 80004e8:	2400      	movs	r4, #0
 80004ea:	2500      	movs	r5, #0
 80004ec:	9b01      	ldr	r3, [sp, #4]
 80004ee:	0512      	lsls	r2, r2, #20
 80004f0:	4322      	orrs	r2, r4
 80004f2:	07db      	lsls	r3, r3, #31
 80004f4:	431a      	orrs	r2, r3
 80004f6:	0028      	movs	r0, r5
 80004f8:	0011      	movs	r1, r2
 80004fa:	b007      	add	sp, #28
 80004fc:	bcf0      	pop	{r4, r5, r6, r7}
 80004fe:	46bb      	mov	fp, r7
 8000500:	46b2      	mov	sl, r6
 8000502:	46a9      	mov	r9, r5
 8000504:	46a0      	mov	r8, r4
 8000506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000508:	0025      	movs	r5, r4
 800050a:	4305      	orrs	r5, r0
 800050c:	d100      	bne.n	8000510 <__aeabi_dmul+0x104>
 800050e:	e141      	b.n	8000794 <__aeabi_dmul+0x388>
 8000510:	2c00      	cmp	r4, #0
 8000512:	d100      	bne.n	8000516 <__aeabi_dmul+0x10a>
 8000514:	e1ad      	b.n	8000872 <__aeabi_dmul+0x466>
 8000516:	0020      	movs	r0, r4
 8000518:	f000 fa9c 	bl	8000a54 <__clzsi2>
 800051c:	0001      	movs	r1, r0
 800051e:	0002      	movs	r2, r0
 8000520:	390b      	subs	r1, #11
 8000522:	231d      	movs	r3, #29
 8000524:	0010      	movs	r0, r2
 8000526:	1a5b      	subs	r3, r3, r1
 8000528:	0031      	movs	r1, r6
 800052a:	0035      	movs	r5, r6
 800052c:	3808      	subs	r0, #8
 800052e:	4084      	lsls	r4, r0
 8000530:	40d9      	lsrs	r1, r3
 8000532:	4085      	lsls	r5, r0
 8000534:	430c      	orrs	r4, r1
 8000536:	489e      	ldr	r0, [pc, #632]	; (80007b0 <__aeabi_dmul+0x3a4>)
 8000538:	1a83      	subs	r3, r0, r2
 800053a:	9300      	str	r3, [sp, #0]
 800053c:	2300      	movs	r3, #0
 800053e:	4699      	mov	r9, r3
 8000540:	469b      	mov	fp, r3
 8000542:	e786      	b.n	8000452 <__aeabi_dmul+0x46>
 8000544:	0005      	movs	r5, r0
 8000546:	4325      	orrs	r5, r4
 8000548:	d000      	beq.n	800054c <__aeabi_dmul+0x140>
 800054a:	e11c      	b.n	8000786 <__aeabi_dmul+0x37a>
 800054c:	2208      	movs	r2, #8
 800054e:	9300      	str	r3, [sp, #0]
 8000550:	2302      	movs	r3, #2
 8000552:	2400      	movs	r4, #0
 8000554:	4691      	mov	r9, r2
 8000556:	469b      	mov	fp, r3
 8000558:	e77b      	b.n	8000452 <__aeabi_dmul+0x46>
 800055a:	4652      	mov	r2, sl
 800055c:	4332      	orrs	r2, r6
 800055e:	d100      	bne.n	8000562 <__aeabi_dmul+0x156>
 8000560:	e10a      	b.n	8000778 <__aeabi_dmul+0x36c>
 8000562:	2e00      	cmp	r6, #0
 8000564:	d100      	bne.n	8000568 <__aeabi_dmul+0x15c>
 8000566:	e176      	b.n	8000856 <__aeabi_dmul+0x44a>
 8000568:	0030      	movs	r0, r6
 800056a:	f000 fa73 	bl	8000a54 <__clzsi2>
 800056e:	0002      	movs	r2, r0
 8000570:	3a0b      	subs	r2, #11
 8000572:	231d      	movs	r3, #29
 8000574:	0001      	movs	r1, r0
 8000576:	1a9b      	subs	r3, r3, r2
 8000578:	4652      	mov	r2, sl
 800057a:	3908      	subs	r1, #8
 800057c:	40da      	lsrs	r2, r3
 800057e:	408e      	lsls	r6, r1
 8000580:	4316      	orrs	r6, r2
 8000582:	4652      	mov	r2, sl
 8000584:	408a      	lsls	r2, r1
 8000586:	9b00      	ldr	r3, [sp, #0]
 8000588:	4989      	ldr	r1, [pc, #548]	; (80007b0 <__aeabi_dmul+0x3a4>)
 800058a:	1a18      	subs	r0, r3, r0
 800058c:	0003      	movs	r3, r0
 800058e:	468c      	mov	ip, r1
 8000590:	4463      	add	r3, ip
 8000592:	2000      	movs	r0, #0
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	e77a      	b.n	800048e <__aeabi_dmul+0x82>
 8000598:	2400      	movs	r4, #0
 800059a:	2500      	movs	r5, #0
 800059c:	4a81      	ldr	r2, [pc, #516]	; (80007a4 <__aeabi_dmul+0x398>)
 800059e:	e7a5      	b.n	80004ec <__aeabi_dmul+0xe0>
 80005a0:	0c2f      	lsrs	r7, r5, #16
 80005a2:	042d      	lsls	r5, r5, #16
 80005a4:	0c2d      	lsrs	r5, r5, #16
 80005a6:	002b      	movs	r3, r5
 80005a8:	0c11      	lsrs	r1, r2, #16
 80005aa:	0412      	lsls	r2, r2, #16
 80005ac:	0c12      	lsrs	r2, r2, #16
 80005ae:	4353      	muls	r3, r2
 80005b0:	4698      	mov	r8, r3
 80005b2:	0013      	movs	r3, r2
 80005b4:	0028      	movs	r0, r5
 80005b6:	437b      	muls	r3, r7
 80005b8:	4699      	mov	r9, r3
 80005ba:	4348      	muls	r0, r1
 80005bc:	4448      	add	r0, r9
 80005be:	4683      	mov	fp, r0
 80005c0:	4640      	mov	r0, r8
 80005c2:	000b      	movs	r3, r1
 80005c4:	0c00      	lsrs	r0, r0, #16
 80005c6:	4682      	mov	sl, r0
 80005c8:	4658      	mov	r0, fp
 80005ca:	437b      	muls	r3, r7
 80005cc:	4450      	add	r0, sl
 80005ce:	9302      	str	r3, [sp, #8]
 80005d0:	4581      	cmp	r9, r0
 80005d2:	d906      	bls.n	80005e2 <__aeabi_dmul+0x1d6>
 80005d4:	469a      	mov	sl, r3
 80005d6:	2380      	movs	r3, #128	; 0x80
 80005d8:	025b      	lsls	r3, r3, #9
 80005da:	4699      	mov	r9, r3
 80005dc:	44ca      	add	sl, r9
 80005de:	4653      	mov	r3, sl
 80005e0:	9302      	str	r3, [sp, #8]
 80005e2:	0c03      	lsrs	r3, r0, #16
 80005e4:	469b      	mov	fp, r3
 80005e6:	4643      	mov	r3, r8
 80005e8:	041b      	lsls	r3, r3, #16
 80005ea:	0400      	lsls	r0, r0, #16
 80005ec:	0c1b      	lsrs	r3, r3, #16
 80005ee:	4698      	mov	r8, r3
 80005f0:	0003      	movs	r3, r0
 80005f2:	4443      	add	r3, r8
 80005f4:	9304      	str	r3, [sp, #16]
 80005f6:	0c33      	lsrs	r3, r6, #16
 80005f8:	4699      	mov	r9, r3
 80005fa:	002b      	movs	r3, r5
 80005fc:	0436      	lsls	r6, r6, #16
 80005fe:	0c36      	lsrs	r6, r6, #16
 8000600:	4373      	muls	r3, r6
 8000602:	4698      	mov	r8, r3
 8000604:	0033      	movs	r3, r6
 8000606:	437b      	muls	r3, r7
 8000608:	469a      	mov	sl, r3
 800060a:	464b      	mov	r3, r9
 800060c:	435d      	muls	r5, r3
 800060e:	435f      	muls	r7, r3
 8000610:	4643      	mov	r3, r8
 8000612:	4455      	add	r5, sl
 8000614:	0c18      	lsrs	r0, r3, #16
 8000616:	1940      	adds	r0, r0, r5
 8000618:	4582      	cmp	sl, r0
 800061a:	d903      	bls.n	8000624 <__aeabi_dmul+0x218>
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	025b      	lsls	r3, r3, #9
 8000620:	469a      	mov	sl, r3
 8000622:	4457      	add	r7, sl
 8000624:	0c05      	lsrs	r5, r0, #16
 8000626:	19eb      	adds	r3, r5, r7
 8000628:	9305      	str	r3, [sp, #20]
 800062a:	4643      	mov	r3, r8
 800062c:	041d      	lsls	r5, r3, #16
 800062e:	0c2d      	lsrs	r5, r5, #16
 8000630:	0400      	lsls	r0, r0, #16
 8000632:	1940      	adds	r0, r0, r5
 8000634:	0c25      	lsrs	r5, r4, #16
 8000636:	0424      	lsls	r4, r4, #16
 8000638:	0c24      	lsrs	r4, r4, #16
 800063a:	0027      	movs	r7, r4
 800063c:	4357      	muls	r7, r2
 800063e:	436a      	muls	r2, r5
 8000640:	4690      	mov	r8, r2
 8000642:	002a      	movs	r2, r5
 8000644:	0c3b      	lsrs	r3, r7, #16
 8000646:	469a      	mov	sl, r3
 8000648:	434a      	muls	r2, r1
 800064a:	4361      	muls	r1, r4
 800064c:	4441      	add	r1, r8
 800064e:	4451      	add	r1, sl
 8000650:	4483      	add	fp, r0
 8000652:	4588      	cmp	r8, r1
 8000654:	d903      	bls.n	800065e <__aeabi_dmul+0x252>
 8000656:	2380      	movs	r3, #128	; 0x80
 8000658:	025b      	lsls	r3, r3, #9
 800065a:	4698      	mov	r8, r3
 800065c:	4442      	add	r2, r8
 800065e:	043f      	lsls	r7, r7, #16
 8000660:	0c0b      	lsrs	r3, r1, #16
 8000662:	0c3f      	lsrs	r7, r7, #16
 8000664:	0409      	lsls	r1, r1, #16
 8000666:	19c9      	adds	r1, r1, r7
 8000668:	0027      	movs	r7, r4
 800066a:	4698      	mov	r8, r3
 800066c:	464b      	mov	r3, r9
 800066e:	4377      	muls	r7, r6
 8000670:	435c      	muls	r4, r3
 8000672:	436e      	muls	r6, r5
 8000674:	435d      	muls	r5, r3
 8000676:	0c3b      	lsrs	r3, r7, #16
 8000678:	4699      	mov	r9, r3
 800067a:	19a4      	adds	r4, r4, r6
 800067c:	444c      	add	r4, r9
 800067e:	4442      	add	r2, r8
 8000680:	9503      	str	r5, [sp, #12]
 8000682:	42a6      	cmp	r6, r4
 8000684:	d904      	bls.n	8000690 <__aeabi_dmul+0x284>
 8000686:	2380      	movs	r3, #128	; 0x80
 8000688:	025b      	lsls	r3, r3, #9
 800068a:	4698      	mov	r8, r3
 800068c:	4445      	add	r5, r8
 800068e:	9503      	str	r5, [sp, #12]
 8000690:	9b02      	ldr	r3, [sp, #8]
 8000692:	043f      	lsls	r7, r7, #16
 8000694:	445b      	add	r3, fp
 8000696:	001e      	movs	r6, r3
 8000698:	4283      	cmp	r3, r0
 800069a:	4180      	sbcs	r0, r0
 800069c:	0423      	lsls	r3, r4, #16
 800069e:	4698      	mov	r8, r3
 80006a0:	9b05      	ldr	r3, [sp, #20]
 80006a2:	0c3f      	lsrs	r7, r7, #16
 80006a4:	4447      	add	r7, r8
 80006a6:	4698      	mov	r8, r3
 80006a8:	1876      	adds	r6, r6, r1
 80006aa:	428e      	cmp	r6, r1
 80006ac:	4189      	sbcs	r1, r1
 80006ae:	4447      	add	r7, r8
 80006b0:	4240      	negs	r0, r0
 80006b2:	183d      	adds	r5, r7, r0
 80006b4:	46a8      	mov	r8, r5
 80006b6:	4693      	mov	fp, r2
 80006b8:	4249      	negs	r1, r1
 80006ba:	468a      	mov	sl, r1
 80006bc:	44c3      	add	fp, r8
 80006be:	429f      	cmp	r7, r3
 80006c0:	41bf      	sbcs	r7, r7
 80006c2:	4580      	cmp	r8, r0
 80006c4:	4180      	sbcs	r0, r0
 80006c6:	9b03      	ldr	r3, [sp, #12]
 80006c8:	44da      	add	sl, fp
 80006ca:	4698      	mov	r8, r3
 80006cc:	4653      	mov	r3, sl
 80006ce:	4240      	negs	r0, r0
 80006d0:	427f      	negs	r7, r7
 80006d2:	4307      	orrs	r7, r0
 80006d4:	0c24      	lsrs	r4, r4, #16
 80006d6:	4593      	cmp	fp, r2
 80006d8:	4192      	sbcs	r2, r2
 80006da:	458a      	cmp	sl, r1
 80006dc:	4189      	sbcs	r1, r1
 80006de:	193f      	adds	r7, r7, r4
 80006e0:	0ddc      	lsrs	r4, r3, #23
 80006e2:	9b04      	ldr	r3, [sp, #16]
 80006e4:	0275      	lsls	r5, r6, #9
 80006e6:	431d      	orrs	r5, r3
 80006e8:	1e68      	subs	r0, r5, #1
 80006ea:	4185      	sbcs	r5, r0
 80006ec:	4653      	mov	r3, sl
 80006ee:	4252      	negs	r2, r2
 80006f0:	4249      	negs	r1, r1
 80006f2:	430a      	orrs	r2, r1
 80006f4:	18bf      	adds	r7, r7, r2
 80006f6:	4447      	add	r7, r8
 80006f8:	0df6      	lsrs	r6, r6, #23
 80006fa:	027f      	lsls	r7, r7, #9
 80006fc:	4335      	orrs	r5, r6
 80006fe:	025a      	lsls	r2, r3, #9
 8000700:	433c      	orrs	r4, r7
 8000702:	4315      	orrs	r5, r2
 8000704:	01fb      	lsls	r3, r7, #7
 8000706:	d400      	bmi.n	800070a <__aeabi_dmul+0x2fe>
 8000708:	e0c1      	b.n	800088e <__aeabi_dmul+0x482>
 800070a:	2101      	movs	r1, #1
 800070c:	086a      	lsrs	r2, r5, #1
 800070e:	400d      	ands	r5, r1
 8000710:	4315      	orrs	r5, r2
 8000712:	07e2      	lsls	r2, r4, #31
 8000714:	4315      	orrs	r5, r2
 8000716:	0864      	lsrs	r4, r4, #1
 8000718:	4926      	ldr	r1, [pc, #152]	; (80007b4 <__aeabi_dmul+0x3a8>)
 800071a:	4461      	add	r1, ip
 800071c:	2900      	cmp	r1, #0
 800071e:	dd56      	ble.n	80007ce <__aeabi_dmul+0x3c2>
 8000720:	076b      	lsls	r3, r5, #29
 8000722:	d009      	beq.n	8000738 <__aeabi_dmul+0x32c>
 8000724:	220f      	movs	r2, #15
 8000726:	402a      	ands	r2, r5
 8000728:	2a04      	cmp	r2, #4
 800072a:	d005      	beq.n	8000738 <__aeabi_dmul+0x32c>
 800072c:	1d2a      	adds	r2, r5, #4
 800072e:	42aa      	cmp	r2, r5
 8000730:	41ad      	sbcs	r5, r5
 8000732:	426d      	negs	r5, r5
 8000734:	1964      	adds	r4, r4, r5
 8000736:	0015      	movs	r5, r2
 8000738:	01e3      	lsls	r3, r4, #7
 800073a:	d504      	bpl.n	8000746 <__aeabi_dmul+0x33a>
 800073c:	2180      	movs	r1, #128	; 0x80
 800073e:	4a1e      	ldr	r2, [pc, #120]	; (80007b8 <__aeabi_dmul+0x3ac>)
 8000740:	00c9      	lsls	r1, r1, #3
 8000742:	4014      	ands	r4, r2
 8000744:	4461      	add	r1, ip
 8000746:	4a1d      	ldr	r2, [pc, #116]	; (80007bc <__aeabi_dmul+0x3b0>)
 8000748:	4291      	cmp	r1, r2
 800074a:	dd00      	ble.n	800074e <__aeabi_dmul+0x342>
 800074c:	e724      	b.n	8000598 <__aeabi_dmul+0x18c>
 800074e:	0762      	lsls	r2, r4, #29
 8000750:	08ed      	lsrs	r5, r5, #3
 8000752:	0264      	lsls	r4, r4, #9
 8000754:	0549      	lsls	r1, r1, #21
 8000756:	4315      	orrs	r5, r2
 8000758:	0b24      	lsrs	r4, r4, #12
 800075a:	0d4a      	lsrs	r2, r1, #21
 800075c:	e6c6      	b.n	80004ec <__aeabi_dmul+0xe0>
 800075e:	9701      	str	r7, [sp, #4]
 8000760:	e6b8      	b.n	80004d4 <__aeabi_dmul+0xc8>
 8000762:	4a10      	ldr	r2, [pc, #64]	; (80007a4 <__aeabi_dmul+0x398>)
 8000764:	2003      	movs	r0, #3
 8000766:	4694      	mov	ip, r2
 8000768:	4463      	add	r3, ip
 800076a:	464a      	mov	r2, r9
 800076c:	9300      	str	r3, [sp, #0]
 800076e:	2303      	movs	r3, #3
 8000770:	431a      	orrs	r2, r3
 8000772:	4691      	mov	r9, r2
 8000774:	4652      	mov	r2, sl
 8000776:	e68a      	b.n	800048e <__aeabi_dmul+0x82>
 8000778:	4649      	mov	r1, r9
 800077a:	2301      	movs	r3, #1
 800077c:	4319      	orrs	r1, r3
 800077e:	4689      	mov	r9, r1
 8000780:	2600      	movs	r6, #0
 8000782:	2001      	movs	r0, #1
 8000784:	e683      	b.n	800048e <__aeabi_dmul+0x82>
 8000786:	220c      	movs	r2, #12
 8000788:	9300      	str	r3, [sp, #0]
 800078a:	2303      	movs	r3, #3
 800078c:	0005      	movs	r5, r0
 800078e:	4691      	mov	r9, r2
 8000790:	469b      	mov	fp, r3
 8000792:	e65e      	b.n	8000452 <__aeabi_dmul+0x46>
 8000794:	2304      	movs	r3, #4
 8000796:	4699      	mov	r9, r3
 8000798:	2300      	movs	r3, #0
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	3301      	adds	r3, #1
 800079e:	2400      	movs	r4, #0
 80007a0:	469b      	mov	fp, r3
 80007a2:	e656      	b.n	8000452 <__aeabi_dmul+0x46>
 80007a4:	000007ff 	.word	0x000007ff
 80007a8:	fffffc01 	.word	0xfffffc01
 80007ac:	08003898 	.word	0x08003898
 80007b0:	fffffc0d 	.word	0xfffffc0d
 80007b4:	000003ff 	.word	0x000003ff
 80007b8:	feffffff 	.word	0xfeffffff
 80007bc:	000007fe 	.word	0x000007fe
 80007c0:	2300      	movs	r3, #0
 80007c2:	2480      	movs	r4, #128	; 0x80
 80007c4:	2500      	movs	r5, #0
 80007c6:	4a44      	ldr	r2, [pc, #272]	; (80008d8 <__aeabi_dmul+0x4cc>)
 80007c8:	9301      	str	r3, [sp, #4]
 80007ca:	0324      	lsls	r4, r4, #12
 80007cc:	e68e      	b.n	80004ec <__aeabi_dmul+0xe0>
 80007ce:	2001      	movs	r0, #1
 80007d0:	1a40      	subs	r0, r0, r1
 80007d2:	2838      	cmp	r0, #56	; 0x38
 80007d4:	dd00      	ble.n	80007d8 <__aeabi_dmul+0x3cc>
 80007d6:	e686      	b.n	80004e6 <__aeabi_dmul+0xda>
 80007d8:	281f      	cmp	r0, #31
 80007da:	dd5b      	ble.n	8000894 <__aeabi_dmul+0x488>
 80007dc:	221f      	movs	r2, #31
 80007de:	0023      	movs	r3, r4
 80007e0:	4252      	negs	r2, r2
 80007e2:	1a51      	subs	r1, r2, r1
 80007e4:	40cb      	lsrs	r3, r1
 80007e6:	0019      	movs	r1, r3
 80007e8:	2820      	cmp	r0, #32
 80007ea:	d003      	beq.n	80007f4 <__aeabi_dmul+0x3e8>
 80007ec:	4a3b      	ldr	r2, [pc, #236]	; (80008dc <__aeabi_dmul+0x4d0>)
 80007ee:	4462      	add	r2, ip
 80007f0:	4094      	lsls	r4, r2
 80007f2:	4325      	orrs	r5, r4
 80007f4:	1e6a      	subs	r2, r5, #1
 80007f6:	4195      	sbcs	r5, r2
 80007f8:	002a      	movs	r2, r5
 80007fa:	430a      	orrs	r2, r1
 80007fc:	2107      	movs	r1, #7
 80007fe:	000d      	movs	r5, r1
 8000800:	2400      	movs	r4, #0
 8000802:	4015      	ands	r5, r2
 8000804:	4211      	tst	r1, r2
 8000806:	d05b      	beq.n	80008c0 <__aeabi_dmul+0x4b4>
 8000808:	210f      	movs	r1, #15
 800080a:	2400      	movs	r4, #0
 800080c:	4011      	ands	r1, r2
 800080e:	2904      	cmp	r1, #4
 8000810:	d053      	beq.n	80008ba <__aeabi_dmul+0x4ae>
 8000812:	1d11      	adds	r1, r2, #4
 8000814:	4291      	cmp	r1, r2
 8000816:	4192      	sbcs	r2, r2
 8000818:	4252      	negs	r2, r2
 800081a:	18a4      	adds	r4, r4, r2
 800081c:	000a      	movs	r2, r1
 800081e:	0223      	lsls	r3, r4, #8
 8000820:	d54b      	bpl.n	80008ba <__aeabi_dmul+0x4ae>
 8000822:	2201      	movs	r2, #1
 8000824:	2400      	movs	r4, #0
 8000826:	2500      	movs	r5, #0
 8000828:	e660      	b.n	80004ec <__aeabi_dmul+0xe0>
 800082a:	2380      	movs	r3, #128	; 0x80
 800082c:	031b      	lsls	r3, r3, #12
 800082e:	421c      	tst	r4, r3
 8000830:	d009      	beq.n	8000846 <__aeabi_dmul+0x43a>
 8000832:	421e      	tst	r6, r3
 8000834:	d107      	bne.n	8000846 <__aeabi_dmul+0x43a>
 8000836:	4333      	orrs	r3, r6
 8000838:	031c      	lsls	r4, r3, #12
 800083a:	4643      	mov	r3, r8
 800083c:	0015      	movs	r5, r2
 800083e:	0b24      	lsrs	r4, r4, #12
 8000840:	4a25      	ldr	r2, [pc, #148]	; (80008d8 <__aeabi_dmul+0x4cc>)
 8000842:	9301      	str	r3, [sp, #4]
 8000844:	e652      	b.n	80004ec <__aeabi_dmul+0xe0>
 8000846:	2280      	movs	r2, #128	; 0x80
 8000848:	0312      	lsls	r2, r2, #12
 800084a:	4314      	orrs	r4, r2
 800084c:	0324      	lsls	r4, r4, #12
 800084e:	4a22      	ldr	r2, [pc, #136]	; (80008d8 <__aeabi_dmul+0x4cc>)
 8000850:	0b24      	lsrs	r4, r4, #12
 8000852:	9701      	str	r7, [sp, #4]
 8000854:	e64a      	b.n	80004ec <__aeabi_dmul+0xe0>
 8000856:	f000 f8fd 	bl	8000a54 <__clzsi2>
 800085a:	0003      	movs	r3, r0
 800085c:	001a      	movs	r2, r3
 800085e:	3215      	adds	r2, #21
 8000860:	3020      	adds	r0, #32
 8000862:	2a1c      	cmp	r2, #28
 8000864:	dc00      	bgt.n	8000868 <__aeabi_dmul+0x45c>
 8000866:	e684      	b.n	8000572 <__aeabi_dmul+0x166>
 8000868:	4656      	mov	r6, sl
 800086a:	3b08      	subs	r3, #8
 800086c:	2200      	movs	r2, #0
 800086e:	409e      	lsls	r6, r3
 8000870:	e689      	b.n	8000586 <__aeabi_dmul+0x17a>
 8000872:	f000 f8ef 	bl	8000a54 <__clzsi2>
 8000876:	0001      	movs	r1, r0
 8000878:	0002      	movs	r2, r0
 800087a:	3115      	adds	r1, #21
 800087c:	3220      	adds	r2, #32
 800087e:	291c      	cmp	r1, #28
 8000880:	dc00      	bgt.n	8000884 <__aeabi_dmul+0x478>
 8000882:	e64e      	b.n	8000522 <__aeabi_dmul+0x116>
 8000884:	0034      	movs	r4, r6
 8000886:	3808      	subs	r0, #8
 8000888:	2500      	movs	r5, #0
 800088a:	4084      	lsls	r4, r0
 800088c:	e653      	b.n	8000536 <__aeabi_dmul+0x12a>
 800088e:	9b00      	ldr	r3, [sp, #0]
 8000890:	469c      	mov	ip, r3
 8000892:	e741      	b.n	8000718 <__aeabi_dmul+0x30c>
 8000894:	4912      	ldr	r1, [pc, #72]	; (80008e0 <__aeabi_dmul+0x4d4>)
 8000896:	0022      	movs	r2, r4
 8000898:	4461      	add	r1, ip
 800089a:	002e      	movs	r6, r5
 800089c:	408d      	lsls	r5, r1
 800089e:	408a      	lsls	r2, r1
 80008a0:	40c6      	lsrs	r6, r0
 80008a2:	1e69      	subs	r1, r5, #1
 80008a4:	418d      	sbcs	r5, r1
 80008a6:	4332      	orrs	r2, r6
 80008a8:	432a      	orrs	r2, r5
 80008aa:	40c4      	lsrs	r4, r0
 80008ac:	0753      	lsls	r3, r2, #29
 80008ae:	d0b6      	beq.n	800081e <__aeabi_dmul+0x412>
 80008b0:	210f      	movs	r1, #15
 80008b2:	4011      	ands	r1, r2
 80008b4:	2904      	cmp	r1, #4
 80008b6:	d1ac      	bne.n	8000812 <__aeabi_dmul+0x406>
 80008b8:	e7b1      	b.n	800081e <__aeabi_dmul+0x412>
 80008ba:	0765      	lsls	r5, r4, #29
 80008bc:	0264      	lsls	r4, r4, #9
 80008be:	0b24      	lsrs	r4, r4, #12
 80008c0:	08d2      	lsrs	r2, r2, #3
 80008c2:	4315      	orrs	r5, r2
 80008c4:	2200      	movs	r2, #0
 80008c6:	e611      	b.n	80004ec <__aeabi_dmul+0xe0>
 80008c8:	2280      	movs	r2, #128	; 0x80
 80008ca:	0312      	lsls	r2, r2, #12
 80008cc:	4314      	orrs	r4, r2
 80008ce:	0324      	lsls	r4, r4, #12
 80008d0:	4a01      	ldr	r2, [pc, #4]	; (80008d8 <__aeabi_dmul+0x4cc>)
 80008d2:	0b24      	lsrs	r4, r4, #12
 80008d4:	e60a      	b.n	80004ec <__aeabi_dmul+0xe0>
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	000007ff 	.word	0x000007ff
 80008dc:	0000043e 	.word	0x0000043e
 80008e0:	0000041e 	.word	0x0000041e

080008e4 <__aeabi_i2d>:
 80008e4:	b570      	push	{r4, r5, r6, lr}
 80008e6:	2800      	cmp	r0, #0
 80008e8:	d016      	beq.n	8000918 <__aeabi_i2d+0x34>
 80008ea:	17c3      	asrs	r3, r0, #31
 80008ec:	18c5      	adds	r5, r0, r3
 80008ee:	405d      	eors	r5, r3
 80008f0:	0fc4      	lsrs	r4, r0, #31
 80008f2:	0028      	movs	r0, r5
 80008f4:	f000 f8ae 	bl	8000a54 <__clzsi2>
 80008f8:	4a11      	ldr	r2, [pc, #68]	; (8000940 <__aeabi_i2d+0x5c>)
 80008fa:	1a12      	subs	r2, r2, r0
 80008fc:	280a      	cmp	r0, #10
 80008fe:	dc16      	bgt.n	800092e <__aeabi_i2d+0x4a>
 8000900:	0003      	movs	r3, r0
 8000902:	002e      	movs	r6, r5
 8000904:	3315      	adds	r3, #21
 8000906:	409e      	lsls	r6, r3
 8000908:	230b      	movs	r3, #11
 800090a:	1a18      	subs	r0, r3, r0
 800090c:	40c5      	lsrs	r5, r0
 800090e:	0553      	lsls	r3, r2, #21
 8000910:	032d      	lsls	r5, r5, #12
 8000912:	0b2d      	lsrs	r5, r5, #12
 8000914:	0d5b      	lsrs	r3, r3, #21
 8000916:	e003      	b.n	8000920 <__aeabi_i2d+0x3c>
 8000918:	2400      	movs	r4, #0
 800091a:	2300      	movs	r3, #0
 800091c:	2500      	movs	r5, #0
 800091e:	2600      	movs	r6, #0
 8000920:	051b      	lsls	r3, r3, #20
 8000922:	432b      	orrs	r3, r5
 8000924:	07e4      	lsls	r4, r4, #31
 8000926:	4323      	orrs	r3, r4
 8000928:	0030      	movs	r0, r6
 800092a:	0019      	movs	r1, r3
 800092c:	bd70      	pop	{r4, r5, r6, pc}
 800092e:	380b      	subs	r0, #11
 8000930:	4085      	lsls	r5, r0
 8000932:	0553      	lsls	r3, r2, #21
 8000934:	032d      	lsls	r5, r5, #12
 8000936:	2600      	movs	r6, #0
 8000938:	0b2d      	lsrs	r5, r5, #12
 800093a:	0d5b      	lsrs	r3, r3, #21
 800093c:	e7f0      	b.n	8000920 <__aeabi_i2d+0x3c>
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	0000041e 	.word	0x0000041e

08000944 <__aeabi_d2f>:
 8000944:	0002      	movs	r2, r0
 8000946:	004b      	lsls	r3, r1, #1
 8000948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800094a:	0308      	lsls	r0, r1, #12
 800094c:	0d5b      	lsrs	r3, r3, #21
 800094e:	4e3d      	ldr	r6, [pc, #244]	; (8000a44 <__aeabi_d2f+0x100>)
 8000950:	0fcc      	lsrs	r4, r1, #31
 8000952:	0a40      	lsrs	r0, r0, #9
 8000954:	0f51      	lsrs	r1, r2, #29
 8000956:	1c5f      	adds	r7, r3, #1
 8000958:	4308      	orrs	r0, r1
 800095a:	00d5      	lsls	r5, r2, #3
 800095c:	4237      	tst	r7, r6
 800095e:	d00a      	beq.n	8000976 <__aeabi_d2f+0x32>
 8000960:	4939      	ldr	r1, [pc, #228]	; (8000a48 <__aeabi_d2f+0x104>)
 8000962:	185e      	adds	r6, r3, r1
 8000964:	2efe      	cmp	r6, #254	; 0xfe
 8000966:	dd16      	ble.n	8000996 <__aeabi_d2f+0x52>
 8000968:	23ff      	movs	r3, #255	; 0xff
 800096a:	2100      	movs	r1, #0
 800096c:	05db      	lsls	r3, r3, #23
 800096e:	430b      	orrs	r3, r1
 8000970:	07e0      	lsls	r0, r4, #31
 8000972:	4318      	orrs	r0, r3
 8000974:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000976:	2b00      	cmp	r3, #0
 8000978:	d106      	bne.n	8000988 <__aeabi_d2f+0x44>
 800097a:	4328      	orrs	r0, r5
 800097c:	d027      	beq.n	80009ce <__aeabi_d2f+0x8a>
 800097e:	2105      	movs	r1, #5
 8000980:	0189      	lsls	r1, r1, #6
 8000982:	0a49      	lsrs	r1, r1, #9
 8000984:	b2db      	uxtb	r3, r3
 8000986:	e7f1      	b.n	800096c <__aeabi_d2f+0x28>
 8000988:	4305      	orrs	r5, r0
 800098a:	d0ed      	beq.n	8000968 <__aeabi_d2f+0x24>
 800098c:	2180      	movs	r1, #128	; 0x80
 800098e:	03c9      	lsls	r1, r1, #15
 8000990:	23ff      	movs	r3, #255	; 0xff
 8000992:	4301      	orrs	r1, r0
 8000994:	e7ea      	b.n	800096c <__aeabi_d2f+0x28>
 8000996:	2e00      	cmp	r6, #0
 8000998:	dd1c      	ble.n	80009d4 <__aeabi_d2f+0x90>
 800099a:	0192      	lsls	r2, r2, #6
 800099c:	0011      	movs	r1, r2
 800099e:	1e4a      	subs	r2, r1, #1
 80009a0:	4191      	sbcs	r1, r2
 80009a2:	00c0      	lsls	r0, r0, #3
 80009a4:	0f6d      	lsrs	r5, r5, #29
 80009a6:	4301      	orrs	r1, r0
 80009a8:	4329      	orrs	r1, r5
 80009aa:	074b      	lsls	r3, r1, #29
 80009ac:	d048      	beq.n	8000a40 <__aeabi_d2f+0xfc>
 80009ae:	230f      	movs	r3, #15
 80009b0:	400b      	ands	r3, r1
 80009b2:	2b04      	cmp	r3, #4
 80009b4:	d000      	beq.n	80009b8 <__aeabi_d2f+0x74>
 80009b6:	3104      	adds	r1, #4
 80009b8:	2380      	movs	r3, #128	; 0x80
 80009ba:	04db      	lsls	r3, r3, #19
 80009bc:	400b      	ands	r3, r1
 80009be:	d03f      	beq.n	8000a40 <__aeabi_d2f+0xfc>
 80009c0:	1c72      	adds	r2, r6, #1
 80009c2:	2efe      	cmp	r6, #254	; 0xfe
 80009c4:	d0d0      	beq.n	8000968 <__aeabi_d2f+0x24>
 80009c6:	0189      	lsls	r1, r1, #6
 80009c8:	0a49      	lsrs	r1, r1, #9
 80009ca:	b2d3      	uxtb	r3, r2
 80009cc:	e7ce      	b.n	800096c <__aeabi_d2f+0x28>
 80009ce:	2300      	movs	r3, #0
 80009d0:	2100      	movs	r1, #0
 80009d2:	e7cb      	b.n	800096c <__aeabi_d2f+0x28>
 80009d4:	0032      	movs	r2, r6
 80009d6:	3217      	adds	r2, #23
 80009d8:	db22      	blt.n	8000a20 <__aeabi_d2f+0xdc>
 80009da:	2180      	movs	r1, #128	; 0x80
 80009dc:	221e      	movs	r2, #30
 80009de:	0409      	lsls	r1, r1, #16
 80009e0:	4308      	orrs	r0, r1
 80009e2:	1b92      	subs	r2, r2, r6
 80009e4:	2a1f      	cmp	r2, #31
 80009e6:	dd1d      	ble.n	8000a24 <__aeabi_d2f+0xe0>
 80009e8:	2102      	movs	r1, #2
 80009ea:	4249      	negs	r1, r1
 80009ec:	1b8e      	subs	r6, r1, r6
 80009ee:	0001      	movs	r1, r0
 80009f0:	40f1      	lsrs	r1, r6
 80009f2:	000e      	movs	r6, r1
 80009f4:	2a20      	cmp	r2, #32
 80009f6:	d004      	beq.n	8000a02 <__aeabi_d2f+0xbe>
 80009f8:	4a14      	ldr	r2, [pc, #80]	; (8000a4c <__aeabi_d2f+0x108>)
 80009fa:	4694      	mov	ip, r2
 80009fc:	4463      	add	r3, ip
 80009fe:	4098      	lsls	r0, r3
 8000a00:	4305      	orrs	r5, r0
 8000a02:	0029      	movs	r1, r5
 8000a04:	1e4d      	subs	r5, r1, #1
 8000a06:	41a9      	sbcs	r1, r5
 8000a08:	4331      	orrs	r1, r6
 8000a0a:	2600      	movs	r6, #0
 8000a0c:	074b      	lsls	r3, r1, #29
 8000a0e:	d1ce      	bne.n	80009ae <__aeabi_d2f+0x6a>
 8000a10:	2080      	movs	r0, #128	; 0x80
 8000a12:	000b      	movs	r3, r1
 8000a14:	04c0      	lsls	r0, r0, #19
 8000a16:	2201      	movs	r2, #1
 8000a18:	4003      	ands	r3, r0
 8000a1a:	4201      	tst	r1, r0
 8000a1c:	d1d3      	bne.n	80009c6 <__aeabi_d2f+0x82>
 8000a1e:	e7af      	b.n	8000980 <__aeabi_d2f+0x3c>
 8000a20:	2300      	movs	r3, #0
 8000a22:	e7ac      	b.n	800097e <__aeabi_d2f+0x3a>
 8000a24:	490a      	ldr	r1, [pc, #40]	; (8000a50 <__aeabi_d2f+0x10c>)
 8000a26:	468c      	mov	ip, r1
 8000a28:	0029      	movs	r1, r5
 8000a2a:	4463      	add	r3, ip
 8000a2c:	40d1      	lsrs	r1, r2
 8000a2e:	409d      	lsls	r5, r3
 8000a30:	000a      	movs	r2, r1
 8000a32:	0029      	movs	r1, r5
 8000a34:	4098      	lsls	r0, r3
 8000a36:	1e4d      	subs	r5, r1, #1
 8000a38:	41a9      	sbcs	r1, r5
 8000a3a:	4301      	orrs	r1, r0
 8000a3c:	4311      	orrs	r1, r2
 8000a3e:	e7e4      	b.n	8000a0a <__aeabi_d2f+0xc6>
 8000a40:	0033      	movs	r3, r6
 8000a42:	e79d      	b.n	8000980 <__aeabi_d2f+0x3c>
 8000a44:	000007fe 	.word	0x000007fe
 8000a48:	fffffc80 	.word	0xfffffc80
 8000a4c:	fffffca2 	.word	0xfffffca2
 8000a50:	fffffc82 	.word	0xfffffc82

08000a54 <__clzsi2>:
 8000a54:	211c      	movs	r1, #28
 8000a56:	2301      	movs	r3, #1
 8000a58:	041b      	lsls	r3, r3, #16
 8000a5a:	4298      	cmp	r0, r3
 8000a5c:	d301      	bcc.n	8000a62 <__clzsi2+0xe>
 8000a5e:	0c00      	lsrs	r0, r0, #16
 8000a60:	3910      	subs	r1, #16
 8000a62:	0a1b      	lsrs	r3, r3, #8
 8000a64:	4298      	cmp	r0, r3
 8000a66:	d301      	bcc.n	8000a6c <__clzsi2+0x18>
 8000a68:	0a00      	lsrs	r0, r0, #8
 8000a6a:	3908      	subs	r1, #8
 8000a6c:	091b      	lsrs	r3, r3, #4
 8000a6e:	4298      	cmp	r0, r3
 8000a70:	d301      	bcc.n	8000a76 <__clzsi2+0x22>
 8000a72:	0900      	lsrs	r0, r0, #4
 8000a74:	3904      	subs	r1, #4
 8000a76:	a202      	add	r2, pc, #8	; (adr r2, 8000a80 <__clzsi2+0x2c>)
 8000a78:	5c10      	ldrb	r0, [r2, r0]
 8000a7a:	1840      	adds	r0, r0, r1
 8000a7c:	4770      	bx	lr
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	02020304 	.word	0x02020304
 8000a84:	01010101 	.word	0x01010101
	...

08000a90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a94:	f000 fad6 	bl	8001044 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a98:	f000 f88a 	bl	8000bb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a9c:	f000 f96e 	bl	8000d7c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000aa0:	f000 f8e4 	bl	8000c6c <MX_ADC1_Init>
  MX_DMA_Init();
 8000aa4:	f000 f94c 	bl	8000d40 <MX_DMA_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // start ADC Conversion
	  HAL_ADC_Start(&hadc1);
 8000aa8:	4b3a      	ldr	r3, [pc, #232]	; (8000b94 <main+0x104>)
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f000 fe6e 	bl	800178c <HAL_ADC_Start>

	  // waits for the end of conversion
	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000ab0:	4b38      	ldr	r3, [pc, #224]	; (8000b94 <main+0x104>)
 8000ab2:	2164      	movs	r1, #100	; 0x64
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f000 feb7 	bl	8001828 <HAL_ADC_PollForConversion>

	  //gets value from ADC result register
	  pot = HAL_ADC_GetValue(&hadc1);
 8000aba:	4b36      	ldr	r3, [pc, #216]	; (8000b94 <main+0x104>)
 8000abc:	0018      	movs	r0, r3
 8000abe:	f000 ff47 	bl	8001950 <HAL_ADC_GetValue>
 8000ac2:	0003      	movs	r3, r0
 8000ac4:	b29a      	uxth	r2, r3
 8000ac6:	4b34      	ldr	r3, [pc, #208]	; (8000b98 <main+0x108>)
 8000ac8:	801a      	strh	r2, [r3, #0]
	  tensao = pot * 0.000805861;
 8000aca:	4b33      	ldr	r3, [pc, #204]	; (8000b98 <main+0x108>)
 8000acc:	881b      	ldrh	r3, [r3, #0]
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f7ff ff08 	bl	80008e4 <__aeabi_i2d>
 8000ad4:	4a31      	ldr	r2, [pc, #196]	; (8000b9c <main+0x10c>)
 8000ad6:	4b32      	ldr	r3, [pc, #200]	; (8000ba0 <main+0x110>)
 8000ad8:	f7ff fc98 	bl	800040c <__aeabi_dmul>
 8000adc:	0002      	movs	r2, r0
 8000ade:	000b      	movs	r3, r1
 8000ae0:	0010      	movs	r0, r2
 8000ae2:	0019      	movs	r1, r3
 8000ae4:	f7ff ff2e 	bl	8000944 <__aeabi_d2f>
 8000ae8:	1c02      	adds	r2, r0, #0
 8000aea:	4b2e      	ldr	r3, [pc, #184]	; (8000ba4 <main+0x114>)
 8000aec:	601a      	str	r2, [r3, #0]

	  if (tensao <= 1){
 8000aee:	4b2d      	ldr	r3, [pc, #180]	; (8000ba4 <main+0x114>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	21fe      	movs	r1, #254	; 0xfe
 8000af4:	0589      	lsls	r1, r1, #22
 8000af6:	1c18      	adds	r0, r3, #0
 8000af8:	f7ff fbac 	bl	8000254 <__aeabi_fcmple>
 8000afc:	1e03      	subs	r3, r0, #0
 8000afe:	d012      	beq.n	8000b26 <main+0x96>
		  HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,1);
 8000b00:	4b29      	ldr	r3, [pc, #164]	; (8000ba8 <main+0x118>)
 8000b02:	2201      	movs	r2, #1
 8000b04:	2108      	movs	r1, #8
 8000b06:	0018      	movs	r0, r3
 8000b08:	f001 ff04 	bl	8002914 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,0);
 8000b0c:	4b26      	ldr	r3, [pc, #152]	; (8000ba8 <main+0x118>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2120      	movs	r1, #32
 8000b12:	0018      	movs	r0, r3
 8000b14:	f001 fefe 	bl	8002914 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,0);
 8000b18:	4b23      	ldr	r3, [pc, #140]	; (8000ba8 <main+0x118>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2110      	movs	r1, #16
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f001 fef8 	bl	8002914 <HAL_GPIO_WritePin>
 8000b24:	e7c0      	b.n	8000aa8 <main+0x18>
	  }
	  else if (tensao > 1 && tensao < 3) {
 8000b26:	4b1f      	ldr	r3, [pc, #124]	; (8000ba4 <main+0x114>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	21fe      	movs	r1, #254	; 0xfe
 8000b2c:	0589      	lsls	r1, r1, #22
 8000b2e:	1c18      	adds	r0, r3, #0
 8000b30:	f7ff fb9a 	bl	8000268 <__aeabi_fcmpgt>
 8000b34:	1e03      	subs	r3, r0, #0
 8000b36:	d01a      	beq.n	8000b6e <main+0xde>
 8000b38:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <main+0x114>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	491b      	ldr	r1, [pc, #108]	; (8000bac <main+0x11c>)
 8000b3e:	1c18      	adds	r0, r3, #0
 8000b40:	f7ff fb7e 	bl	8000240 <__aeabi_fcmplt>
 8000b44:	1e03      	subs	r3, r0, #0
 8000b46:	d012      	beq.n	8000b6e <main+0xde>
		 HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,1);
 8000b48:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <main+0x118>)
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	2120      	movs	r1, #32
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f001 fee0 	bl	8002914 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,0);
 8000b54:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <main+0x118>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	2108      	movs	r1, #8
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f001 feda 	bl	8002914 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,0);
 8000b60:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <main+0x118>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	2110      	movs	r1, #16
 8000b66:	0018      	movs	r0, r3
 8000b68:	f001 fed4 	bl	8002914 <HAL_GPIO_WritePin>
 8000b6c:	e011      	b.n	8000b92 <main+0x102>
	  }
	  else {
		  HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,1);
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <main+0x118>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	2110      	movs	r1, #16
 8000b74:	0018      	movs	r0, r3
 8000b76:	f001 fecd 	bl	8002914 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,0);
 8000b7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <main+0x118>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2120      	movs	r1, #32
 8000b80:	0018      	movs	r0, r3
 8000b82:	f001 fec7 	bl	8002914 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,0);
 8000b86:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <main+0x118>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2108      	movs	r1, #8
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f001 fec1 	bl	8002914 <HAL_GPIO_WritePin>
	  HAL_ADC_Start(&hadc1);
 8000b92:	e789      	b.n	8000aa8 <main+0x18>
 8000b94:	2000002c 	.word	0x2000002c
 8000b98:	200000f0 	.word	0x200000f0
 8000b9c:	51ef8352 	.word	0x51ef8352
 8000ba0:	3f4a680d 	.word	0x3f4a680d
 8000ba4:	20000028 	.word	0x20000028
 8000ba8:	50000400 	.word	0x50000400
 8000bac:	40400000 	.word	0x40400000

08000bb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b095      	sub	sp, #84	; 0x54
 8000bb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bb6:	2414      	movs	r4, #20
 8000bb8:	193b      	adds	r3, r7, r4
 8000bba:	0018      	movs	r0, r3
 8000bbc:	233c      	movs	r3, #60	; 0x3c
 8000bbe:	001a      	movs	r2, r3
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	f002 fe55 	bl	8003870 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	0018      	movs	r0, r3
 8000bca:	2310      	movs	r3, #16
 8000bcc:	001a      	movs	r2, r3
 8000bce:	2100      	movs	r1, #0
 8000bd0:	f002 fe4e 	bl	8003870 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bd4:	2380      	movs	r3, #128	; 0x80
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f001 feb9 	bl	8002950 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bde:	193b      	adds	r3, r7, r4
 8000be0:	2202      	movs	r2, #2
 8000be2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000be4:	193b      	adds	r3, r7, r4
 8000be6:	2280      	movs	r2, #128	; 0x80
 8000be8:	0052      	lsls	r2, r2, #1
 8000bea:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000bec:	0021      	movs	r1, r4
 8000bee:	187b      	adds	r3, r7, r1
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bf4:	187b      	adds	r3, r7, r1
 8000bf6:	2240      	movs	r2, #64	; 0x40
 8000bf8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bfa:	187b      	adds	r3, r7, r1
 8000bfc:	2202      	movs	r2, #2
 8000bfe:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	2202      	movs	r2, #2
 8000c04:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000c06:	187b      	adds	r3, r7, r1
 8000c08:	2200      	movs	r2, #0
 8000c0a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000c0c:	187b      	adds	r3, r7, r1
 8000c0e:	2208      	movs	r2, #8
 8000c10:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c12:	187b      	adds	r3, r7, r1
 8000c14:	2280      	movs	r2, #128	; 0x80
 8000c16:	0292      	lsls	r2, r2, #10
 8000c18:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c1a:	187b      	adds	r3, r7, r1
 8000c1c:	2280      	movs	r2, #128	; 0x80
 8000c1e:	0492      	lsls	r2, r2, #18
 8000c20:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c22:	187b      	adds	r3, r7, r1
 8000c24:	2280      	movs	r2, #128	; 0x80
 8000c26:	0592      	lsls	r2, r2, #22
 8000c28:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c2a:	187b      	adds	r3, r7, r1
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f001 fecf 	bl	80029d0 <HAL_RCC_OscConfig>
 8000c32:	1e03      	subs	r3, r0, #0
 8000c34:	d001      	beq.n	8000c3a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000c36:	f000 f8e5 	bl	8000e04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c3a:	1d3b      	adds	r3, r7, #4
 8000c3c:	2207      	movs	r2, #7
 8000c3e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	2202      	movs	r2, #2
 8000c44:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c4c:	1d3b      	adds	r3, r7, #4
 8000c4e:	2200      	movs	r2, #0
 8000c50:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	2102      	movs	r1, #2
 8000c56:	0018      	movs	r0, r3
 8000c58:	f002 fa20 	bl	800309c <HAL_RCC_ClockConfig>
 8000c5c:	1e03      	subs	r3, r0, #0
 8000c5e:	d001      	beq.n	8000c64 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000c60:	f000 f8d0 	bl	8000e04 <Error_Handler>
  }
}
 8000c64:	46c0      	nop			; (mov r8, r8)
 8000c66:	46bd      	mov	sp, r7
 8000c68:	b015      	add	sp, #84	; 0x54
 8000c6a:	bd90      	pop	{r4, r7, pc}

08000c6c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	0018      	movs	r0, r3
 8000c76:	230c      	movs	r3, #12
 8000c78:	001a      	movs	r2, r3
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	f002 fdf8 	bl	8003870 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c80:	4b2d      	ldr	r3, [pc, #180]	; (8000d38 <MX_ADC1_Init+0xcc>)
 8000c82:	4a2e      	ldr	r2, [pc, #184]	; (8000d3c <MX_ADC1_Init+0xd0>)
 8000c84:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c86:	4b2c      	ldr	r3, [pc, #176]	; (8000d38 <MX_ADC1_Init+0xcc>)
 8000c88:	2280      	movs	r2, #128	; 0x80
 8000c8a:	05d2      	lsls	r2, r2, #23
 8000c8c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c8e:	4b2a      	ldr	r3, [pc, #168]	; (8000d38 <MX_ADC1_Init+0xcc>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c94:	4b28      	ldr	r3, [pc, #160]	; (8000d38 <MX_ADC1_Init+0xcc>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c9a:	4b27      	ldr	r3, [pc, #156]	; (8000d38 <MX_ADC1_Init+0xcc>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ca0:	4b25      	ldr	r3, [pc, #148]	; (8000d38 <MX_ADC1_Init+0xcc>)
 8000ca2:	2204      	movs	r2, #4
 8000ca4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ca6:	4b24      	ldr	r3, [pc, #144]	; (8000d38 <MX_ADC1_Init+0xcc>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000cac:	4b22      	ldr	r3, [pc, #136]	; (8000d38 <MX_ADC1_Init+0xcc>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cb2:	4b21      	ldr	r3, [pc, #132]	; (8000d38 <MX_ADC1_Init+0xcc>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000cb8:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <MX_ADC1_Init+0xcc>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cbe:	4b1e      	ldr	r3, [pc, #120]	; (8000d38 <MX_ADC1_Init+0xcc>)
 8000cc0:	2220      	movs	r2, #32
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cc6:	4b1c      	ldr	r3, [pc, #112]	; (8000d38 <MX_ADC1_Init+0xcc>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ccc:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <MX_ADC1_Init+0xcc>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cd2:	4b19      	ldr	r3, [pc, #100]	; (8000d38 <MX_ADC1_Init+0xcc>)
 8000cd4:	222c      	movs	r2, #44	; 0x2c
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cda:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <MX_ADC1_Init+0xcc>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_39CYCLES_5;
 8000ce0:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <MX_ADC1_Init+0xcc>)
 8000ce2:	2205      	movs	r2, #5
 8000ce4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_39CYCLES_5;
 8000ce6:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <MX_ADC1_Init+0xcc>)
 8000ce8:	2205      	movs	r2, #5
 8000cea:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <MX_ADC1_Init+0xcc>)
 8000cee:	223c      	movs	r2, #60	; 0x3c
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000cf4:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <MX_ADC1_Init+0xcc>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cfa:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <MX_ADC1_Init+0xcc>)
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f000 fb67 	bl	80013d0 <HAL_ADC_Init>
 8000d02:	1e03      	subs	r3, r0, #0
 8000d04:	d001      	beq.n	8000d0a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000d06:	f000 f87d 	bl	8000e04 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d0a:	1d3b      	adds	r3, r7, #4
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	2200      	movs	r2, #0
 8000d14:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d1c:	1d3a      	adds	r2, r7, #4
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <MX_ADC1_Init+0xcc>)
 8000d20:	0011      	movs	r1, r2
 8000d22:	0018      	movs	r0, r3
 8000d24:	f000 ff50 	bl	8001bc8 <HAL_ADC_ConfigChannel>
 8000d28:	1e03      	subs	r3, r0, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000d2c:	f000 f86a 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d30:	46c0      	nop			; (mov r8, r8)
 8000d32:	46bd      	mov	sp, r7
 8000d34:	b004      	add	sp, #16
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	2000002c 	.word	0x2000002c
 8000d3c:	40012400 	.word	0x40012400

08000d40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d46:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <MX_DMA_Init+0x38>)
 8000d48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <MX_DMA_Init+0x38>)
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	430a      	orrs	r2, r1
 8000d50:	639a      	str	r2, [r3, #56]	; 0x38
 8000d52:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <MX_DMA_Init+0x38>)
 8000d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d56:	2201      	movs	r2, #1
 8000d58:	4013      	ands	r3, r2
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2100      	movs	r1, #0
 8000d62:	2009      	movs	r0, #9
 8000d64:	f001 fa5a 	bl	800221c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d68:	2009      	movs	r0, #9
 8000d6a:	f001 fa6c 	bl	8002246 <HAL_NVIC_EnableIRQ>

}
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	46bd      	mov	sp, r7
 8000d72:	b002      	add	sp, #8
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	40021000 	.word	0x40021000

08000d7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d7c:	b590      	push	{r4, r7, lr}
 8000d7e:	b089      	sub	sp, #36	; 0x24
 8000d80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d82:	240c      	movs	r4, #12
 8000d84:	193b      	adds	r3, r7, r4
 8000d86:	0018      	movs	r0, r3
 8000d88:	2314      	movs	r3, #20
 8000d8a:	001a      	movs	r2, r3
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	f002 fd6f 	bl	8003870 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d92:	4b1a      	ldr	r3, [pc, #104]	; (8000dfc <MX_GPIO_Init+0x80>)
 8000d94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d96:	4b19      	ldr	r3, [pc, #100]	; (8000dfc <MX_GPIO_Init+0x80>)
 8000d98:	2101      	movs	r1, #1
 8000d9a:	430a      	orrs	r2, r1
 8000d9c:	635a      	str	r2, [r3, #52]	; 0x34
 8000d9e:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <MX_GPIO_Init+0x80>)
 8000da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000da2:	2201      	movs	r2, #1
 8000da4:	4013      	ands	r3, r2
 8000da6:	60bb      	str	r3, [r7, #8]
 8000da8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000daa:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <MX_GPIO_Init+0x80>)
 8000dac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dae:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <MX_GPIO_Init+0x80>)
 8000db0:	2102      	movs	r1, #2
 8000db2:	430a      	orrs	r2, r1
 8000db4:	635a      	str	r2, [r3, #52]	; 0x34
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <MX_GPIO_Init+0x80>)
 8000db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dba:	2202      	movs	r2, #2
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000dc2:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <MX_GPIO_Init+0x84>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2138      	movs	r1, #56	; 0x38
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f001 fda3 	bl	8002914 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED3_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED1_Pin|LED2_Pin;
 8000dce:	0021      	movs	r1, r4
 8000dd0:	187b      	adds	r3, r7, r1
 8000dd2:	2238      	movs	r2, #56	; 0x38
 8000dd4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd6:	187b      	adds	r3, r7, r1
 8000dd8:	2201      	movs	r2, #1
 8000dda:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	187b      	adds	r3, r7, r1
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	187b      	adds	r3, r7, r1
 8000de4:	2200      	movs	r2, #0
 8000de6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de8:	187b      	adds	r3, r7, r1
 8000dea:	4a05      	ldr	r2, [pc, #20]	; (8000e00 <MX_GPIO_Init+0x84>)
 8000dec:	0019      	movs	r1, r3
 8000dee:	0010      	movs	r0, r2
 8000df0:	f001 fc24 	bl	800263c <HAL_GPIO_Init>

}
 8000df4:	46c0      	nop			; (mov r8, r8)
 8000df6:	46bd      	mov	sp, r7
 8000df8:	b009      	add	sp, #36	; 0x24
 8000dfa:	bd90      	pop	{r4, r7, pc}
 8000dfc:	40021000 	.word	0x40021000
 8000e00:	50000400 	.word	0x50000400

08000e04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e08:	b672      	cpsid	i
}
 8000e0a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <Error_Handler+0x8>
	...

08000e10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e16:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <HAL_MspInit+0x4c>)
 8000e18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e1a:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <HAL_MspInit+0x4c>)
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	430a      	orrs	r2, r1
 8000e20:	641a      	str	r2, [r3, #64]	; 0x40
 8000e22:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <HAL_MspInit+0x4c>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	2201      	movs	r2, #1
 8000e28:	4013      	ands	r3, r2
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e2e:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <HAL_MspInit+0x4c>)
 8000e30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e32:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <HAL_MspInit+0x4c>)
 8000e34:	2180      	movs	r1, #128	; 0x80
 8000e36:	0549      	lsls	r1, r1, #21
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e3c:	4b07      	ldr	r3, [pc, #28]	; (8000e5c <HAL_MspInit+0x4c>)
 8000e3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e40:	2380      	movs	r3, #128	; 0x80
 8000e42:	055b      	lsls	r3, r3, #21
 8000e44:	4013      	ands	r3, r2
 8000e46:	603b      	str	r3, [r7, #0]
 8000e48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000e4a:	23c0      	movs	r3, #192	; 0xc0
 8000e4c:	00db      	lsls	r3, r3, #3
 8000e4e:	0018      	movs	r0, r3
 8000e50:	f000 f97e 	bl	8001150 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e54:	46c0      	nop			; (mov r8, r8)
 8000e56:	46bd      	mov	sp, r7
 8000e58:	b002      	add	sp, #8
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40021000 	.word	0x40021000

08000e60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e60:	b590      	push	{r4, r7, lr}
 8000e62:	b09d      	sub	sp, #116	; 0x74
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	235c      	movs	r3, #92	; 0x5c
 8000e6a:	18fb      	adds	r3, r7, r3
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	2314      	movs	r3, #20
 8000e70:	001a      	movs	r2, r3
 8000e72:	2100      	movs	r1, #0
 8000e74:	f002 fcfc 	bl	8003870 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e78:	2410      	movs	r4, #16
 8000e7a:	193b      	adds	r3, r7, r4
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	234c      	movs	r3, #76	; 0x4c
 8000e80:	001a      	movs	r2, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	f002 fcf4 	bl	8003870 <memset>
  if(hadc->Instance==ADC1)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a39      	ldr	r2, [pc, #228]	; (8000f74 <HAL_ADC_MspInit+0x114>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d16c      	bne.n	8000f6c <HAL_ADC_MspInit+0x10c>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e92:	193b      	adds	r3, r7, r4
 8000e94:	2280      	movs	r2, #128	; 0x80
 8000e96:	01d2      	lsls	r2, r2, #7
 8000e98:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000e9a:	193b      	adds	r3, r7, r4
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ea0:	193b      	adds	r3, r7, r4
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	f002 fa84 	bl	80033b0 <HAL_RCCEx_PeriphCLKConfig>
 8000ea8:	1e03      	subs	r3, r0, #0
 8000eaa:	d001      	beq.n	8000eb0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000eac:	f7ff ffaa 	bl	8000e04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000eb0:	4b31      	ldr	r3, [pc, #196]	; (8000f78 <HAL_ADC_MspInit+0x118>)
 8000eb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000eb4:	4b30      	ldr	r3, [pc, #192]	; (8000f78 <HAL_ADC_MspInit+0x118>)
 8000eb6:	2180      	movs	r1, #128	; 0x80
 8000eb8:	0349      	lsls	r1, r1, #13
 8000eba:	430a      	orrs	r2, r1
 8000ebc:	641a      	str	r2, [r3, #64]	; 0x40
 8000ebe:	4b2e      	ldr	r3, [pc, #184]	; (8000f78 <HAL_ADC_MspInit+0x118>)
 8000ec0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ec2:	2380      	movs	r3, #128	; 0x80
 8000ec4:	035b      	lsls	r3, r3, #13
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ecc:	4b2a      	ldr	r3, [pc, #168]	; (8000f78 <HAL_ADC_MspInit+0x118>)
 8000ece:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ed0:	4b29      	ldr	r3, [pc, #164]	; (8000f78 <HAL_ADC_MspInit+0x118>)
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	430a      	orrs	r2, r1
 8000ed6:	635a      	str	r2, [r3, #52]	; 0x34
 8000ed8:	4b27      	ldr	r3, [pc, #156]	; (8000f78 <HAL_ADC_MspInit+0x118>)
 8000eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000edc:	2201      	movs	r2, #1
 8000ede:	4013      	ands	r3, r2
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ee4:	215c      	movs	r1, #92	; 0x5c
 8000ee6:	187b      	adds	r3, r7, r1
 8000ee8:	2201      	movs	r2, #1
 8000eea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eec:	187b      	adds	r3, r7, r1
 8000eee:	2203      	movs	r2, #3
 8000ef0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	187b      	adds	r3, r7, r1
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef8:	187a      	adds	r2, r7, r1
 8000efa:	23a0      	movs	r3, #160	; 0xa0
 8000efc:	05db      	lsls	r3, r3, #23
 8000efe:	0011      	movs	r1, r2
 8000f00:	0018      	movs	r0, r3
 8000f02:	f001 fb9b 	bl	800263c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000f06:	4b1d      	ldr	r3, [pc, #116]	; (8000f7c <HAL_ADC_MspInit+0x11c>)
 8000f08:	4a1d      	ldr	r2, [pc, #116]	; (8000f80 <HAL_ADC_MspInit+0x120>)
 8000f0a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000f0c:	4b1b      	ldr	r3, [pc, #108]	; (8000f7c <HAL_ADC_MspInit+0x11c>)
 8000f0e:	2205      	movs	r2, #5
 8000f10:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f12:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <HAL_ADC_MspInit+0x11c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f18:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <HAL_ADC_MspInit+0x11c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f1e:	4b17      	ldr	r3, [pc, #92]	; (8000f7c <HAL_ADC_MspInit+0x11c>)
 8000f20:	2280      	movs	r2, #128	; 0x80
 8000f22:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f24:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <HAL_ADC_MspInit+0x11c>)
 8000f26:	2280      	movs	r2, #128	; 0x80
 8000f28:	0052      	lsls	r2, r2, #1
 8000f2a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f2c:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <HAL_ADC_MspInit+0x11c>)
 8000f2e:	2280      	movs	r2, #128	; 0x80
 8000f30:	00d2      	lsls	r2, r2, #3
 8000f32:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f34:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <HAL_ADC_MspInit+0x11c>)
 8000f36:	2220      	movs	r2, #32
 8000f38:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f3a:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <HAL_ADC_MspInit+0x11c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f40:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <HAL_ADC_MspInit+0x11c>)
 8000f42:	0018      	movs	r0, r3
 8000f44:	f001 f99c 	bl	8002280 <HAL_DMA_Init>
 8000f48:	1e03      	subs	r3, r0, #0
 8000f4a:	d001      	beq.n	8000f50 <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 8000f4c:	f7ff ff5a 	bl	8000e04 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4a0a      	ldr	r2, [pc, #40]	; (8000f7c <HAL_ADC_MspInit+0x11c>)
 8000f54:	651a      	str	r2, [r3, #80]	; 0x50
 8000f56:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <HAL_ADC_MspInit+0x11c>)
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	629a      	str	r2, [r3, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2100      	movs	r1, #0
 8000f60:	200c      	movs	r0, #12
 8000f62:	f001 f95b 	bl	800221c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8000f66:	200c      	movs	r0, #12
 8000f68:	f001 f96d 	bl	8002246 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f6c:	46c0      	nop			; (mov r8, r8)
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	b01d      	add	sp, #116	; 0x74
 8000f72:	bd90      	pop	{r4, r7, pc}
 8000f74:	40012400 	.word	0x40012400
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	20000090 	.word	0x20000090
 8000f80:	40020008 	.word	0x40020008

08000f84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <NMI_Handler+0x4>

08000f8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f8e:	e7fe      	b.n	8000f8e <HardFault_Handler+0x4>

08000f90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f94:	46c0      	nop			; (mov r8, r8)
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f9e:	46c0      	nop			; (mov r8, r8)
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa8:	f000 f8b6 	bl	8001118 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fac:	46c0      	nop			; (mov r8, r8)
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000fb8:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <DMA1_Channel1_IRQHandler+0x14>)
 8000fba:	0018      	movs	r0, r3
 8000fbc:	f001 fa0c 	bl	80023d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000fc0:	46c0      	nop			; (mov r8, r8)
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	20000090 	.word	0x20000090

08000fcc <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC1, COMP1,COMP2, COMP3 Interrupts (combined with EXTI 17 & 18).
  */
void ADC1_COMP_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000fd0:	4b03      	ldr	r3, [pc, #12]	; (8000fe0 <ADC1_COMP_IRQHandler+0x14>)
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	f000 fcc8 	bl	8001968 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8000fd8:	46c0      	nop			; (mov r8, r8)
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	2000002c 	.word	0x2000002c

08000fe4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fe8:	46c0      	nop			; (mov r8, r8)
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ff0:	480d      	ldr	r0, [pc, #52]	; (8001028 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ff2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ff4:	f7ff fff6 	bl	8000fe4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ff8:	480c      	ldr	r0, [pc, #48]	; (800102c <LoopForever+0x6>)
  ldr r1, =_edata
 8000ffa:	490d      	ldr	r1, [pc, #52]	; (8001030 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ffc:	4a0d      	ldr	r2, [pc, #52]	; (8001034 <LoopForever+0xe>)
  movs r3, #0
 8000ffe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001000:	e002      	b.n	8001008 <LoopCopyDataInit>

08001002 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001002:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001004:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001006:	3304      	adds	r3, #4

08001008 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001008:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800100a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800100c:	d3f9      	bcc.n	8001002 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800100e:	4a0a      	ldr	r2, [pc, #40]	; (8001038 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001010:	4c0a      	ldr	r4, [pc, #40]	; (800103c <LoopForever+0x16>)
  movs r3, #0
 8001012:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001014:	e001      	b.n	800101a <LoopFillZerobss>

08001016 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001016:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001018:	3204      	adds	r2, #4

0800101a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800101a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800101c:	d3fb      	bcc.n	8001016 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800101e:	f002 fc03 	bl	8003828 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001022:	f7ff fd35 	bl	8000a90 <main>

08001026 <LoopForever>:

LoopForever:
  b LoopForever
 8001026:	e7fe      	b.n	8001026 <LoopForever>
  ldr   r0, =_estack
 8001028:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 800102c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001030:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001034:	08003920 	.word	0x08003920
  ldr r2, =_sbss
 8001038:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800103c:	200000f8 	.word	0x200000f8

08001040 <CEC_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001040:	e7fe      	b.n	8001040 <CEC_IRQHandler>
	...

08001044 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800104a:	1dfb      	adds	r3, r7, #7
 800104c:	2200      	movs	r2, #0
 800104e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001050:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <HAL_Init+0x3c>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <HAL_Init+0x3c>)
 8001056:	2180      	movs	r1, #128	; 0x80
 8001058:	0049      	lsls	r1, r1, #1
 800105a:	430a      	orrs	r2, r1
 800105c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800105e:	2003      	movs	r0, #3
 8001060:	f000 f810 	bl	8001084 <HAL_InitTick>
 8001064:	1e03      	subs	r3, r0, #0
 8001066:	d003      	beq.n	8001070 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001068:	1dfb      	adds	r3, r7, #7
 800106a:	2201      	movs	r2, #1
 800106c:	701a      	strb	r2, [r3, #0]
 800106e:	e001      	b.n	8001074 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001070:	f7ff fece 	bl	8000e10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001074:	1dfb      	adds	r3, r7, #7
 8001076:	781b      	ldrb	r3, [r3, #0]
}
 8001078:	0018      	movs	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	b002      	add	sp, #8
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40022000 	.word	0x40022000

08001084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001084:	b590      	push	{r4, r7, lr}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800108c:	230f      	movs	r3, #15
 800108e:	18fb      	adds	r3, r7, r3
 8001090:	2200      	movs	r2, #0
 8001092:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001094:	4b1d      	ldr	r3, [pc, #116]	; (800110c <HAL_InitTick+0x88>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d02b      	beq.n	80010f4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800109c:	4b1c      	ldr	r3, [pc, #112]	; (8001110 <HAL_InitTick+0x8c>)
 800109e:	681c      	ldr	r4, [r3, #0]
 80010a0:	4b1a      	ldr	r3, [pc, #104]	; (800110c <HAL_InitTick+0x88>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	0019      	movs	r1, r3
 80010a6:	23fa      	movs	r3, #250	; 0xfa
 80010a8:	0098      	lsls	r0, r3, #2
 80010aa:	f7ff f82b 	bl	8000104 <__udivsi3>
 80010ae:	0003      	movs	r3, r0
 80010b0:	0019      	movs	r1, r3
 80010b2:	0020      	movs	r0, r4
 80010b4:	f7ff f826 	bl	8000104 <__udivsi3>
 80010b8:	0003      	movs	r3, r0
 80010ba:	0018      	movs	r0, r3
 80010bc:	f001 f8d3 	bl	8002266 <HAL_SYSTICK_Config>
 80010c0:	1e03      	subs	r3, r0, #0
 80010c2:	d112      	bne.n	80010ea <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2b03      	cmp	r3, #3
 80010c8:	d80a      	bhi.n	80010e0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	2301      	movs	r3, #1
 80010ce:	425b      	negs	r3, r3
 80010d0:	2200      	movs	r2, #0
 80010d2:	0018      	movs	r0, r3
 80010d4:	f001 f8a2 	bl	800221c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010d8:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <HAL_InitTick+0x90>)
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	e00d      	b.n	80010fc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80010e0:	230f      	movs	r3, #15
 80010e2:	18fb      	adds	r3, r7, r3
 80010e4:	2201      	movs	r2, #1
 80010e6:	701a      	strb	r2, [r3, #0]
 80010e8:	e008      	b.n	80010fc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010ea:	230f      	movs	r3, #15
 80010ec:	18fb      	adds	r3, r7, r3
 80010ee:	2201      	movs	r2, #1
 80010f0:	701a      	strb	r2, [r3, #0]
 80010f2:	e003      	b.n	80010fc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010f4:	230f      	movs	r3, #15
 80010f6:	18fb      	adds	r3, r7, r3
 80010f8:	2201      	movs	r2, #1
 80010fa:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80010fc:	230f      	movs	r3, #15
 80010fe:	18fb      	adds	r3, r7, r3
 8001100:	781b      	ldrb	r3, [r3, #0]
}
 8001102:	0018      	movs	r0, r3
 8001104:	46bd      	mov	sp, r7
 8001106:	b005      	add	sp, #20
 8001108:	bd90      	pop	{r4, r7, pc}
 800110a:	46c0      	nop			; (mov r8, r8)
 800110c:	20000008 	.word	0x20000008
 8001110:	20000000 	.word	0x20000000
 8001114:	20000004 	.word	0x20000004

08001118 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800111c:	4b05      	ldr	r3, [pc, #20]	; (8001134 <HAL_IncTick+0x1c>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	001a      	movs	r2, r3
 8001122:	4b05      	ldr	r3, [pc, #20]	; (8001138 <HAL_IncTick+0x20>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	18d2      	adds	r2, r2, r3
 8001128:	4b03      	ldr	r3, [pc, #12]	; (8001138 <HAL_IncTick+0x20>)
 800112a:	601a      	str	r2, [r3, #0]
}
 800112c:	46c0      	nop			; (mov r8, r8)
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	46c0      	nop			; (mov r8, r8)
 8001134:	20000008 	.word	0x20000008
 8001138:	200000f4 	.word	0x200000f4

0800113c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  return uwTick;
 8001140:	4b02      	ldr	r3, [pc, #8]	; (800114c <HAL_GetTick+0x10>)
 8001142:	681b      	ldr	r3, [r3, #0]
}
 8001144:	0018      	movs	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	200000f4 	.word	0x200000f4

08001150 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a06      	ldr	r2, [pc, #24]	; (8001178 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800115e:	4013      	ands	r3, r2
 8001160:	0019      	movs	r1, r3
 8001162:	4b04      	ldr	r3, [pc, #16]	; (8001174 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	430a      	orrs	r2, r1
 8001168:	601a      	str	r2, [r3, #0]
}
 800116a:	46c0      	nop			; (mov r8, r8)
 800116c:	46bd      	mov	sp, r7
 800116e:	b002      	add	sp, #8
 8001170:	bd80      	pop	{r7, pc}
 8001172:	46c0      	nop			; (mov r8, r8)
 8001174:	40010000 	.word	0x40010000
 8001178:	fffff9ff 	.word	0xfffff9ff

0800117c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a05      	ldr	r2, [pc, #20]	; (80011a0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800118c:	401a      	ands	r2, r3
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	431a      	orrs	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	601a      	str	r2, [r3, #0]
}
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	46bd      	mov	sp, r7
 800119a:	b002      	add	sp, #8
 800119c:	bd80      	pop	{r7, pc}
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	fe3fffff 	.word	0xfe3fffff

080011a4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	23e0      	movs	r3, #224	; 0xe0
 80011b2:	045b      	lsls	r3, r3, #17
 80011b4:	4013      	ands	r3, r2
}
 80011b6:	0018      	movs	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	b002      	add	sp, #8
 80011bc:	bd80      	pop	{r7, pc}

080011be <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b084      	sub	sp, #16
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	60f8      	str	r0, [r7, #12]
 80011c6:	60b9      	str	r1, [r7, #8]
 80011c8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	2104      	movs	r1, #4
 80011d2:	400a      	ands	r2, r1
 80011d4:	2107      	movs	r1, #7
 80011d6:	4091      	lsls	r1, r2
 80011d8:	000a      	movs	r2, r1
 80011da:	43d2      	mvns	r2, r2
 80011dc:	401a      	ands	r2, r3
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	2104      	movs	r1, #4
 80011e2:	400b      	ands	r3, r1
 80011e4:	6879      	ldr	r1, [r7, #4]
 80011e6:	4099      	lsls	r1, r3
 80011e8:	000b      	movs	r3, r1
 80011ea:	431a      	orrs	r2, r3
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80011f0:	46c0      	nop			; (mov r8, r8)
 80011f2:	46bd      	mov	sp, r7
 80011f4:	b004      	add	sp, #16
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68da      	ldr	r2, [r3, #12]
 8001204:	23c0      	movs	r3, #192	; 0xc0
 8001206:	011b      	lsls	r3, r3, #4
 8001208:	4013      	ands	r3, r2
 800120a:	d101      	bne.n	8001210 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800120c:	2301      	movs	r3, #1
 800120e:	e000      	b.n	8001212 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001210:	2300      	movs	r3, #0
}
 8001212:	0018      	movs	r0, r3
 8001214:	46bd      	mov	sp, r7
 8001216:	b002      	add	sp, #8
 8001218:	bd80      	pop	{r7, pc}

0800121a <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b084      	sub	sp, #16
 800121e:	af00      	add	r7, sp, #0
 8001220:	60f8      	str	r0, [r7, #12]
 8001222:	60b9      	str	r1, [r7, #8]
 8001224:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122a:	68ba      	ldr	r2, [r7, #8]
 800122c:	211f      	movs	r1, #31
 800122e:	400a      	ands	r2, r1
 8001230:	210f      	movs	r1, #15
 8001232:	4091      	lsls	r1, r2
 8001234:	000a      	movs	r2, r1
 8001236:	43d2      	mvns	r2, r2
 8001238:	401a      	ands	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	0e9b      	lsrs	r3, r3, #26
 800123e:	210f      	movs	r1, #15
 8001240:	4019      	ands	r1, r3
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	201f      	movs	r0, #31
 8001246:	4003      	ands	r3, r0
 8001248:	4099      	lsls	r1, r3
 800124a:	000b      	movs	r3, r1
 800124c:	431a      	orrs	r2, r3
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001252:	46c0      	nop			; (mov r8, r8)
 8001254:	46bd      	mov	sp, r7
 8001256:	b004      	add	sp, #16
 8001258:	bd80      	pop	{r7, pc}

0800125a <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
 8001262:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	035b      	lsls	r3, r3, #13
 800126c:	0b5b      	lsrs	r3, r3, #13
 800126e:	431a      	orrs	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001274:	46c0      	nop			; (mov r8, r8)
 8001276:	46bd      	mov	sp, r7
 8001278:	b002      	add	sp, #8
 800127a:	bd80      	pop	{r7, pc}

0800127c <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800128a:	683a      	ldr	r2, [r7, #0]
 800128c:	0352      	lsls	r2, r2, #13
 800128e:	0b52      	lsrs	r2, r2, #13
 8001290:	43d2      	mvns	r2, r2
 8001292:	401a      	ands	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001298:	46c0      	nop			; (mov r8, r8)
 800129a:	46bd      	mov	sp, r7
 800129c:	b002      	add	sp, #8
 800129e:	bd80      	pop	{r7, pc}

080012a0 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	2203      	movs	r2, #3
 80012ae:	4013      	ands	r3, r2
}
 80012b0:	0018      	movs	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	b002      	add	sp, #8
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	68ba      	ldr	r2, [r7, #8]
 80012ca:	0212      	lsls	r2, r2, #8
 80012cc:	43d2      	mvns	r2, r2
 80012ce:	401a      	ands	r2, r3
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	021b      	lsls	r3, r3, #8
 80012d4:	6879      	ldr	r1, [r7, #4]
 80012d6:	400b      	ands	r3, r1
 80012d8:	4904      	ldr	r1, [pc, #16]	; (80012ec <LL_ADC_SetChannelSamplingTime+0x34>)
 80012da:	400b      	ands	r3, r1
 80012dc:	431a      	orrs	r2, r3
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80012e2:	46c0      	nop			; (mov r8, r8)
 80012e4:	46bd      	mov	sp, r7
 80012e6:	b004      	add	sp, #16
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	46c0      	nop			; (mov r8, r8)
 80012ec:	07ffff00 	.word	0x07ffff00

080012f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	4a05      	ldr	r2, [pc, #20]	; (8001314 <LL_ADC_EnableInternalRegulator+0x24>)
 80012fe:	4013      	ands	r3, r2
 8001300:	2280      	movs	r2, #128	; 0x80
 8001302:	0552      	lsls	r2, r2, #21
 8001304:	431a      	orrs	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800130a:	46c0      	nop			; (mov r8, r8)
 800130c:	46bd      	mov	sp, r7
 800130e:	b002      	add	sp, #8
 8001310:	bd80      	pop	{r7, pc}
 8001312:	46c0      	nop			; (mov r8, r8)
 8001314:	6fffffe8 	.word	0x6fffffe8

08001318 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689a      	ldr	r2, [r3, #8]
 8001324:	2380      	movs	r3, #128	; 0x80
 8001326:	055b      	lsls	r3, r3, #21
 8001328:	401a      	ands	r2, r3
 800132a:	2380      	movs	r3, #128	; 0x80
 800132c:	055b      	lsls	r3, r3, #21
 800132e:	429a      	cmp	r2, r3
 8001330:	d101      	bne.n	8001336 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001332:	2301      	movs	r3, #1
 8001334:	e000      	b.n	8001338 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001336:	2300      	movs	r3, #0
}
 8001338:	0018      	movs	r0, r3
 800133a:	46bd      	mov	sp, r7
 800133c:	b002      	add	sp, #8
 800133e:	bd80      	pop	{r7, pc}

08001340 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	4a04      	ldr	r2, [pc, #16]	; (8001360 <LL_ADC_Enable+0x20>)
 800134e:	4013      	ands	r3, r2
 8001350:	2201      	movs	r2, #1
 8001352:	431a      	orrs	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001358:	46c0      	nop			; (mov r8, r8)
 800135a:	46bd      	mov	sp, r7
 800135c:	b002      	add	sp, #8
 800135e:	bd80      	pop	{r7, pc}
 8001360:	7fffffe8 	.word	0x7fffffe8

08001364 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	2201      	movs	r2, #1
 8001372:	4013      	ands	r3, r2
 8001374:	2b01      	cmp	r3, #1
 8001376:	d101      	bne.n	800137c <LL_ADC_IsEnabled+0x18>
 8001378:	2301      	movs	r3, #1
 800137a:	e000      	b.n	800137e <LL_ADC_IsEnabled+0x1a>
 800137c:	2300      	movs	r3, #0
}
 800137e:	0018      	movs	r0, r3
 8001380:	46bd      	mov	sp, r7
 8001382:	b002      	add	sp, #8
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	4a04      	ldr	r2, [pc, #16]	; (80013a8 <LL_ADC_REG_StartConversion+0x20>)
 8001396:	4013      	ands	r3, r2
 8001398:	2204      	movs	r2, #4
 800139a:	431a      	orrs	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80013a0:	46c0      	nop			; (mov r8, r8)
 80013a2:	46bd      	mov	sp, r7
 80013a4:	b002      	add	sp, #8
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	7fffffe8 	.word	0x7fffffe8

080013ac <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	2204      	movs	r2, #4
 80013ba:	4013      	ands	r3, r2
 80013bc:	2b04      	cmp	r3, #4
 80013be:	d101      	bne.n	80013c4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80013c0:	2301      	movs	r3, #1
 80013c2:	e000      	b.n	80013c6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	0018      	movs	r0, r3
 80013c8:	46bd      	mov	sp, r7
 80013ca:	b002      	add	sp, #8
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b088      	sub	sp, #32
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013d8:	231f      	movs	r3, #31
 80013da:	18fb      	adds	r3, r7, r3
 80013dc:	2200      	movs	r2, #0
 80013de:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d101      	bne.n	80013f6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e1b1      	b.n	800175a <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d10a      	bne.n	8001414 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	0018      	movs	r0, r3
 8001402:	f7ff fd2d 	bl	8000e60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2254      	movs	r2, #84	; 0x54
 8001410:	2100      	movs	r1, #0
 8001412:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	0018      	movs	r0, r3
 800141a:	f7ff ff7d 	bl	8001318 <LL_ADC_IsInternalRegulatorEnabled>
 800141e:	1e03      	subs	r3, r0, #0
 8001420:	d115      	bne.n	800144e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	0018      	movs	r0, r3
 8001428:	f7ff ff62 	bl	80012f0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800142c:	4bcd      	ldr	r3, [pc, #820]	; (8001764 <HAL_ADC_Init+0x394>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	49cd      	ldr	r1, [pc, #820]	; (8001768 <HAL_ADC_Init+0x398>)
 8001432:	0018      	movs	r0, r3
 8001434:	f7fe fe66 	bl	8000104 <__udivsi3>
 8001438:	0003      	movs	r3, r0
 800143a:	3301      	adds	r3, #1
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001440:	e002      	b.n	8001448 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	3b01      	subs	r3, #1
 8001446:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1f9      	bne.n	8001442 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	0018      	movs	r0, r3
 8001454:	f7ff ff60 	bl	8001318 <LL_ADC_IsInternalRegulatorEnabled>
 8001458:	1e03      	subs	r3, r0, #0
 800145a:	d10f      	bne.n	800147c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001460:	2210      	movs	r2, #16
 8001462:	431a      	orrs	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800146c:	2201      	movs	r2, #1
 800146e:	431a      	orrs	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001474:	231f      	movs	r3, #31
 8001476:	18fb      	adds	r3, r7, r3
 8001478:	2201      	movs	r2, #1
 800147a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	0018      	movs	r0, r3
 8001482:	f7ff ff93 	bl	80013ac <LL_ADC_REG_IsConversionOngoing>
 8001486:	0003      	movs	r3, r0
 8001488:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800148e:	2210      	movs	r2, #16
 8001490:	4013      	ands	r3, r2
 8001492:	d000      	beq.n	8001496 <HAL_ADC_Init+0xc6>
 8001494:	e154      	b.n	8001740 <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d000      	beq.n	800149e <HAL_ADC_Init+0xce>
 800149c:	e150      	b.n	8001740 <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a2:	4ab2      	ldr	r2, [pc, #712]	; (800176c <HAL_ADC_Init+0x39c>)
 80014a4:	4013      	ands	r3, r2
 80014a6:	2202      	movs	r2, #2
 80014a8:	431a      	orrs	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	0018      	movs	r0, r3
 80014b4:	f7ff ff56 	bl	8001364 <LL_ADC_IsEnabled>
 80014b8:	1e03      	subs	r3, r0, #0
 80014ba:	d156      	bne.n	800156a <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	2218      	movs	r2, #24
 80014c4:	4393      	bics	r3, r2
 80014c6:	0019      	movs	r1, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689a      	ldr	r2, [r3, #8]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	430a      	orrs	r2, r1
 80014d2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	0f9b      	lsrs	r3, r3, #30
 80014da:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80014e0:	4313      	orrs	r3, r2
 80014e2:	697a      	ldr	r2, [r7, #20]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	223c      	movs	r2, #60	; 0x3c
 80014ec:	5c9b      	ldrb	r3, [r3, r2]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d111      	bne.n	8001516 <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	0f9b      	lsrs	r3, r3, #30
 80014f8:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80014fe:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001504:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800150a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	4313      	orrs	r3, r2
 8001510:	2201      	movs	r2, #1
 8001512:	4313      	orrs	r3, r2
 8001514:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	691b      	ldr	r3, [r3, #16]
 800151c:	4a94      	ldr	r2, [pc, #592]	; (8001770 <HAL_ADC_Init+0x3a0>)
 800151e:	4013      	ands	r3, r2
 8001520:	0019      	movs	r1, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	697a      	ldr	r2, [r7, #20]
 8001528:	430a      	orrs	r2, r1
 800152a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685a      	ldr	r2, [r3, #4]
 8001530:	23c0      	movs	r3, #192	; 0xc0
 8001532:	061b      	lsls	r3, r3, #24
 8001534:	429a      	cmp	r2, r3
 8001536:	d018      	beq.n	800156a <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800153c:	2380      	movs	r3, #128	; 0x80
 800153e:	05db      	lsls	r3, r3, #23
 8001540:	429a      	cmp	r2, r3
 8001542:	d012      	beq.n	800156a <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001548:	2380      	movs	r3, #128	; 0x80
 800154a:	061b      	lsls	r3, r3, #24
 800154c:	429a      	cmp	r2, r3
 800154e:	d00c      	beq.n	800156a <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001550:	4b88      	ldr	r3, [pc, #544]	; (8001774 <HAL_ADC_Init+0x3a4>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a88      	ldr	r2, [pc, #544]	; (8001778 <HAL_ADC_Init+0x3a8>)
 8001556:	4013      	ands	r3, r2
 8001558:	0019      	movs	r1, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685a      	ldr	r2, [r3, #4]
 800155e:	23f0      	movs	r3, #240	; 0xf0
 8001560:	039b      	lsls	r3, r3, #14
 8001562:	401a      	ands	r2, r3
 8001564:	4b83      	ldr	r3, [pc, #524]	; (8001774 <HAL_ADC_Init+0x3a4>)
 8001566:	430a      	orrs	r2, r1
 8001568:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	7e1b      	ldrb	r3, [r3, #24]
 800156e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	7e5b      	ldrb	r3, [r3, #25]
 8001574:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001576:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	7e9b      	ldrb	r3, [r3, #26]
 800157c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800157e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001584:	2b00      	cmp	r3, #0
 8001586:	d002      	beq.n	800158e <HAL_ADC_Init+0x1be>
 8001588:	2380      	movs	r3, #128	; 0x80
 800158a:	015b      	lsls	r3, r3, #5
 800158c:	e000      	b.n	8001590 <HAL_ADC_Init+0x1c0>
 800158e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001590:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001596:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	2b00      	cmp	r3, #0
 800159e:	da04      	bge.n	80015aa <HAL_ADC_Init+0x1da>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	691b      	ldr	r3, [r3, #16]
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	085b      	lsrs	r3, r3, #1
 80015a8:	e001      	b.n	80015ae <HAL_ADC_Init+0x1de>
 80015aa:	2380      	movs	r3, #128	; 0x80
 80015ac:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 80015ae:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	212c      	movs	r1, #44	; 0x2c
 80015b4:	5c5b      	ldrb	r3, [r3, r1]
 80015b6:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80015b8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4313      	orrs	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2220      	movs	r2, #32
 80015c4:	5c9b      	ldrb	r3, [r3, r2]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d115      	bne.n	80015f6 <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	7e9b      	ldrb	r3, [r3, #26]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d105      	bne.n	80015de <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	2280      	movs	r2, #128	; 0x80
 80015d6:	0252      	lsls	r2, r2, #9
 80015d8:	4313      	orrs	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
 80015dc:	e00b      	b.n	80015f6 <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e2:	2220      	movs	r2, #32
 80015e4:	431a      	orrs	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ee:	2201      	movs	r2, #1
 80015f0:	431a      	orrs	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d00a      	beq.n	8001614 <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001602:	23e0      	movs	r3, #224	; 0xe0
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800160c:	4313      	orrs	r3, r2
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4313      	orrs	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	4a58      	ldr	r2, [pc, #352]	; (800177c <HAL_ADC_Init+0x3ac>)
 800161c:	4013      	ands	r3, r2
 800161e:	0019      	movs	r1, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	430a      	orrs	r2, r1
 8001628:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	691b      	ldr	r3, [r3, #16]
 8001630:	4a53      	ldr	r2, [pc, #332]	; (8001780 <HAL_ADC_Init+0x3b0>)
 8001632:	4013      	ands	r3, r2
 8001634:	0019      	movs	r1, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	430a      	orrs	r2, r1
 800163e:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6818      	ldr	r0, [r3, #0]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001648:	001a      	movs	r2, r3
 800164a:	2100      	movs	r1, #0
 800164c:	f7ff fdb7 	bl	80011be <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6818      	ldr	r0, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001658:	494a      	ldr	r1, [pc, #296]	; (8001784 <HAL_ADC_Init+0x3b4>)
 800165a:	001a      	movs	r2, r3
 800165c:	f7ff fdaf 	bl	80011be <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	691b      	ldr	r3, [r3, #16]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d109      	bne.n	800167c <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2110      	movs	r1, #16
 8001674:	4249      	negs	r1, r1
 8001676:	430a      	orrs	r2, r1
 8001678:	629a      	str	r2, [r3, #40]	; 0x28
 800167a:	e03a      	b.n	80016f2 <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	691a      	ldr	r2, [r3, #16]
 8001680:	2380      	movs	r3, #128	; 0x80
 8001682:	039b      	lsls	r3, r3, #14
 8001684:	429a      	cmp	r2, r3
 8001686:	d134      	bne.n	80016f2 <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8001688:	2300      	movs	r3, #0
 800168a:	613b      	str	r3, [r7, #16]
 800168c:	e00c      	b.n	80016a8 <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	40da      	lsrs	r2, r3
 8001698:	0013      	movs	r3, r2
 800169a:	220f      	movs	r2, #15
 800169c:	4013      	ands	r3, r2
 800169e:	2b0f      	cmp	r3, #15
 80016a0:	d006      	beq.n	80016b0 <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	3301      	adds	r3, #1
 80016a6:	613b      	str	r3, [r7, #16]
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	2b07      	cmp	r3, #7
 80016ac:	d9ef      	bls.n	800168e <HAL_ADC_Init+0x2be>
 80016ae:	e000      	b.n	80016b2 <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 80016b0:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d109      	bne.n	80016cc <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2110      	movs	r1, #16
 80016c4:	4249      	negs	r1, r1
 80016c6:	430a      	orrs	r2, r1
 80016c8:	629a      	str	r2, [r3, #40]	; 0x28
 80016ca:	e012      	b.n	80016f2 <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	3b01      	subs	r3, #1
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	221c      	movs	r2, #28
 80016dc:	4013      	ands	r3, r2
 80016de:	2210      	movs	r2, #16
 80016e0:	4252      	negs	r2, r2
 80016e2:	409a      	lsls	r2, r3
 80016e4:	0011      	movs	r1, r2
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	430a      	orrs	r2, r1
 80016f0:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	4a23      	ldr	r2, [pc, #140]	; (8001788 <HAL_ADC_Init+0x3b8>)
 80016fa:	4013      	ands	r3, r2
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d10b      	bne.n	800171a <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170c:	2203      	movs	r2, #3
 800170e:	4393      	bics	r3, r2
 8001710:	2201      	movs	r2, #1
 8001712:	431a      	orrs	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001718:	e01c      	b.n	8001754 <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800171e:	2212      	movs	r2, #18
 8001720:	4393      	bics	r3, r2
 8001722:	2210      	movs	r2, #16
 8001724:	431a      	orrs	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800172e:	2201      	movs	r2, #1
 8001730:	431a      	orrs	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001736:	231f      	movs	r3, #31
 8001738:	18fb      	adds	r3, r7, r3
 800173a:	2201      	movs	r2, #1
 800173c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800173e:	e009      	b.n	8001754 <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001744:	2210      	movs	r2, #16
 8001746:	431a      	orrs	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800174c:	231f      	movs	r3, #31
 800174e:	18fb      	adds	r3, r7, r3
 8001750:	2201      	movs	r2, #1
 8001752:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001754:	231f      	movs	r3, #31
 8001756:	18fb      	adds	r3, r7, r3
 8001758:	781b      	ldrb	r3, [r3, #0]
}
 800175a:	0018      	movs	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	b008      	add	sp, #32
 8001760:	bd80      	pop	{r7, pc}
 8001762:	46c0      	nop			; (mov r8, r8)
 8001764:	20000000 	.word	0x20000000
 8001768:	00030d40 	.word	0x00030d40
 800176c:	fffffefd 	.word	0xfffffefd
 8001770:	1ffffc02 	.word	0x1ffffc02
 8001774:	40012708 	.word	0x40012708
 8001778:	ffc3ffff 	.word	0xffc3ffff
 800177c:	fffe0219 	.word	0xfffe0219
 8001780:	dffffc02 	.word	0xdffffc02
 8001784:	07ffff04 	.word	0x07ffff04
 8001788:	833fffe7 	.word	0x833fffe7

0800178c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800178c:	b5b0      	push	{r4, r5, r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	0018      	movs	r0, r3
 800179a:	f7ff fe07 	bl	80013ac <LL_ADC_REG_IsConversionOngoing>
 800179e:	1e03      	subs	r3, r0, #0
 80017a0:	d135      	bne.n	800180e <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2254      	movs	r2, #84	; 0x54
 80017a6:	5c9b      	ldrb	r3, [r3, r2]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d101      	bne.n	80017b0 <HAL_ADC_Start+0x24>
 80017ac:	2302      	movs	r3, #2
 80017ae:	e035      	b.n	800181c <HAL_ADC_Start+0x90>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2254      	movs	r2, #84	; 0x54
 80017b4:	2101      	movs	r1, #1
 80017b6:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80017b8:	250f      	movs	r5, #15
 80017ba:	197c      	adds	r4, r7, r5
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	0018      	movs	r0, r3
 80017c0:	f000 fbda 	bl	8001f78 <ADC_Enable>
 80017c4:	0003      	movs	r3, r0
 80017c6:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80017c8:	197b      	adds	r3, r7, r5
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d119      	bne.n	8001804 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d4:	4a13      	ldr	r2, [pc, #76]	; (8001824 <HAL_ADC_Start+0x98>)
 80017d6:	4013      	ands	r3, r2
 80017d8:	2280      	movs	r2, #128	; 0x80
 80017da:	0052      	lsls	r2, r2, #1
 80017dc:	431a      	orrs	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	221c      	movs	r2, #28
 80017ee:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2254      	movs	r2, #84	; 0x54
 80017f4:	2100      	movs	r1, #0
 80017f6:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	0018      	movs	r0, r3
 80017fe:	f7ff fdc3 	bl	8001388 <LL_ADC_REG_StartConversion>
 8001802:	e008      	b.n	8001816 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2254      	movs	r2, #84	; 0x54
 8001808:	2100      	movs	r1, #0
 800180a:	5499      	strb	r1, [r3, r2]
 800180c:	e003      	b.n	8001816 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800180e:	230f      	movs	r3, #15
 8001810:	18fb      	adds	r3, r7, r3
 8001812:	2202      	movs	r2, #2
 8001814:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001816:	230f      	movs	r3, #15
 8001818:	18fb      	adds	r3, r7, r3
 800181a:	781b      	ldrb	r3, [r3, #0]
}
 800181c:	0018      	movs	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	b004      	add	sp, #16
 8001822:	bdb0      	pop	{r4, r5, r7, pc}
 8001824:	fffff0fe 	.word	0xfffff0fe

08001828 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	2b08      	cmp	r3, #8
 8001838:	d102      	bne.n	8001840 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800183a:	2308      	movs	r3, #8
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	e00f      	b.n	8001860 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	2201      	movs	r2, #1
 8001848:	4013      	ands	r3, r2
 800184a:	d007      	beq.n	800185c <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001850:	2220      	movs	r2, #32
 8001852:	431a      	orrs	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e072      	b.n	8001942 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800185c:	2304      	movs	r3, #4
 800185e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001860:	f7ff fc6c 	bl	800113c <HAL_GetTick>
 8001864:	0003      	movs	r3, r0
 8001866:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001868:	e01f      	b.n	80018aa <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	3301      	adds	r3, #1
 800186e:	d01c      	beq.n	80018aa <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001870:	f7ff fc64 	bl	800113c <HAL_GetTick>
 8001874:	0002      	movs	r2, r0
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	429a      	cmp	r2, r3
 800187e:	d302      	bcc.n	8001886 <HAL_ADC_PollForConversion+0x5e>
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d111      	bne.n	80018aa <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	68fa      	ldr	r2, [r7, #12]
 800188e:	4013      	ands	r3, r2
 8001890:	d10b      	bne.n	80018aa <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001896:	2204      	movs	r2, #4
 8001898:	431a      	orrs	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2254      	movs	r2, #84	; 0x54
 80018a2:	2100      	movs	r1, #0
 80018a4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e04b      	b.n	8001942 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	68fa      	ldr	r2, [r7, #12]
 80018b2:	4013      	ands	r3, r2
 80018b4:	d0d9      	beq.n	800186a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ba:	2280      	movs	r2, #128	; 0x80
 80018bc:	0092      	lsls	r2, r2, #2
 80018be:	431a      	orrs	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	0018      	movs	r0, r3
 80018ca:	f7ff fc95 	bl	80011f8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80018ce:	1e03      	subs	r3, r0, #0
 80018d0:	d02e      	beq.n	8001930 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	7e9b      	ldrb	r3, [r3, #26]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d12a      	bne.n	8001930 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2208      	movs	r2, #8
 80018e2:	4013      	ands	r3, r2
 80018e4:	2b08      	cmp	r3, #8
 80018e6:	d123      	bne.n	8001930 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	0018      	movs	r0, r3
 80018ee:	f7ff fd5d 	bl	80013ac <LL_ADC_REG_IsConversionOngoing>
 80018f2:	1e03      	subs	r3, r0, #0
 80018f4:	d110      	bne.n	8001918 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	210c      	movs	r1, #12
 8001902:	438a      	bics	r2, r1
 8001904:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190a:	4a10      	ldr	r2, [pc, #64]	; (800194c <HAL_ADC_PollForConversion+0x124>)
 800190c:	4013      	ands	r3, r2
 800190e:	2201      	movs	r2, #1
 8001910:	431a      	orrs	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	659a      	str	r2, [r3, #88]	; 0x58
 8001916:	e00b      	b.n	8001930 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191c:	2220      	movs	r2, #32
 800191e:	431a      	orrs	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001928:	2201      	movs	r2, #1
 800192a:	431a      	orrs	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	7e1b      	ldrb	r3, [r3, #24]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d103      	bne.n	8001940 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	220c      	movs	r2, #12
 800193e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	0018      	movs	r0, r3
 8001944:	46bd      	mov	sp, r7
 8001946:	b004      	add	sp, #16
 8001948:	bd80      	pop	{r7, pc}
 800194a:	46c0      	nop			; (mov r8, r8)
 800194c:	fffffefe 	.word	0xfffffefe

08001950 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800195e:	0018      	movs	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	b002      	add	sp, #8
 8001964:	bd80      	pop	{r7, pc}
	...

08001968 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	2202      	movs	r2, #2
 8001988:	4013      	ands	r3, r2
 800198a:	d017      	beq.n	80019bc <HAL_ADC_IRQHandler+0x54>
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2202      	movs	r2, #2
 8001990:	4013      	ands	r3, r2
 8001992:	d013      	beq.n	80019bc <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001998:	2210      	movs	r2, #16
 800199a:	4013      	ands	r3, r2
 800199c:	d106      	bne.n	80019ac <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a2:	2280      	movs	r2, #128	; 0x80
 80019a4:	0112      	lsls	r2, r2, #4
 80019a6:	431a      	orrs	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	0018      	movs	r0, r3
 80019b0:	f000 fb78 	bl	80020a4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2202      	movs	r2, #2
 80019ba:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	2204      	movs	r2, #4
 80019c0:	4013      	ands	r3, r2
 80019c2:	d003      	beq.n	80019cc <HAL_ADC_IRQHandler+0x64>
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2204      	movs	r2, #4
 80019c8:	4013      	ands	r3, r2
 80019ca:	d107      	bne.n	80019dc <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	2208      	movs	r2, #8
 80019d0:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80019d2:	d04d      	beq.n	8001a70 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2208      	movs	r2, #8
 80019d8:	4013      	ands	r3, r2
 80019da:	d049      	beq.n	8001a70 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e0:	2210      	movs	r2, #16
 80019e2:	4013      	ands	r3, r2
 80019e4:	d106      	bne.n	80019f4 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ea:	2280      	movs	r2, #128	; 0x80
 80019ec:	0092      	lsls	r2, r2, #2
 80019ee:	431a      	orrs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	0018      	movs	r0, r3
 80019fa:	f7ff fbfd 	bl	80011f8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80019fe:	1e03      	subs	r3, r0, #0
 8001a00:	d02e      	beq.n	8001a60 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	7e9b      	ldrb	r3, [r3, #26]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d12a      	bne.n	8001a60 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2208      	movs	r2, #8
 8001a12:	4013      	ands	r3, r2
 8001a14:	2b08      	cmp	r3, #8
 8001a16:	d123      	bne.n	8001a60 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	f7ff fcc5 	bl	80013ac <LL_ADC_REG_IsConversionOngoing>
 8001a22:	1e03      	subs	r3, r0, #0
 8001a24:	d110      	bne.n	8001a48 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	685a      	ldr	r2, [r3, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	210c      	movs	r1, #12
 8001a32:	438a      	bics	r2, r1
 8001a34:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a3a:	4a56      	ldr	r2, [pc, #344]	; (8001b94 <HAL_ADC_IRQHandler+0x22c>)
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	2201      	movs	r2, #1
 8001a40:	431a      	orrs	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	659a      	str	r2, [r3, #88]	; 0x58
 8001a46:	e00b      	b.n	8001a60 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4c:	2220      	movs	r2, #32
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a58:	2201      	movs	r2, #1
 8001a5a:	431a      	orrs	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	0018      	movs	r0, r3
 8001a64:	f000 f898 	bl	8001b98 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	220c      	movs	r2, #12
 8001a6e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	2280      	movs	r2, #128	; 0x80
 8001a74:	4013      	ands	r3, r2
 8001a76:	d012      	beq.n	8001a9e <HAL_ADC_IRQHandler+0x136>
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2280      	movs	r2, #128	; 0x80
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d00e      	beq.n	8001a9e <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a84:	2280      	movs	r2, #128	; 0x80
 8001a86:	0252      	lsls	r2, r2, #9
 8001a88:	431a      	orrs	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	0018      	movs	r0, r3
 8001a92:	f000 f889 	bl	8001ba8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2280      	movs	r2, #128	; 0x80
 8001a9c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	2380      	movs	r3, #128	; 0x80
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	d014      	beq.n	8001ad2 <HAL_ADC_IRQHandler+0x16a>
 8001aa8:	68fa      	ldr	r2, [r7, #12]
 8001aaa:	2380      	movs	r3, #128	; 0x80
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	4013      	ands	r3, r2
 8001ab0:	d00f      	beq.n	8001ad2 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab6:	2280      	movs	r2, #128	; 0x80
 8001ab8:	0292      	lsls	r2, r2, #10
 8001aba:	431a      	orrs	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	f000 fade 	bl	8002084 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2280      	movs	r2, #128	; 0x80
 8001ace:	0052      	lsls	r2, r2, #1
 8001ad0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	2380      	movs	r3, #128	; 0x80
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4013      	ands	r3, r2
 8001ada:	d014      	beq.n	8001b06 <HAL_ADC_IRQHandler+0x19e>
 8001adc:	68fa      	ldr	r2, [r7, #12]
 8001ade:	2380      	movs	r3, #128	; 0x80
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d00f      	beq.n	8001b06 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aea:	2280      	movs	r2, #128	; 0x80
 8001aec:	02d2      	lsls	r2, r2, #11
 8001aee:	431a      	orrs	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	0018      	movs	r0, r3
 8001af8:	f000 facc 	bl	8002094 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2280      	movs	r2, #128	; 0x80
 8001b02:	0092      	lsls	r2, r2, #2
 8001b04:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	2210      	movs	r2, #16
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d02b      	beq.n	8001b66 <HAL_ADC_IRQHandler+0x1fe>
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2210      	movs	r2, #16
 8001b12:	4013      	ands	r3, r2
 8001b14:	d027      	beq.n	8001b66 <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d102      	bne.n	8001b24 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	617b      	str	r3, [r7, #20]
 8001b22:	e008      	b.n	8001b36 <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	0018      	movs	r0, r3
 8001b2a:	f7ff fbb9 	bl	80012a0 <LL_ADC_REG_GetDMATransfer>
 8001b2e:	1e03      	subs	r3, r0, #0
 8001b30:	d001      	beq.n	8001b36 <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8001b32:	2301      	movs	r3, #1
 8001b34:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d110      	bne.n	8001b5e <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b40:	2280      	movs	r2, #128	; 0x80
 8001b42:	00d2      	lsls	r2, r2, #3
 8001b44:	431a      	orrs	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b4e:	2202      	movs	r2, #2
 8001b50:	431a      	orrs	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	0018      	movs	r0, r3
 8001b5a:	f000 f82d 	bl	8001bb8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2210      	movs	r2, #16
 8001b64:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	2380      	movs	r3, #128	; 0x80
 8001b6a:	019b      	lsls	r3, r3, #6
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	d00d      	beq.n	8001b8c <HAL_ADC_IRQHandler+0x224>
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	2380      	movs	r3, #128	; 0x80
 8001b74:	019b      	lsls	r3, r3, #6
 8001b76:	4013      	ands	r3, r2
 8001b78:	d008      	beq.n	8001b8c <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	f000 fa99 	bl	80020b4 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2280      	movs	r2, #128	; 0x80
 8001b88:	0192      	lsls	r2, r2, #6
 8001b8a:	601a      	str	r2, [r3, #0]
  }
}
 8001b8c:	46c0      	nop			; (mov r8, r8)
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	b006      	add	sp, #24
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	fffffefe 	.word	0xfffffefe

08001b98 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001ba0:	46c0      	nop			; (mov r8, r8)
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	b002      	add	sp, #8
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001bb0:	46c0      	nop			; (mov r8, r8)
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	b002      	add	sp, #8
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001bc0:	46c0      	nop			; (mov r8, r8)
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	b002      	add	sp, #8
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bd2:	2317      	movs	r3, #23
 8001bd4:	18fb      	adds	r3, r7, r3
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2254      	movs	r2, #84	; 0x54
 8001be2:	5c9b      	ldrb	r3, [r3, r2]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d101      	bne.n	8001bec <HAL_ADC_ConfigChannel+0x24>
 8001be8:	2302      	movs	r3, #2
 8001bea:	e1c0      	b.n	8001f6e <HAL_ADC_ConfigChannel+0x3a6>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2254      	movs	r2, #84	; 0x54
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	f7ff fbd7 	bl	80013ac <LL_ADC_REG_IsConversionOngoing>
 8001bfe:	1e03      	subs	r3, r0, #0
 8001c00:	d000      	beq.n	8001c04 <HAL_ADC_ConfigChannel+0x3c>
 8001c02:	e1a3      	b.n	8001f4c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d100      	bne.n	8001c0e <HAL_ADC_ConfigChannel+0x46>
 8001c0c:	e143      	b.n	8001e96 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	691a      	ldr	r2, [r3, #16]
 8001c12:	2380      	movs	r3, #128	; 0x80
 8001c14:	061b      	lsls	r3, r3, #24
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d004      	beq.n	8001c24 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001c1e:	4ac1      	ldr	r2, [pc, #772]	; (8001f24 <HAL_ADC_ConfigChannel+0x35c>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d108      	bne.n	8001c36 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	0019      	movs	r1, r3
 8001c2e:	0010      	movs	r0, r2
 8001c30:	f7ff fb13 	bl	800125a <LL_ADC_REG_SetSequencerChAdd>
 8001c34:	e0c9      	b.n	8001dca <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	211f      	movs	r1, #31
 8001c40:	400b      	ands	r3, r1
 8001c42:	210f      	movs	r1, #15
 8001c44:	4099      	lsls	r1, r3
 8001c46:	000b      	movs	r3, r1
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	0019      	movs	r1, r3
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	035b      	lsls	r3, r3, #13
 8001c54:	0b5b      	lsrs	r3, r3, #13
 8001c56:	d105      	bne.n	8001c64 <HAL_ADC_ConfigChannel+0x9c>
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	0e9b      	lsrs	r3, r3, #26
 8001c5e:	221f      	movs	r2, #31
 8001c60:	4013      	ands	r3, r2
 8001c62:	e098      	b.n	8001d96 <HAL_ADC_ConfigChannel+0x1ce>
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	d000      	beq.n	8001c70 <HAL_ADC_ConfigChannel+0xa8>
 8001c6e:	e091      	b.n	8001d94 <HAL_ADC_ConfigChannel+0x1cc>
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2202      	movs	r2, #2
 8001c76:	4013      	ands	r3, r2
 8001c78:	d000      	beq.n	8001c7c <HAL_ADC_ConfigChannel+0xb4>
 8001c7a:	e089      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x1c8>
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2204      	movs	r2, #4
 8001c82:	4013      	ands	r3, r2
 8001c84:	d000      	beq.n	8001c88 <HAL_ADC_ConfigChannel+0xc0>
 8001c86:	e081      	b.n	8001d8c <HAL_ADC_ConfigChannel+0x1c4>
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2208      	movs	r2, #8
 8001c8e:	4013      	ands	r3, r2
 8001c90:	d000      	beq.n	8001c94 <HAL_ADC_ConfigChannel+0xcc>
 8001c92:	e079      	b.n	8001d88 <HAL_ADC_ConfigChannel+0x1c0>
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2210      	movs	r2, #16
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	d000      	beq.n	8001ca0 <HAL_ADC_ConfigChannel+0xd8>
 8001c9e:	e071      	b.n	8001d84 <HAL_ADC_ConfigChannel+0x1bc>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2220      	movs	r2, #32
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	d000      	beq.n	8001cac <HAL_ADC_ConfigChannel+0xe4>
 8001caa:	e069      	b.n	8001d80 <HAL_ADC_ConfigChannel+0x1b8>
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2240      	movs	r2, #64	; 0x40
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	d000      	beq.n	8001cb8 <HAL_ADC_ConfigChannel+0xf0>
 8001cb6:	e061      	b.n	8001d7c <HAL_ADC_ConfigChannel+0x1b4>
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2280      	movs	r2, #128	; 0x80
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	d000      	beq.n	8001cc4 <HAL_ADC_ConfigChannel+0xfc>
 8001cc2:	e059      	b.n	8001d78 <HAL_ADC_ConfigChannel+0x1b0>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	2380      	movs	r3, #128	; 0x80
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d151      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x1ac>
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	2380      	movs	r3, #128	; 0x80
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	4013      	ands	r3, r2
 8001cda:	d149      	bne.n	8001d70 <HAL_ADC_ConfigChannel+0x1a8>
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	2380      	movs	r3, #128	; 0x80
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d141      	bne.n	8001d6c <HAL_ADC_ConfigChannel+0x1a4>
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	2380      	movs	r3, #128	; 0x80
 8001cee:	011b      	lsls	r3, r3, #4
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	d139      	bne.n	8001d68 <HAL_ADC_ConfigChannel+0x1a0>
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	2380      	movs	r3, #128	; 0x80
 8001cfa:	015b      	lsls	r3, r3, #5
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	d131      	bne.n	8001d64 <HAL_ADC_ConfigChannel+0x19c>
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	2380      	movs	r3, #128	; 0x80
 8001d06:	019b      	lsls	r3, r3, #6
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d129      	bne.n	8001d60 <HAL_ADC_ConfigChannel+0x198>
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	2380      	movs	r3, #128	; 0x80
 8001d12:	01db      	lsls	r3, r3, #7
 8001d14:	4013      	ands	r3, r2
 8001d16:	d121      	bne.n	8001d5c <HAL_ADC_ConfigChannel+0x194>
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	2380      	movs	r3, #128	; 0x80
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	4013      	ands	r3, r2
 8001d22:	d119      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x190>
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	2380      	movs	r3, #128	; 0x80
 8001d2a:	025b      	lsls	r3, r3, #9
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	d111      	bne.n	8001d54 <HAL_ADC_ConfigChannel+0x18c>
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	2380      	movs	r3, #128	; 0x80
 8001d36:	029b      	lsls	r3, r3, #10
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d109      	bne.n	8001d50 <HAL_ADC_ConfigChannel+0x188>
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	2380      	movs	r3, #128	; 0x80
 8001d42:	02db      	lsls	r3, r3, #11
 8001d44:	4013      	ands	r3, r2
 8001d46:	d001      	beq.n	8001d4c <HAL_ADC_ConfigChannel+0x184>
 8001d48:	2312      	movs	r3, #18
 8001d4a:	e024      	b.n	8001d96 <HAL_ADC_ConfigChannel+0x1ce>
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	e022      	b.n	8001d96 <HAL_ADC_ConfigChannel+0x1ce>
 8001d50:	2311      	movs	r3, #17
 8001d52:	e020      	b.n	8001d96 <HAL_ADC_ConfigChannel+0x1ce>
 8001d54:	2310      	movs	r3, #16
 8001d56:	e01e      	b.n	8001d96 <HAL_ADC_ConfigChannel+0x1ce>
 8001d58:	230f      	movs	r3, #15
 8001d5a:	e01c      	b.n	8001d96 <HAL_ADC_ConfigChannel+0x1ce>
 8001d5c:	230e      	movs	r3, #14
 8001d5e:	e01a      	b.n	8001d96 <HAL_ADC_ConfigChannel+0x1ce>
 8001d60:	230d      	movs	r3, #13
 8001d62:	e018      	b.n	8001d96 <HAL_ADC_ConfigChannel+0x1ce>
 8001d64:	230c      	movs	r3, #12
 8001d66:	e016      	b.n	8001d96 <HAL_ADC_ConfigChannel+0x1ce>
 8001d68:	230b      	movs	r3, #11
 8001d6a:	e014      	b.n	8001d96 <HAL_ADC_ConfigChannel+0x1ce>
 8001d6c:	230a      	movs	r3, #10
 8001d6e:	e012      	b.n	8001d96 <HAL_ADC_ConfigChannel+0x1ce>
 8001d70:	2309      	movs	r3, #9
 8001d72:	e010      	b.n	8001d96 <HAL_ADC_ConfigChannel+0x1ce>
 8001d74:	2308      	movs	r3, #8
 8001d76:	e00e      	b.n	8001d96 <HAL_ADC_ConfigChannel+0x1ce>
 8001d78:	2307      	movs	r3, #7
 8001d7a:	e00c      	b.n	8001d96 <HAL_ADC_ConfigChannel+0x1ce>
 8001d7c:	2306      	movs	r3, #6
 8001d7e:	e00a      	b.n	8001d96 <HAL_ADC_ConfigChannel+0x1ce>
 8001d80:	2305      	movs	r3, #5
 8001d82:	e008      	b.n	8001d96 <HAL_ADC_ConfigChannel+0x1ce>
 8001d84:	2304      	movs	r3, #4
 8001d86:	e006      	b.n	8001d96 <HAL_ADC_ConfigChannel+0x1ce>
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e004      	b.n	8001d96 <HAL_ADC_ConfigChannel+0x1ce>
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	e002      	b.n	8001d96 <HAL_ADC_ConfigChannel+0x1ce>
 8001d90:	2301      	movs	r3, #1
 8001d92:	e000      	b.n	8001d96 <HAL_ADC_ConfigChannel+0x1ce>
 8001d94:	2300      	movs	r3, #0
 8001d96:	683a      	ldr	r2, [r7, #0]
 8001d98:	6852      	ldr	r2, [r2, #4]
 8001d9a:	201f      	movs	r0, #31
 8001d9c:	4002      	ands	r2, r0
 8001d9e:	4093      	lsls	r3, r2
 8001da0:	000a      	movs	r2, r1
 8001da2:	431a      	orrs	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	089b      	lsrs	r3, r3, #2
 8001dae:	1c5a      	adds	r2, r3, #1
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	69db      	ldr	r3, [r3, #28]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d808      	bhi.n	8001dca <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6818      	ldr	r0, [r3, #0]
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	6859      	ldr	r1, [r3, #4]
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	001a      	movs	r2, r3
 8001dc6:	f7ff fa28 	bl	800121a <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6818      	ldr	r0, [r3, #0]
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	6819      	ldr	r1, [r3, #0]
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	001a      	movs	r2, r3
 8001dd8:	f7ff fa6e 	bl	80012b8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	db00      	blt.n	8001de6 <HAL_ADC_ConfigChannel+0x21e>
 8001de4:	e0bc      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001de6:	4b50      	ldr	r3, [pc, #320]	; (8001f28 <HAL_ADC_ConfigChannel+0x360>)
 8001de8:	0018      	movs	r0, r3
 8001dea:	f7ff f9db 	bl	80011a4 <LL_ADC_GetCommonPathInternalCh>
 8001dee:	0003      	movs	r3, r0
 8001df0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a4d      	ldr	r2, [pc, #308]	; (8001f2c <HAL_ADC_ConfigChannel+0x364>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d122      	bne.n	8001e42 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	2380      	movs	r3, #128	; 0x80
 8001e00:	041b      	lsls	r3, r3, #16
 8001e02:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e04:	d11d      	bne.n	8001e42 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	2280      	movs	r2, #128	; 0x80
 8001e0a:	0412      	lsls	r2, r2, #16
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	4a46      	ldr	r2, [pc, #280]	; (8001f28 <HAL_ADC_ConfigChannel+0x360>)
 8001e10:	0019      	movs	r1, r3
 8001e12:	0010      	movs	r0, r2
 8001e14:	f7ff f9b2 	bl	800117c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e18:	4b45      	ldr	r3, [pc, #276]	; (8001f30 <HAL_ADC_ConfigChannel+0x368>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4945      	ldr	r1, [pc, #276]	; (8001f34 <HAL_ADC_ConfigChannel+0x36c>)
 8001e1e:	0018      	movs	r0, r3
 8001e20:	f7fe f970 	bl	8000104 <__udivsi3>
 8001e24:	0003      	movs	r3, r0
 8001e26:	1c5a      	adds	r2, r3, #1
 8001e28:	0013      	movs	r3, r2
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	189b      	adds	r3, r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e32:	e002      	b.n	8001e3a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1f9      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e40:	e08e      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a3c      	ldr	r2, [pc, #240]	; (8001f38 <HAL_ADC_ConfigChannel+0x370>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d10e      	bne.n	8001e6a <HAL_ADC_ConfigChannel+0x2a2>
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	2380      	movs	r3, #128	; 0x80
 8001e50:	045b      	lsls	r3, r3, #17
 8001e52:	4013      	ands	r3, r2
 8001e54:	d109      	bne.n	8001e6a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	2280      	movs	r2, #128	; 0x80
 8001e5a:	0452      	lsls	r2, r2, #17
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	4a32      	ldr	r2, [pc, #200]	; (8001f28 <HAL_ADC_ConfigChannel+0x360>)
 8001e60:	0019      	movs	r1, r3
 8001e62:	0010      	movs	r0, r2
 8001e64:	f7ff f98a 	bl	800117c <LL_ADC_SetCommonPathInternalCh>
 8001e68:	e07a      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a33      	ldr	r2, [pc, #204]	; (8001f3c <HAL_ADC_ConfigChannel+0x374>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d000      	beq.n	8001e76 <HAL_ADC_ConfigChannel+0x2ae>
 8001e74:	e074      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	2380      	movs	r3, #128	; 0x80
 8001e7a:	03db      	lsls	r3, r3, #15
 8001e7c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001e7e:	d000      	beq.n	8001e82 <HAL_ADC_ConfigChannel+0x2ba>
 8001e80:	e06e      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	2280      	movs	r2, #128	; 0x80
 8001e86:	03d2      	lsls	r2, r2, #15
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	4a27      	ldr	r2, [pc, #156]	; (8001f28 <HAL_ADC_ConfigChannel+0x360>)
 8001e8c:	0019      	movs	r1, r3
 8001e8e:	0010      	movs	r0, r2
 8001e90:	f7ff f974 	bl	800117c <LL_ADC_SetCommonPathInternalCh>
 8001e94:	e064      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	691a      	ldr	r2, [r3, #16]
 8001e9a:	2380      	movs	r3, #128	; 0x80
 8001e9c:	061b      	lsls	r3, r3, #24
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d004      	beq.n	8001eac <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001ea6:	4a1f      	ldr	r2, [pc, #124]	; (8001f24 <HAL_ADC_ConfigChannel+0x35c>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d107      	bne.n	8001ebc <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	0019      	movs	r1, r3
 8001eb6:	0010      	movs	r0, r2
 8001eb8:	f7ff f9e0 	bl	800127c <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	da4d      	bge.n	8001f60 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ec4:	4b18      	ldr	r3, [pc, #96]	; (8001f28 <HAL_ADC_ConfigChannel+0x360>)
 8001ec6:	0018      	movs	r0, r3
 8001ec8:	f7ff f96c 	bl	80011a4 <LL_ADC_GetCommonPathInternalCh>
 8001ecc:	0003      	movs	r3, r0
 8001ece:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a15      	ldr	r2, [pc, #84]	; (8001f2c <HAL_ADC_ConfigChannel+0x364>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d108      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	4a18      	ldr	r2, [pc, #96]	; (8001f40 <HAL_ADC_ConfigChannel+0x378>)
 8001ede:	4013      	ands	r3, r2
 8001ee0:	4a11      	ldr	r2, [pc, #68]	; (8001f28 <HAL_ADC_ConfigChannel+0x360>)
 8001ee2:	0019      	movs	r1, r3
 8001ee4:	0010      	movs	r0, r2
 8001ee6:	f7ff f949 	bl	800117c <LL_ADC_SetCommonPathInternalCh>
 8001eea:	e039      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a11      	ldr	r2, [pc, #68]	; (8001f38 <HAL_ADC_ConfigChannel+0x370>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d108      	bne.n	8001f08 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	4a12      	ldr	r2, [pc, #72]	; (8001f44 <HAL_ADC_ConfigChannel+0x37c>)
 8001efa:	4013      	ands	r3, r2
 8001efc:	4a0a      	ldr	r2, [pc, #40]	; (8001f28 <HAL_ADC_ConfigChannel+0x360>)
 8001efe:	0019      	movs	r1, r3
 8001f00:	0010      	movs	r0, r2
 8001f02:	f7ff f93b 	bl	800117c <LL_ADC_SetCommonPathInternalCh>
 8001f06:	e02b      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a0b      	ldr	r2, [pc, #44]	; (8001f3c <HAL_ADC_ConfigChannel+0x374>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d126      	bne.n	8001f60 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	4a0c      	ldr	r2, [pc, #48]	; (8001f48 <HAL_ADC_ConfigChannel+0x380>)
 8001f16:	4013      	ands	r3, r2
 8001f18:	4a03      	ldr	r2, [pc, #12]	; (8001f28 <HAL_ADC_ConfigChannel+0x360>)
 8001f1a:	0019      	movs	r1, r3
 8001f1c:	0010      	movs	r0, r2
 8001f1e:	f7ff f92d 	bl	800117c <LL_ADC_SetCommonPathInternalCh>
 8001f22:	e01d      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x398>
 8001f24:	80000004 	.word	0x80000004
 8001f28:	40012708 	.word	0x40012708
 8001f2c:	b0001000 	.word	0xb0001000
 8001f30:	20000000 	.word	0x20000000
 8001f34:	00030d40 	.word	0x00030d40
 8001f38:	b8004000 	.word	0xb8004000
 8001f3c:	b4002000 	.word	0xb4002000
 8001f40:	ff7fffff 	.word	0xff7fffff
 8001f44:	feffffff 	.word	0xfeffffff
 8001f48:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f50:	2220      	movs	r2, #32
 8001f52:	431a      	orrs	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001f58:	2317      	movs	r3, #23
 8001f5a:	18fb      	adds	r3, r7, r3
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2254      	movs	r2, #84	; 0x54
 8001f64:	2100      	movs	r1, #0
 8001f66:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001f68:	2317      	movs	r3, #23
 8001f6a:	18fb      	adds	r3, r7, r3
 8001f6c:	781b      	ldrb	r3, [r3, #0]
}
 8001f6e:	0018      	movs	r0, r3
 8001f70:	46bd      	mov	sp, r7
 8001f72:	b006      	add	sp, #24
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	46c0      	nop			; (mov r8, r8)

08001f78 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	0018      	movs	r0, r3
 8001f8a:	f7ff f9eb 	bl	8001364 <LL_ADC_IsEnabled>
 8001f8e:	1e03      	subs	r3, r0, #0
 8001f90:	d000      	beq.n	8001f94 <ADC_Enable+0x1c>
 8001f92:	e069      	b.n	8002068 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	4a36      	ldr	r2, [pc, #216]	; (8002074 <ADC_Enable+0xfc>)
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	d00d      	beq.n	8001fbc <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa4:	2210      	movs	r2, #16
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e056      	b.n	800206a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	f7ff f9bd 	bl	8001340 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001fc6:	4b2c      	ldr	r3, [pc, #176]	; (8002078 <ADC_Enable+0x100>)
 8001fc8:	0018      	movs	r0, r3
 8001fca:	f7ff f8eb 	bl	80011a4 <LL_ADC_GetCommonPathInternalCh>
 8001fce:	0002      	movs	r2, r0
 8001fd0:	2380      	movs	r3, #128	; 0x80
 8001fd2:	041b      	lsls	r3, r3, #16
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	d00f      	beq.n	8001ff8 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fd8:	4b28      	ldr	r3, [pc, #160]	; (800207c <ADC_Enable+0x104>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4928      	ldr	r1, [pc, #160]	; (8002080 <ADC_Enable+0x108>)
 8001fde:	0018      	movs	r0, r3
 8001fe0:	f7fe f890 	bl	8000104 <__udivsi3>
 8001fe4:	0003      	movs	r3, r0
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001fea:	e002      	b.n	8001ff2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1f9      	bne.n	8001fec <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	7e5b      	ldrb	r3, [r3, #25]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d033      	beq.n	8002068 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002000:	f7ff f89c 	bl	800113c <HAL_GetTick>
 8002004:	0003      	movs	r3, r0
 8002006:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002008:	e027      	b.n	800205a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	0018      	movs	r0, r3
 8002010:	f7ff f9a8 	bl	8001364 <LL_ADC_IsEnabled>
 8002014:	1e03      	subs	r3, r0, #0
 8002016:	d104      	bne.n	8002022 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	0018      	movs	r0, r3
 800201e:	f7ff f98f 	bl	8001340 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002022:	f7ff f88b 	bl	800113c <HAL_GetTick>
 8002026:	0002      	movs	r2, r0
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d914      	bls.n	800205a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2201      	movs	r2, #1
 8002038:	4013      	ands	r3, r2
 800203a:	2b01      	cmp	r3, #1
 800203c:	d00d      	beq.n	800205a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002042:	2210      	movs	r2, #16
 8002044:	431a      	orrs	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800204e:	2201      	movs	r2, #1
 8002050:	431a      	orrs	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e007      	b.n	800206a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2201      	movs	r2, #1
 8002062:	4013      	ands	r3, r2
 8002064:	2b01      	cmp	r3, #1
 8002066:	d1d0      	bne.n	800200a <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	0018      	movs	r0, r3
 800206c:	46bd      	mov	sp, r7
 800206e:	b004      	add	sp, #16
 8002070:	bd80      	pop	{r7, pc}
 8002072:	46c0      	nop			; (mov r8, r8)
 8002074:	80000017 	.word	0x80000017
 8002078:	40012708 	.word	0x40012708
 800207c:	20000000 	.word	0x20000000
 8002080:	00030d40 	.word	0x00030d40

08002084 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800208c:	46c0      	nop			; (mov r8, r8)
 800208e:	46bd      	mov	sp, r7
 8002090:	b002      	add	sp, #8
 8002092:	bd80      	pop	{r7, pc}

08002094 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800209c:	46c0      	nop			; (mov r8, r8)
 800209e:	46bd      	mov	sp, r7
 80020a0:	b002      	add	sp, #8
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80020ac:	46c0      	nop			; (mov r8, r8)
 80020ae:	46bd      	mov	sp, r7
 80020b0:	b002      	add	sp, #8
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 80020bc:	46c0      	nop			; (mov r8, r8)
 80020be:	46bd      	mov	sp, r7
 80020c0:	b002      	add	sp, #8
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	0002      	movs	r2, r0
 80020cc:	1dfb      	adds	r3, r7, #7
 80020ce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80020d0:	1dfb      	adds	r3, r7, #7
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b7f      	cmp	r3, #127	; 0x7f
 80020d6:	d809      	bhi.n	80020ec <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020d8:	1dfb      	adds	r3, r7, #7
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	001a      	movs	r2, r3
 80020de:	231f      	movs	r3, #31
 80020e0:	401a      	ands	r2, r3
 80020e2:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <__NVIC_EnableIRQ+0x30>)
 80020e4:	2101      	movs	r1, #1
 80020e6:	4091      	lsls	r1, r2
 80020e8:	000a      	movs	r2, r1
 80020ea:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80020ec:	46c0      	nop			; (mov r8, r8)
 80020ee:	46bd      	mov	sp, r7
 80020f0:	b002      	add	sp, #8
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	e000e100 	.word	0xe000e100

080020f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020f8:	b590      	push	{r4, r7, lr}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	0002      	movs	r2, r0
 8002100:	6039      	str	r1, [r7, #0]
 8002102:	1dfb      	adds	r3, r7, #7
 8002104:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002106:	1dfb      	adds	r3, r7, #7
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	2b7f      	cmp	r3, #127	; 0x7f
 800210c:	d828      	bhi.n	8002160 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800210e:	4a2f      	ldr	r2, [pc, #188]	; (80021cc <__NVIC_SetPriority+0xd4>)
 8002110:	1dfb      	adds	r3, r7, #7
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	b25b      	sxtb	r3, r3
 8002116:	089b      	lsrs	r3, r3, #2
 8002118:	33c0      	adds	r3, #192	; 0xc0
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	589b      	ldr	r3, [r3, r2]
 800211e:	1dfa      	adds	r2, r7, #7
 8002120:	7812      	ldrb	r2, [r2, #0]
 8002122:	0011      	movs	r1, r2
 8002124:	2203      	movs	r2, #3
 8002126:	400a      	ands	r2, r1
 8002128:	00d2      	lsls	r2, r2, #3
 800212a:	21ff      	movs	r1, #255	; 0xff
 800212c:	4091      	lsls	r1, r2
 800212e:	000a      	movs	r2, r1
 8002130:	43d2      	mvns	r2, r2
 8002132:	401a      	ands	r2, r3
 8002134:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	019b      	lsls	r3, r3, #6
 800213a:	22ff      	movs	r2, #255	; 0xff
 800213c:	401a      	ands	r2, r3
 800213e:	1dfb      	adds	r3, r7, #7
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	0018      	movs	r0, r3
 8002144:	2303      	movs	r3, #3
 8002146:	4003      	ands	r3, r0
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800214c:	481f      	ldr	r0, [pc, #124]	; (80021cc <__NVIC_SetPriority+0xd4>)
 800214e:	1dfb      	adds	r3, r7, #7
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	b25b      	sxtb	r3, r3
 8002154:	089b      	lsrs	r3, r3, #2
 8002156:	430a      	orrs	r2, r1
 8002158:	33c0      	adds	r3, #192	; 0xc0
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800215e:	e031      	b.n	80021c4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002160:	4a1b      	ldr	r2, [pc, #108]	; (80021d0 <__NVIC_SetPriority+0xd8>)
 8002162:	1dfb      	adds	r3, r7, #7
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	0019      	movs	r1, r3
 8002168:	230f      	movs	r3, #15
 800216a:	400b      	ands	r3, r1
 800216c:	3b08      	subs	r3, #8
 800216e:	089b      	lsrs	r3, r3, #2
 8002170:	3306      	adds	r3, #6
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	18d3      	adds	r3, r2, r3
 8002176:	3304      	adds	r3, #4
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	1dfa      	adds	r2, r7, #7
 800217c:	7812      	ldrb	r2, [r2, #0]
 800217e:	0011      	movs	r1, r2
 8002180:	2203      	movs	r2, #3
 8002182:	400a      	ands	r2, r1
 8002184:	00d2      	lsls	r2, r2, #3
 8002186:	21ff      	movs	r1, #255	; 0xff
 8002188:	4091      	lsls	r1, r2
 800218a:	000a      	movs	r2, r1
 800218c:	43d2      	mvns	r2, r2
 800218e:	401a      	ands	r2, r3
 8002190:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	019b      	lsls	r3, r3, #6
 8002196:	22ff      	movs	r2, #255	; 0xff
 8002198:	401a      	ands	r2, r3
 800219a:	1dfb      	adds	r3, r7, #7
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	0018      	movs	r0, r3
 80021a0:	2303      	movs	r3, #3
 80021a2:	4003      	ands	r3, r0
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021a8:	4809      	ldr	r0, [pc, #36]	; (80021d0 <__NVIC_SetPriority+0xd8>)
 80021aa:	1dfb      	adds	r3, r7, #7
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	001c      	movs	r4, r3
 80021b0:	230f      	movs	r3, #15
 80021b2:	4023      	ands	r3, r4
 80021b4:	3b08      	subs	r3, #8
 80021b6:	089b      	lsrs	r3, r3, #2
 80021b8:	430a      	orrs	r2, r1
 80021ba:	3306      	adds	r3, #6
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	18c3      	adds	r3, r0, r3
 80021c0:	3304      	adds	r3, #4
 80021c2:	601a      	str	r2, [r3, #0]
}
 80021c4:	46c0      	nop			; (mov r8, r8)
 80021c6:	46bd      	mov	sp, r7
 80021c8:	b003      	add	sp, #12
 80021ca:	bd90      	pop	{r4, r7, pc}
 80021cc:	e000e100 	.word	0xe000e100
 80021d0:	e000ed00 	.word	0xe000ed00

080021d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	1e5a      	subs	r2, r3, #1
 80021e0:	2380      	movs	r3, #128	; 0x80
 80021e2:	045b      	lsls	r3, r3, #17
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d301      	bcc.n	80021ec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021e8:	2301      	movs	r3, #1
 80021ea:	e010      	b.n	800220e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ec:	4b0a      	ldr	r3, [pc, #40]	; (8002218 <SysTick_Config+0x44>)
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	3a01      	subs	r2, #1
 80021f2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021f4:	2301      	movs	r3, #1
 80021f6:	425b      	negs	r3, r3
 80021f8:	2103      	movs	r1, #3
 80021fa:	0018      	movs	r0, r3
 80021fc:	f7ff ff7c 	bl	80020f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002200:	4b05      	ldr	r3, [pc, #20]	; (8002218 <SysTick_Config+0x44>)
 8002202:	2200      	movs	r2, #0
 8002204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002206:	4b04      	ldr	r3, [pc, #16]	; (8002218 <SysTick_Config+0x44>)
 8002208:	2207      	movs	r2, #7
 800220a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800220c:	2300      	movs	r3, #0
}
 800220e:	0018      	movs	r0, r3
 8002210:	46bd      	mov	sp, r7
 8002212:	b002      	add	sp, #8
 8002214:	bd80      	pop	{r7, pc}
 8002216:	46c0      	nop			; (mov r8, r8)
 8002218:	e000e010 	.word	0xe000e010

0800221c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	60b9      	str	r1, [r7, #8]
 8002224:	607a      	str	r2, [r7, #4]
 8002226:	210f      	movs	r1, #15
 8002228:	187b      	adds	r3, r7, r1
 800222a:	1c02      	adds	r2, r0, #0
 800222c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	187b      	adds	r3, r7, r1
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	b25b      	sxtb	r3, r3
 8002236:	0011      	movs	r1, r2
 8002238:	0018      	movs	r0, r3
 800223a:	f7ff ff5d 	bl	80020f8 <__NVIC_SetPriority>
}
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	46bd      	mov	sp, r7
 8002242:	b004      	add	sp, #16
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b082      	sub	sp, #8
 800224a:	af00      	add	r7, sp, #0
 800224c:	0002      	movs	r2, r0
 800224e:	1dfb      	adds	r3, r7, #7
 8002250:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002252:	1dfb      	adds	r3, r7, #7
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	b25b      	sxtb	r3, r3
 8002258:	0018      	movs	r0, r3
 800225a:	f7ff ff33 	bl	80020c4 <__NVIC_EnableIRQ>
}
 800225e:	46c0      	nop			; (mov r8, r8)
 8002260:	46bd      	mov	sp, r7
 8002262:	b002      	add	sp, #8
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b082      	sub	sp, #8
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	0018      	movs	r0, r3
 8002272:	f7ff ffaf 	bl	80021d4 <SysTick_Config>
 8002276:	0003      	movs	r3, r0
}
 8002278:	0018      	movs	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	b002      	add	sp, #8
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e091      	b.n	80023b6 <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	001a      	movs	r2, r3
 8002298:	4b49      	ldr	r3, [pc, #292]	; (80023c0 <HAL_DMA_Init+0x140>)
 800229a:	429a      	cmp	r2, r3
 800229c:	d810      	bhi.n	80022c0 <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a48      	ldr	r2, [pc, #288]	; (80023c4 <HAL_DMA_Init+0x144>)
 80022a4:	4694      	mov	ip, r2
 80022a6:	4463      	add	r3, ip
 80022a8:	2114      	movs	r1, #20
 80022aa:	0018      	movs	r0, r3
 80022ac:	f7fd ff2a 	bl	8000104 <__udivsi3>
 80022b0:	0003      	movs	r3, r0
 80022b2:	009a      	lsls	r2, r3, #2
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a43      	ldr	r2, [pc, #268]	; (80023c8 <HAL_DMA_Init+0x148>)
 80022bc:	641a      	str	r2, [r3, #64]	; 0x40
 80022be:	e00f      	b.n	80022e0 <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a41      	ldr	r2, [pc, #260]	; (80023cc <HAL_DMA_Init+0x14c>)
 80022c6:	4694      	mov	ip, r2
 80022c8:	4463      	add	r3, ip
 80022ca:	2114      	movs	r1, #20
 80022cc:	0018      	movs	r0, r3
 80022ce:	f7fd ff19 	bl	8000104 <__udivsi3>
 80022d2:	0003      	movs	r3, r0
 80022d4:	009a      	lsls	r2, r3, #2
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a3c      	ldr	r2, [pc, #240]	; (80023d0 <HAL_DMA_Init+0x150>)
 80022de:	641a      	str	r2, [r3, #64]	; 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2225      	movs	r2, #37	; 0x25
 80022e4:	2102      	movs	r1, #2
 80022e6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4938      	ldr	r1, [pc, #224]	; (80023d4 <HAL_DMA_Init+0x154>)
 80022f4:	400a      	ands	r2, r1
 80022f6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6819      	ldr	r1, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689a      	ldr	r2, [r3, #8]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	431a      	orrs	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	431a      	orrs	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	431a      	orrs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	431a      	orrs	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	431a      	orrs	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	431a      	orrs	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	430a      	orrs	r2, r1
 800232c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	0018      	movs	r0, r3
 8002332:	f000 f915 	bl	8002560 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689a      	ldr	r2, [r3, #8]
 800233a:	2380      	movs	r3, #128	; 0x80
 800233c:	01db      	lsls	r3, r3, #7
 800233e:	429a      	cmp	r2, r3
 8002340:	d102      	bne.n	8002348 <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002350:	217f      	movs	r1, #127	; 0x7f
 8002352:	400a      	ands	r2, r1
 8002354:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800235e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d011      	beq.n	800238c <HAL_DMA_Init+0x10c>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	2b04      	cmp	r3, #4
 800236e:	d80d      	bhi.n	800238c <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	0018      	movs	r0, r3
 8002374:	f000 f93e 	bl	80025f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	e008      	b.n	800239e <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2225      	movs	r2, #37	; 0x25
 80023a8:	2101      	movs	r1, #1
 80023aa:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2224      	movs	r2, #36	; 0x24
 80023b0:	2100      	movs	r1, #0
 80023b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	0018      	movs	r0, r3
 80023b8:	46bd      	mov	sp, r7
 80023ba:	b002      	add	sp, #8
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	46c0      	nop			; (mov r8, r8)
 80023c0:	40020407 	.word	0x40020407
 80023c4:	bffdfff8 	.word	0xbffdfff8
 80023c8:	40020000 	.word	0x40020000
 80023cc:	bffdfbf8 	.word	0xbffdfbf8
 80023d0:	40020400 	.word	0x40020400
 80023d4:	ffff800f 	.word	0xffff800f

080023d8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f4:	221c      	movs	r2, #28
 80023f6:	4013      	ands	r3, r2
 80023f8:	2204      	movs	r2, #4
 80023fa:	409a      	lsls	r2, r3
 80023fc:	0013      	movs	r3, r2
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	4013      	ands	r3, r2
 8002402:	d026      	beq.n	8002452 <HAL_DMA_IRQHandler+0x7a>
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	2204      	movs	r2, #4
 8002408:	4013      	ands	r3, r2
 800240a:	d022      	beq.n	8002452 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2220      	movs	r2, #32
 8002414:	4013      	ands	r3, r2
 8002416:	d107      	bne.n	8002428 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2104      	movs	r1, #4
 8002424:	438a      	bics	r2, r1
 8002426:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242c:	221c      	movs	r2, #28
 800242e:	401a      	ands	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002434:	2104      	movs	r1, #4
 8002436:	4091      	lsls	r1, r2
 8002438:	000a      	movs	r2, r1
 800243a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002440:	2b00      	cmp	r3, #0
 8002442:	d100      	bne.n	8002446 <HAL_DMA_IRQHandler+0x6e>
 8002444:	e080      	b.n	8002548 <HAL_DMA_IRQHandler+0x170>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	0010      	movs	r0, r2
 800244e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002450:	e07a      	b.n	8002548 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002456:	221c      	movs	r2, #28
 8002458:	4013      	ands	r3, r2
 800245a:	2202      	movs	r2, #2
 800245c:	409a      	lsls	r2, r3
 800245e:	0013      	movs	r3, r2
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	4013      	ands	r3, r2
 8002464:	d03c      	beq.n	80024e0 <HAL_DMA_IRQHandler+0x108>
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	2202      	movs	r2, #2
 800246a:	4013      	ands	r3, r2
 800246c:	d038      	beq.n	80024e0 <HAL_DMA_IRQHandler+0x108>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2220      	movs	r2, #32
 8002476:	4013      	ands	r3, r2
 8002478:	d10b      	bne.n	8002492 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	210a      	movs	r1, #10
 8002486:	438a      	bics	r2, r1
 8002488:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2225      	movs	r2, #37	; 0x25
 800248e:	2101      	movs	r1, #1
 8002490:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	001a      	movs	r2, r3
 8002498:	4b2e      	ldr	r3, [pc, #184]	; (8002554 <HAL_DMA_IRQHandler+0x17c>)
 800249a:	429a      	cmp	r2, r3
 800249c:	d909      	bls.n	80024b2 <HAL_DMA_IRQHandler+0xda>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a2:	221c      	movs	r2, #28
 80024a4:	401a      	ands	r2, r3
 80024a6:	4b2c      	ldr	r3, [pc, #176]	; (8002558 <HAL_DMA_IRQHandler+0x180>)
 80024a8:	2102      	movs	r1, #2
 80024aa:	4091      	lsls	r1, r2
 80024ac:	000a      	movs	r2, r1
 80024ae:	605a      	str	r2, [r3, #4]
 80024b0:	e008      	b.n	80024c4 <HAL_DMA_IRQHandler+0xec>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b6:	221c      	movs	r2, #28
 80024b8:	401a      	ands	r2, r3
 80024ba:	4b28      	ldr	r3, [pc, #160]	; (800255c <HAL_DMA_IRQHandler+0x184>)
 80024bc:	2102      	movs	r1, #2
 80024be:	4091      	lsls	r1, r2
 80024c0:	000a      	movs	r2, r1
 80024c2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2224      	movs	r2, #36	; 0x24
 80024c8:	2100      	movs	r1, #0
 80024ca:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d039      	beq.n	8002548 <HAL_DMA_IRQHandler+0x170>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	0010      	movs	r0, r2
 80024dc:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80024de:	e033      	b.n	8002548 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e4:	221c      	movs	r2, #28
 80024e6:	4013      	ands	r3, r2
 80024e8:	2208      	movs	r2, #8
 80024ea:	409a      	lsls	r2, r3
 80024ec:	0013      	movs	r3, r2
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	4013      	ands	r3, r2
 80024f2:	d02a      	beq.n	800254a <HAL_DMA_IRQHandler+0x172>
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	2208      	movs	r2, #8
 80024f8:	4013      	ands	r3, r2
 80024fa:	d026      	beq.n	800254a <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	210e      	movs	r1, #14
 8002508:	438a      	bics	r2, r1
 800250a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002510:	221c      	movs	r2, #28
 8002512:	401a      	ands	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002518:	2101      	movs	r1, #1
 800251a:	4091      	lsls	r1, r2
 800251c:	000a      	movs	r2, r1
 800251e:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2225      	movs	r2, #37	; 0x25
 800252a:	2101      	movs	r1, #1
 800252c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2224      	movs	r2, #36	; 0x24
 8002532:	2100      	movs	r1, #0
 8002534:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800253a:	2b00      	cmp	r3, #0
 800253c:	d005      	beq.n	800254a <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	0010      	movs	r0, r2
 8002546:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002548:	46c0      	nop			; (mov r8, r8)
 800254a:	46c0      	nop			; (mov r8, r8)
}
 800254c:	46bd      	mov	sp, r7
 800254e:	b004      	add	sp, #16
 8002550:	bd80      	pop	{r7, pc}
 8002552:	46c0      	nop			; (mov r8, r8)
 8002554:	40020080 	.word	0x40020080
 8002558:	40020400 	.word	0x40020400
 800255c:	40020000 	.word	0x40020000

08002560 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	001a      	movs	r2, r3
 800256e:	4b1d      	ldr	r3, [pc, #116]	; (80025e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8002570:	429a      	cmp	r2, r3
 8002572:	d814      	bhi.n	800259e <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002578:	089b      	lsrs	r3, r3, #2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4a1a      	ldr	r2, [pc, #104]	; (80025e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800257e:	189a      	adds	r2, r3, r2
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	001a      	movs	r2, r3
 800258a:	23ff      	movs	r3, #255	; 0xff
 800258c:	4013      	ands	r3, r2
 800258e:	3b08      	subs	r3, #8
 8002590:	2114      	movs	r1, #20
 8002592:	0018      	movs	r0, r3
 8002594:	f7fd fdb6 	bl	8000104 <__udivsi3>
 8002598:	0003      	movs	r3, r0
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	e014      	b.n	80025c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a2:	089b      	lsrs	r3, r3, #2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4a11      	ldr	r2, [pc, #68]	; (80025ec <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80025a8:	189a      	adds	r2, r3, r2
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	001a      	movs	r2, r3
 80025b4:	23ff      	movs	r3, #255	; 0xff
 80025b6:	4013      	ands	r3, r2
 80025b8:	3b08      	subs	r3, #8
 80025ba:	2114      	movs	r1, #20
 80025bc:	0018      	movs	r0, r3
 80025be:	f7fd fda1 	bl	8000104 <__udivsi3>
 80025c2:	0003      	movs	r3, r0
 80025c4:	3307      	adds	r3, #7
 80025c6:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a09      	ldr	r2, [pc, #36]	; (80025f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 80025cc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	221f      	movs	r2, #31
 80025d2:	4013      	ands	r3, r2
 80025d4:	2201      	movs	r2, #1
 80025d6:	409a      	lsls	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	651a      	str	r2, [r3, #80]	; 0x50
}
 80025dc:	46c0      	nop			; (mov r8, r8)
 80025de:	46bd      	mov	sp, r7
 80025e0:	b004      	add	sp, #16
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40020407 	.word	0x40020407
 80025e8:	40020800 	.word	0x40020800
 80025ec:	4002081c 	.word	0x4002081c
 80025f0:	40020880 	.word	0x40020880

080025f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	227f      	movs	r2, #127	; 0x7f
 8002602:	4013      	ands	r3, r2
 8002604:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	4a0a      	ldr	r2, [pc, #40]	; (8002634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800260a:	4694      	mov	ip, r2
 800260c:	4463      	add	r3, ip
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	001a      	movs	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a07      	ldr	r2, [pc, #28]	; (8002638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800261a:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	3b01      	subs	r3, #1
 8002620:	2203      	movs	r2, #3
 8002622:	4013      	ands	r3, r2
 8002624:	2201      	movs	r2, #1
 8002626:	409a      	lsls	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800262c:	46c0      	nop			; (mov r8, r8)
 800262e:	46bd      	mov	sp, r7
 8002630:	b004      	add	sp, #16
 8002632:	bd80      	pop	{r7, pc}
 8002634:	1000823f 	.word	0x1000823f
 8002638:	40020940 	.word	0x40020940

0800263c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002646:	2300      	movs	r3, #0
 8002648:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800264a:	e14d      	b.n	80028e8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2101      	movs	r1, #1
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	4091      	lsls	r1, r2
 8002656:	000a      	movs	r2, r1
 8002658:	4013      	ands	r3, r2
 800265a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d100      	bne.n	8002664 <HAL_GPIO_Init+0x28>
 8002662:	e13e      	b.n	80028e2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2203      	movs	r2, #3
 800266a:	4013      	ands	r3, r2
 800266c:	2b01      	cmp	r3, #1
 800266e:	d005      	beq.n	800267c <HAL_GPIO_Init+0x40>
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	2203      	movs	r2, #3
 8002676:	4013      	ands	r3, r2
 8002678:	2b02      	cmp	r3, #2
 800267a:	d130      	bne.n	80026de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	2203      	movs	r2, #3
 8002688:	409a      	lsls	r2, r3
 800268a:	0013      	movs	r3, r2
 800268c:	43da      	mvns	r2, r3
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	4013      	ands	r3, r2
 8002692:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	68da      	ldr	r2, [r3, #12]
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	409a      	lsls	r2, r3
 800269e:	0013      	movs	r3, r2
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026b2:	2201      	movs	r2, #1
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	409a      	lsls	r2, r3
 80026b8:	0013      	movs	r3, r2
 80026ba:	43da      	mvns	r2, r3
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	4013      	ands	r3, r2
 80026c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	091b      	lsrs	r3, r3, #4
 80026c8:	2201      	movs	r2, #1
 80026ca:	401a      	ands	r2, r3
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	409a      	lsls	r2, r3
 80026d0:	0013      	movs	r3, r2
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2203      	movs	r2, #3
 80026e4:	4013      	ands	r3, r2
 80026e6:	2b03      	cmp	r3, #3
 80026e8:	d017      	beq.n	800271a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	2203      	movs	r2, #3
 80026f6:	409a      	lsls	r2, r3
 80026f8:	0013      	movs	r3, r2
 80026fa:	43da      	mvns	r2, r3
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	4013      	ands	r3, r2
 8002700:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	689a      	ldr	r2, [r3, #8]
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	409a      	lsls	r2, r3
 800270c:	0013      	movs	r3, r2
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	4313      	orrs	r3, r2
 8002712:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2203      	movs	r2, #3
 8002720:	4013      	ands	r3, r2
 8002722:	2b02      	cmp	r3, #2
 8002724:	d123      	bne.n	800276e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	08da      	lsrs	r2, r3, #3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	3208      	adds	r2, #8
 800272e:	0092      	lsls	r2, r2, #2
 8002730:	58d3      	ldr	r3, [r2, r3]
 8002732:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	2207      	movs	r2, #7
 8002738:	4013      	ands	r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	220f      	movs	r2, #15
 800273e:	409a      	lsls	r2, r3
 8002740:	0013      	movs	r3, r2
 8002742:	43da      	mvns	r2, r3
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	4013      	ands	r3, r2
 8002748:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	691a      	ldr	r2, [r3, #16]
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	2107      	movs	r1, #7
 8002752:	400b      	ands	r3, r1
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	409a      	lsls	r2, r3
 8002758:	0013      	movs	r3, r2
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	4313      	orrs	r3, r2
 800275e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	08da      	lsrs	r2, r3, #3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3208      	adds	r2, #8
 8002768:	0092      	lsls	r2, r2, #2
 800276a:	6939      	ldr	r1, [r7, #16]
 800276c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	2203      	movs	r2, #3
 800277a:	409a      	lsls	r2, r3
 800277c:	0013      	movs	r3, r2
 800277e:	43da      	mvns	r2, r3
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	4013      	ands	r3, r2
 8002784:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2203      	movs	r2, #3
 800278c:	401a      	ands	r2, r3
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	409a      	lsls	r2, r3
 8002794:	0013      	movs	r3, r2
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	4313      	orrs	r3, r2
 800279a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685a      	ldr	r2, [r3, #4]
 80027a6:	23c0      	movs	r3, #192	; 0xc0
 80027a8:	029b      	lsls	r3, r3, #10
 80027aa:	4013      	ands	r3, r2
 80027ac:	d100      	bne.n	80027b0 <HAL_GPIO_Init+0x174>
 80027ae:	e098      	b.n	80028e2 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80027b0:	4a53      	ldr	r2, [pc, #332]	; (8002900 <HAL_GPIO_Init+0x2c4>)
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	089b      	lsrs	r3, r3, #2
 80027b6:	3318      	adds	r3, #24
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	589b      	ldr	r3, [r3, r2]
 80027bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	2203      	movs	r2, #3
 80027c2:	4013      	ands	r3, r2
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	220f      	movs	r2, #15
 80027c8:	409a      	lsls	r2, r3
 80027ca:	0013      	movs	r3, r2
 80027cc:	43da      	mvns	r2, r3
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	4013      	ands	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	23a0      	movs	r3, #160	; 0xa0
 80027d8:	05db      	lsls	r3, r3, #23
 80027da:	429a      	cmp	r2, r3
 80027dc:	d019      	beq.n	8002812 <HAL_GPIO_Init+0x1d6>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a48      	ldr	r2, [pc, #288]	; (8002904 <HAL_GPIO_Init+0x2c8>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d013      	beq.n	800280e <HAL_GPIO_Init+0x1d2>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a47      	ldr	r2, [pc, #284]	; (8002908 <HAL_GPIO_Init+0x2cc>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d00d      	beq.n	800280a <HAL_GPIO_Init+0x1ce>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a46      	ldr	r2, [pc, #280]	; (800290c <HAL_GPIO_Init+0x2d0>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d007      	beq.n	8002806 <HAL_GPIO_Init+0x1ca>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a45      	ldr	r2, [pc, #276]	; (8002910 <HAL_GPIO_Init+0x2d4>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d101      	bne.n	8002802 <HAL_GPIO_Init+0x1c6>
 80027fe:	2304      	movs	r3, #4
 8002800:	e008      	b.n	8002814 <HAL_GPIO_Init+0x1d8>
 8002802:	2305      	movs	r3, #5
 8002804:	e006      	b.n	8002814 <HAL_GPIO_Init+0x1d8>
 8002806:	2303      	movs	r3, #3
 8002808:	e004      	b.n	8002814 <HAL_GPIO_Init+0x1d8>
 800280a:	2302      	movs	r3, #2
 800280c:	e002      	b.n	8002814 <HAL_GPIO_Init+0x1d8>
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <HAL_GPIO_Init+0x1d8>
 8002812:	2300      	movs	r3, #0
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	2103      	movs	r1, #3
 8002818:	400a      	ands	r2, r1
 800281a:	00d2      	lsls	r2, r2, #3
 800281c:	4093      	lsls	r3, r2
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	4313      	orrs	r3, r2
 8002822:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002824:	4936      	ldr	r1, [pc, #216]	; (8002900 <HAL_GPIO_Init+0x2c4>)
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	089b      	lsrs	r3, r3, #2
 800282a:	3318      	adds	r3, #24
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002832:	4a33      	ldr	r2, [pc, #204]	; (8002900 <HAL_GPIO_Init+0x2c4>)
 8002834:	2380      	movs	r3, #128	; 0x80
 8002836:	58d3      	ldr	r3, [r2, r3]
 8002838:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	43da      	mvns	r2, r3
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	4013      	ands	r3, r2
 8002842:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	2380      	movs	r3, #128	; 0x80
 800284a:	025b      	lsls	r3, r3, #9
 800284c:	4013      	ands	r3, r2
 800284e:	d003      	beq.n	8002858 <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	4313      	orrs	r3, r2
 8002856:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002858:	4929      	ldr	r1, [pc, #164]	; (8002900 <HAL_GPIO_Init+0x2c4>)
 800285a:	2280      	movs	r2, #128	; 0x80
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8002860:	4a27      	ldr	r2, [pc, #156]	; (8002900 <HAL_GPIO_Init+0x2c4>)
 8002862:	2384      	movs	r3, #132	; 0x84
 8002864:	58d3      	ldr	r3, [r2, r3]
 8002866:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	43da      	mvns	r2, r3
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	4013      	ands	r3, r2
 8002870:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	2380      	movs	r3, #128	; 0x80
 8002878:	029b      	lsls	r3, r3, #10
 800287a:	4013      	ands	r3, r2
 800287c:	d003      	beq.n	8002886 <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4313      	orrs	r3, r2
 8002884:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002886:	491e      	ldr	r1, [pc, #120]	; (8002900 <HAL_GPIO_Init+0x2c4>)
 8002888:	2284      	movs	r2, #132	; 0x84
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800288e:	4b1c      	ldr	r3, [pc, #112]	; (8002900 <HAL_GPIO_Init+0x2c4>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	43da      	mvns	r2, r3
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	4013      	ands	r3, r2
 800289c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	2380      	movs	r3, #128	; 0x80
 80028a4:	035b      	lsls	r3, r3, #13
 80028a6:	4013      	ands	r3, r2
 80028a8:	d003      	beq.n	80028b2 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80028b2:	4b13      	ldr	r3, [pc, #76]	; (8002900 <HAL_GPIO_Init+0x2c4>)
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80028b8:	4b11      	ldr	r3, [pc, #68]	; (8002900 <HAL_GPIO_Init+0x2c4>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	43da      	mvns	r2, r3
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	4013      	ands	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	2380      	movs	r3, #128	; 0x80
 80028ce:	039b      	lsls	r3, r3, #14
 80028d0:	4013      	ands	r3, r2
 80028d2:	d003      	beq.n	80028dc <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	4313      	orrs	r3, r2
 80028da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80028dc:	4b08      	ldr	r3, [pc, #32]	; (8002900 <HAL_GPIO_Init+0x2c4>)
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	3301      	adds	r3, #1
 80028e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	40da      	lsrs	r2, r3
 80028f0:	1e13      	subs	r3, r2, #0
 80028f2:	d000      	beq.n	80028f6 <HAL_GPIO_Init+0x2ba>
 80028f4:	e6aa      	b.n	800264c <HAL_GPIO_Init+0x10>
  }
}
 80028f6:	46c0      	nop			; (mov r8, r8)
 80028f8:	46c0      	nop			; (mov r8, r8)
 80028fa:	46bd      	mov	sp, r7
 80028fc:	b006      	add	sp, #24
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40021800 	.word	0x40021800
 8002904:	50000400 	.word	0x50000400
 8002908:	50000800 	.word	0x50000800
 800290c:	50000c00 	.word	0x50000c00
 8002910:	50001000 	.word	0x50001000

08002914 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	0008      	movs	r0, r1
 800291e:	0011      	movs	r1, r2
 8002920:	1cbb      	adds	r3, r7, #2
 8002922:	1c02      	adds	r2, r0, #0
 8002924:	801a      	strh	r2, [r3, #0]
 8002926:	1c7b      	adds	r3, r7, #1
 8002928:	1c0a      	adds	r2, r1, #0
 800292a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800292c:	1c7b      	adds	r3, r7, #1
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d004      	beq.n	800293e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002934:	1cbb      	adds	r3, r7, #2
 8002936:	881a      	ldrh	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800293c:	e003      	b.n	8002946 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800293e:	1cbb      	adds	r3, r7, #2
 8002940:	881a      	ldrh	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	46bd      	mov	sp, r7
 800294a:	b002      	add	sp, #8
 800294c:	bd80      	pop	{r7, pc}
	...

08002950 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002958:	4b19      	ldr	r3, [pc, #100]	; (80029c0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a19      	ldr	r2, [pc, #100]	; (80029c4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800295e:	4013      	ands	r3, r2
 8002960:	0019      	movs	r1, r3
 8002962:	4b17      	ldr	r3, [pc, #92]	; (80029c0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	430a      	orrs	r2, r1
 8002968:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	2380      	movs	r3, #128	; 0x80
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	429a      	cmp	r2, r3
 8002972:	d11f      	bne.n	80029b4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002974:	4b14      	ldr	r3, [pc, #80]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	0013      	movs	r3, r2
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	189b      	adds	r3, r3, r2
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	4912      	ldr	r1, [pc, #72]	; (80029cc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002982:	0018      	movs	r0, r3
 8002984:	f7fd fbbe 	bl	8000104 <__udivsi3>
 8002988:	0003      	movs	r3, r0
 800298a:	3301      	adds	r3, #1
 800298c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800298e:	e008      	b.n	80029a2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	3b01      	subs	r3, #1
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	e001      	b.n	80029a2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e009      	b.n	80029b6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029a2:	4b07      	ldr	r3, [pc, #28]	; (80029c0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80029a4:	695a      	ldr	r2, [r3, #20]
 80029a6:	2380      	movs	r3, #128	; 0x80
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	401a      	ands	r2, r3
 80029ac:	2380      	movs	r3, #128	; 0x80
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d0ed      	beq.n	8002990 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	0018      	movs	r0, r3
 80029b8:	46bd      	mov	sp, r7
 80029ba:	b004      	add	sp, #16
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	46c0      	nop			; (mov r8, r8)
 80029c0:	40007000 	.word	0x40007000
 80029c4:	fffff9ff 	.word	0xfffff9ff
 80029c8:	20000000 	.word	0x20000000
 80029cc:	000f4240 	.word	0x000f4240

080029d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b088      	sub	sp, #32
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d102      	bne.n	80029e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	f000 fb56 	bl	8003090 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2201      	movs	r2, #1
 80029ea:	4013      	ands	r3, r2
 80029ec:	d100      	bne.n	80029f0 <HAL_RCC_OscConfig+0x20>
 80029ee:	e07d      	b.n	8002aec <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029f0:	4bc3      	ldr	r3, [pc, #780]	; (8002d00 <HAL_RCC_OscConfig+0x330>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	2238      	movs	r2, #56	; 0x38
 80029f6:	4013      	ands	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029fa:	4bc1      	ldr	r3, [pc, #772]	; (8002d00 <HAL_RCC_OscConfig+0x330>)
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	2203      	movs	r2, #3
 8002a00:	4013      	ands	r3, r2
 8002a02:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	2b10      	cmp	r3, #16
 8002a08:	d102      	bne.n	8002a10 <HAL_RCC_OscConfig+0x40>
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	2b03      	cmp	r3, #3
 8002a0e:	d002      	beq.n	8002a16 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	2b08      	cmp	r3, #8
 8002a14:	d10c      	bne.n	8002a30 <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a16:	4bba      	ldr	r3, [pc, #744]	; (8002d00 <HAL_RCC_OscConfig+0x330>)
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	2380      	movs	r3, #128	; 0x80
 8002a1c:	029b      	lsls	r3, r3, #10
 8002a1e:	4013      	ands	r3, r2
 8002a20:	d063      	beq.n	8002aea <HAL_RCC_OscConfig+0x11a>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d15f      	bne.n	8002aea <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	f000 fb30 	bl	8003090 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685a      	ldr	r2, [r3, #4]
 8002a34:	2380      	movs	r3, #128	; 0x80
 8002a36:	025b      	lsls	r3, r3, #9
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d107      	bne.n	8002a4c <HAL_RCC_OscConfig+0x7c>
 8002a3c:	4bb0      	ldr	r3, [pc, #704]	; (8002d00 <HAL_RCC_OscConfig+0x330>)
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	4baf      	ldr	r3, [pc, #700]	; (8002d00 <HAL_RCC_OscConfig+0x330>)
 8002a42:	2180      	movs	r1, #128	; 0x80
 8002a44:	0249      	lsls	r1, r1, #9
 8002a46:	430a      	orrs	r2, r1
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	e020      	b.n	8002a8e <HAL_RCC_OscConfig+0xbe>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	23a0      	movs	r3, #160	; 0xa0
 8002a52:	02db      	lsls	r3, r3, #11
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d10e      	bne.n	8002a76 <HAL_RCC_OscConfig+0xa6>
 8002a58:	4ba9      	ldr	r3, [pc, #676]	; (8002d00 <HAL_RCC_OscConfig+0x330>)
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	4ba8      	ldr	r3, [pc, #672]	; (8002d00 <HAL_RCC_OscConfig+0x330>)
 8002a5e:	2180      	movs	r1, #128	; 0x80
 8002a60:	02c9      	lsls	r1, r1, #11
 8002a62:	430a      	orrs	r2, r1
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	4ba6      	ldr	r3, [pc, #664]	; (8002d00 <HAL_RCC_OscConfig+0x330>)
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	4ba5      	ldr	r3, [pc, #660]	; (8002d00 <HAL_RCC_OscConfig+0x330>)
 8002a6c:	2180      	movs	r1, #128	; 0x80
 8002a6e:	0249      	lsls	r1, r1, #9
 8002a70:	430a      	orrs	r2, r1
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	e00b      	b.n	8002a8e <HAL_RCC_OscConfig+0xbe>
 8002a76:	4ba2      	ldr	r3, [pc, #648]	; (8002d00 <HAL_RCC_OscConfig+0x330>)
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	4ba1      	ldr	r3, [pc, #644]	; (8002d00 <HAL_RCC_OscConfig+0x330>)
 8002a7c:	49a1      	ldr	r1, [pc, #644]	; (8002d04 <HAL_RCC_OscConfig+0x334>)
 8002a7e:	400a      	ands	r2, r1
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	4b9f      	ldr	r3, [pc, #636]	; (8002d00 <HAL_RCC_OscConfig+0x330>)
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	4b9e      	ldr	r3, [pc, #632]	; (8002d00 <HAL_RCC_OscConfig+0x330>)
 8002a88:	499f      	ldr	r1, [pc, #636]	; (8002d08 <HAL_RCC_OscConfig+0x338>)
 8002a8a:	400a      	ands	r2, r1
 8002a8c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d014      	beq.n	8002ac0 <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a96:	f7fe fb51 	bl	800113c <HAL_GetTick>
 8002a9a:	0003      	movs	r3, r0
 8002a9c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aa0:	f7fe fb4c 	bl	800113c <HAL_GetTick>
 8002aa4:	0002      	movs	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b64      	cmp	r3, #100	; 0x64
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e2ee      	b.n	8003090 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ab2:	4b93      	ldr	r3, [pc, #588]	; (8002d00 <HAL_RCC_OscConfig+0x330>)
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	2380      	movs	r3, #128	; 0x80
 8002ab8:	029b      	lsls	r3, r3, #10
 8002aba:	4013      	ands	r3, r2
 8002abc:	d0f0      	beq.n	8002aa0 <HAL_RCC_OscConfig+0xd0>
 8002abe:	e015      	b.n	8002aec <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac0:	f7fe fb3c 	bl	800113c <HAL_GetTick>
 8002ac4:	0003      	movs	r3, r0
 8002ac6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aca:	f7fe fb37 	bl	800113c <HAL_GetTick>
 8002ace:	0002      	movs	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b64      	cmp	r3, #100	; 0x64
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e2d9      	b.n	8003090 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002adc:	4b88      	ldr	r3, [pc, #544]	; (8002d00 <HAL_RCC_OscConfig+0x330>)
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	2380      	movs	r3, #128	; 0x80
 8002ae2:	029b      	lsls	r3, r3, #10
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	d1f0      	bne.n	8002aca <HAL_RCC_OscConfig+0xfa>
 8002ae8:	e000      	b.n	8002aec <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aea:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2202      	movs	r2, #2
 8002af2:	4013      	ands	r3, r2
 8002af4:	d100      	bne.n	8002af8 <HAL_RCC_OscConfig+0x128>
 8002af6:	e099      	b.n	8002c2c <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002af8:	4b81      	ldr	r3, [pc, #516]	; (8002d00 <HAL_RCC_OscConfig+0x330>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	2238      	movs	r2, #56	; 0x38
 8002afe:	4013      	ands	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b02:	4b7f      	ldr	r3, [pc, #508]	; (8002d00 <HAL_RCC_OscConfig+0x330>)
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	2203      	movs	r2, #3
 8002b08:	4013      	ands	r3, r2
 8002b0a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	2b10      	cmp	r3, #16
 8002b10:	d102      	bne.n	8002b18 <HAL_RCC_OscConfig+0x148>
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d002      	beq.n	8002b1e <HAL_RCC_OscConfig+0x14e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d135      	bne.n	8002b8a <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b1e:	4b78      	ldr	r3, [pc, #480]	; (8002d00 <HAL_RCC_OscConfig+0x330>)
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	2380      	movs	r3, #128	; 0x80
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	4013      	ands	r3, r2
 8002b28:	d005      	beq.n	8002b36 <HAL_RCC_OscConfig+0x166>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e2ac      	b.n	8003090 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b36:	4b72      	ldr	r3, [pc, #456]	; (8002d00 <HAL_RCC_OscConfig+0x330>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	4a74      	ldr	r2, [pc, #464]	; (8002d0c <HAL_RCC_OscConfig+0x33c>)
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	0019      	movs	r1, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	695b      	ldr	r3, [r3, #20]
 8002b44:	021a      	lsls	r2, r3, #8
 8002b46:	4b6e      	ldr	r3, [pc, #440]	; (8002d00 <HAL_RCC_OscConfig+0x330>)
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d112      	bne.n	8002b78 <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002b52:	4b6b      	ldr	r3, [pc, #428]	; (8002d00 <HAL_RCC_OscConfig+0x330>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a6e      	ldr	r2, [pc, #440]	; (8002d10 <HAL_RCC_OscConfig+0x340>)
 8002b58:	4013      	ands	r3, r2
 8002b5a:	0019      	movs	r1, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	691a      	ldr	r2, [r3, #16]
 8002b60:	4b67      	ldr	r3, [pc, #412]	; (8002d00 <HAL_RCC_OscConfig+0x330>)
 8002b62:	430a      	orrs	r2, r1
 8002b64:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002b66:	4b66      	ldr	r3, [pc, #408]	; (8002d00 <HAL_RCC_OscConfig+0x330>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	0adb      	lsrs	r3, r3, #11
 8002b6c:	2207      	movs	r2, #7
 8002b6e:	4013      	ands	r3, r2
 8002b70:	4a68      	ldr	r2, [pc, #416]	; (8002d14 <HAL_RCC_OscConfig+0x344>)
 8002b72:	40da      	lsrs	r2, r3
 8002b74:	4b68      	ldr	r3, [pc, #416]	; (8002d18 <HAL_RCC_OscConfig+0x348>)
 8002b76:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002b78:	4b68      	ldr	r3, [pc, #416]	; (8002d1c <HAL_RCC_OscConfig+0x34c>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	f7fe fa81 	bl	8001084 <HAL_InitTick>
 8002b82:	1e03      	subs	r3, r0, #0
 8002b84:	d051      	beq.n	8002c2a <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e282      	b.n	8003090 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d030      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002b92:	4b5b      	ldr	r3, [pc, #364]	; (8002d00 <HAL_RCC_OscConfig+0x330>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a5e      	ldr	r2, [pc, #376]	; (8002d10 <HAL_RCC_OscConfig+0x340>)
 8002b98:	4013      	ands	r3, r2
 8002b9a:	0019      	movs	r1, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691a      	ldr	r2, [r3, #16]
 8002ba0:	4b57      	ldr	r3, [pc, #348]	; (8002d00 <HAL_RCC_OscConfig+0x330>)
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002ba6:	4b56      	ldr	r3, [pc, #344]	; (8002d00 <HAL_RCC_OscConfig+0x330>)
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	4b55      	ldr	r3, [pc, #340]	; (8002d00 <HAL_RCC_OscConfig+0x330>)
 8002bac:	2180      	movs	r1, #128	; 0x80
 8002bae:	0049      	lsls	r1, r1, #1
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb4:	f7fe fac2 	bl	800113c <HAL_GetTick>
 8002bb8:	0003      	movs	r3, r0
 8002bba:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bbc:	e008      	b.n	8002bd0 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bbe:	f7fe fabd 	bl	800113c <HAL_GetTick>
 8002bc2:	0002      	movs	r2, r0
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e25f      	b.n	8003090 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bd0:	4b4b      	ldr	r3, [pc, #300]	; (8002d00 <HAL_RCC_OscConfig+0x330>)
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	2380      	movs	r3, #128	; 0x80
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	4013      	ands	r3, r2
 8002bda:	d0f0      	beq.n	8002bbe <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bdc:	4b48      	ldr	r3, [pc, #288]	; (8002d00 <HAL_RCC_OscConfig+0x330>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	4a4a      	ldr	r2, [pc, #296]	; (8002d0c <HAL_RCC_OscConfig+0x33c>)
 8002be2:	4013      	ands	r3, r2
 8002be4:	0019      	movs	r1, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	021a      	lsls	r2, r3, #8
 8002bec:	4b44      	ldr	r3, [pc, #272]	; (8002d00 <HAL_RCC_OscConfig+0x330>)
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	605a      	str	r2, [r3, #4]
 8002bf2:	e01b      	b.n	8002c2c <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002bf4:	4b42      	ldr	r3, [pc, #264]	; (8002d00 <HAL_RCC_OscConfig+0x330>)
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	4b41      	ldr	r3, [pc, #260]	; (8002d00 <HAL_RCC_OscConfig+0x330>)
 8002bfa:	4949      	ldr	r1, [pc, #292]	; (8002d20 <HAL_RCC_OscConfig+0x350>)
 8002bfc:	400a      	ands	r2, r1
 8002bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c00:	f7fe fa9c 	bl	800113c <HAL_GetTick>
 8002c04:	0003      	movs	r3, r0
 8002c06:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c08:	e008      	b.n	8002c1c <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c0a:	f7fe fa97 	bl	800113c <HAL_GetTick>
 8002c0e:	0002      	movs	r2, r0
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d901      	bls.n	8002c1c <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e239      	b.n	8003090 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c1c:	4b38      	ldr	r3, [pc, #224]	; (8002d00 <HAL_RCC_OscConfig+0x330>)
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	2380      	movs	r3, #128	; 0x80
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	4013      	ands	r3, r2
 8002c26:	d1f0      	bne.n	8002c0a <HAL_RCC_OscConfig+0x23a>
 8002c28:	e000      	b.n	8002c2c <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c2a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2208      	movs	r2, #8
 8002c32:	4013      	ands	r3, r2
 8002c34:	d047      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002c36:	4b32      	ldr	r3, [pc, #200]	; (8002d00 <HAL_RCC_OscConfig+0x330>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	2238      	movs	r2, #56	; 0x38
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	2b18      	cmp	r3, #24
 8002c40:	d10a      	bne.n	8002c58 <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002c42:	4b2f      	ldr	r3, [pc, #188]	; (8002d00 <HAL_RCC_OscConfig+0x330>)
 8002c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c46:	2202      	movs	r2, #2
 8002c48:	4013      	ands	r3, r2
 8002c4a:	d03c      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x2f6>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d138      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e21b      	b.n	8003090 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d019      	beq.n	8002c94 <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002c60:	4b27      	ldr	r3, [pc, #156]	; (8002d00 <HAL_RCC_OscConfig+0x330>)
 8002c62:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c64:	4b26      	ldr	r3, [pc, #152]	; (8002d00 <HAL_RCC_OscConfig+0x330>)
 8002c66:	2101      	movs	r1, #1
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6c:	f7fe fa66 	bl	800113c <HAL_GetTick>
 8002c70:	0003      	movs	r3, r0
 8002c72:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c76:	f7fe fa61 	bl	800113c <HAL_GetTick>
 8002c7a:	0002      	movs	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e203      	b.n	8003090 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c88:	4b1d      	ldr	r3, [pc, #116]	; (8002d00 <HAL_RCC_OscConfig+0x330>)
 8002c8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c8c:	2202      	movs	r2, #2
 8002c8e:	4013      	ands	r3, r2
 8002c90:	d0f1      	beq.n	8002c76 <HAL_RCC_OscConfig+0x2a6>
 8002c92:	e018      	b.n	8002cc6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002c94:	4b1a      	ldr	r3, [pc, #104]	; (8002d00 <HAL_RCC_OscConfig+0x330>)
 8002c96:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c98:	4b19      	ldr	r3, [pc, #100]	; (8002d00 <HAL_RCC_OscConfig+0x330>)
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	438a      	bics	r2, r1
 8002c9e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca0:	f7fe fa4c 	bl	800113c <HAL_GetTick>
 8002ca4:	0003      	movs	r3, r0
 8002ca6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ca8:	e008      	b.n	8002cbc <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002caa:	f7fe fa47 	bl	800113c <HAL_GetTick>
 8002cae:	0002      	movs	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e1e9      	b.n	8003090 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cbc:	4b10      	ldr	r3, [pc, #64]	; (8002d00 <HAL_RCC_OscConfig+0x330>)
 8002cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	d1f1      	bne.n	8002caa <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2204      	movs	r2, #4
 8002ccc:	4013      	ands	r3, r2
 8002cce:	d100      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x302>
 8002cd0:	e0c6      	b.n	8002e60 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cd2:	231f      	movs	r3, #31
 8002cd4:	18fb      	adds	r3, r7, r3
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002cda:	4b09      	ldr	r3, [pc, #36]	; (8002d00 <HAL_RCC_OscConfig+0x330>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	2238      	movs	r2, #56	; 0x38
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	2b20      	cmp	r3, #32
 8002ce4:	d11e      	bne.n	8002d24 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002ce6:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <HAL_RCC_OscConfig+0x330>)
 8002ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cea:	2202      	movs	r2, #2
 8002cec:	4013      	ands	r3, r2
 8002cee:	d100      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x322>
 8002cf0:	e0b6      	b.n	8002e60 <HAL_RCC_OscConfig+0x490>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d000      	beq.n	8002cfc <HAL_RCC_OscConfig+0x32c>
 8002cfa:	e0b1      	b.n	8002e60 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e1c7      	b.n	8003090 <HAL_RCC_OscConfig+0x6c0>
 8002d00:	40021000 	.word	0x40021000
 8002d04:	fffeffff 	.word	0xfffeffff
 8002d08:	fffbffff 	.word	0xfffbffff
 8002d0c:	ffff80ff 	.word	0xffff80ff
 8002d10:	ffffc7ff 	.word	0xffffc7ff
 8002d14:	00f42400 	.word	0x00f42400
 8002d18:	20000000 	.word	0x20000000
 8002d1c:	20000004 	.word	0x20000004
 8002d20:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d24:	4bb8      	ldr	r3, [pc, #736]	; (8003008 <HAL_RCC_OscConfig+0x638>)
 8002d26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d28:	2380      	movs	r3, #128	; 0x80
 8002d2a:	055b      	lsls	r3, r3, #21
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	d101      	bne.n	8002d34 <HAL_RCC_OscConfig+0x364>
 8002d30:	2301      	movs	r3, #1
 8002d32:	e000      	b.n	8002d36 <HAL_RCC_OscConfig+0x366>
 8002d34:	2300      	movs	r3, #0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d011      	beq.n	8002d5e <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002d3a:	4bb3      	ldr	r3, [pc, #716]	; (8003008 <HAL_RCC_OscConfig+0x638>)
 8002d3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d3e:	4bb2      	ldr	r3, [pc, #712]	; (8003008 <HAL_RCC_OscConfig+0x638>)
 8002d40:	2180      	movs	r1, #128	; 0x80
 8002d42:	0549      	lsls	r1, r1, #21
 8002d44:	430a      	orrs	r2, r1
 8002d46:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d48:	4baf      	ldr	r3, [pc, #700]	; (8003008 <HAL_RCC_OscConfig+0x638>)
 8002d4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d4c:	2380      	movs	r3, #128	; 0x80
 8002d4e:	055b      	lsls	r3, r3, #21
 8002d50:	4013      	ands	r3, r2
 8002d52:	60fb      	str	r3, [r7, #12]
 8002d54:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002d56:	231f      	movs	r3, #31
 8002d58:	18fb      	adds	r3, r7, r3
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d5e:	4bab      	ldr	r3, [pc, #684]	; (800300c <HAL_RCC_OscConfig+0x63c>)
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	2380      	movs	r3, #128	; 0x80
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	4013      	ands	r3, r2
 8002d68:	d11a      	bne.n	8002da0 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d6a:	4ba8      	ldr	r3, [pc, #672]	; (800300c <HAL_RCC_OscConfig+0x63c>)
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	4ba7      	ldr	r3, [pc, #668]	; (800300c <HAL_RCC_OscConfig+0x63c>)
 8002d70:	2180      	movs	r1, #128	; 0x80
 8002d72:	0049      	lsls	r1, r1, #1
 8002d74:	430a      	orrs	r2, r1
 8002d76:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002d78:	f7fe f9e0 	bl	800113c <HAL_GetTick>
 8002d7c:	0003      	movs	r3, r0
 8002d7e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d80:	e008      	b.n	8002d94 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d82:	f7fe f9db 	bl	800113c <HAL_GetTick>
 8002d86:	0002      	movs	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e17d      	b.n	8003090 <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d94:	4b9d      	ldr	r3, [pc, #628]	; (800300c <HAL_RCC_OscConfig+0x63c>)
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	2380      	movs	r3, #128	; 0x80
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	d0f0      	beq.n	8002d82 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d106      	bne.n	8002db6 <HAL_RCC_OscConfig+0x3e6>
 8002da8:	4b97      	ldr	r3, [pc, #604]	; (8003008 <HAL_RCC_OscConfig+0x638>)
 8002daa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002dac:	4b96      	ldr	r3, [pc, #600]	; (8003008 <HAL_RCC_OscConfig+0x638>)
 8002dae:	2101      	movs	r1, #1
 8002db0:	430a      	orrs	r2, r1
 8002db2:	65da      	str	r2, [r3, #92]	; 0x5c
 8002db4:	e01c      	b.n	8002df0 <HAL_RCC_OscConfig+0x420>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	2b05      	cmp	r3, #5
 8002dbc:	d10c      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x408>
 8002dbe:	4b92      	ldr	r3, [pc, #584]	; (8003008 <HAL_RCC_OscConfig+0x638>)
 8002dc0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002dc2:	4b91      	ldr	r3, [pc, #580]	; (8003008 <HAL_RCC_OscConfig+0x638>)
 8002dc4:	2104      	movs	r1, #4
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	65da      	str	r2, [r3, #92]	; 0x5c
 8002dca:	4b8f      	ldr	r3, [pc, #572]	; (8003008 <HAL_RCC_OscConfig+0x638>)
 8002dcc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002dce:	4b8e      	ldr	r3, [pc, #568]	; (8003008 <HAL_RCC_OscConfig+0x638>)
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	65da      	str	r2, [r3, #92]	; 0x5c
 8002dd6:	e00b      	b.n	8002df0 <HAL_RCC_OscConfig+0x420>
 8002dd8:	4b8b      	ldr	r3, [pc, #556]	; (8003008 <HAL_RCC_OscConfig+0x638>)
 8002dda:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ddc:	4b8a      	ldr	r3, [pc, #552]	; (8003008 <HAL_RCC_OscConfig+0x638>)
 8002dde:	2101      	movs	r1, #1
 8002de0:	438a      	bics	r2, r1
 8002de2:	65da      	str	r2, [r3, #92]	; 0x5c
 8002de4:	4b88      	ldr	r3, [pc, #544]	; (8003008 <HAL_RCC_OscConfig+0x638>)
 8002de6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002de8:	4b87      	ldr	r3, [pc, #540]	; (8003008 <HAL_RCC_OscConfig+0x638>)
 8002dea:	2104      	movs	r1, #4
 8002dec:	438a      	bics	r2, r1
 8002dee:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d014      	beq.n	8002e22 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df8:	f7fe f9a0 	bl	800113c <HAL_GetTick>
 8002dfc:	0003      	movs	r3, r0
 8002dfe:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e00:	e009      	b.n	8002e16 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e02:	f7fe f99b 	bl	800113c <HAL_GetTick>
 8002e06:	0002      	movs	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	4a80      	ldr	r2, [pc, #512]	; (8003010 <HAL_RCC_OscConfig+0x640>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e13c      	b.n	8003090 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e16:	4b7c      	ldr	r3, [pc, #496]	; (8003008 <HAL_RCC_OscConfig+0x638>)
 8002e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	d0f0      	beq.n	8002e02 <HAL_RCC_OscConfig+0x432>
 8002e20:	e013      	b.n	8002e4a <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e22:	f7fe f98b 	bl	800113c <HAL_GetTick>
 8002e26:	0003      	movs	r3, r0
 8002e28:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e2a:	e009      	b.n	8002e40 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e2c:	f7fe f986 	bl	800113c <HAL_GetTick>
 8002e30:	0002      	movs	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	4a76      	ldr	r2, [pc, #472]	; (8003010 <HAL_RCC_OscConfig+0x640>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e127      	b.n	8003090 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e40:	4b71      	ldr	r3, [pc, #452]	; (8003008 <HAL_RCC_OscConfig+0x638>)
 8002e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e44:	2202      	movs	r2, #2
 8002e46:	4013      	ands	r3, r2
 8002e48:	d1f0      	bne.n	8002e2c <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002e4a:	231f      	movs	r3, #31
 8002e4c:	18fb      	adds	r3, r7, r3
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d105      	bne.n	8002e60 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002e54:	4b6c      	ldr	r3, [pc, #432]	; (8003008 <HAL_RCC_OscConfig+0x638>)
 8002e56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e58:	4b6b      	ldr	r3, [pc, #428]	; (8003008 <HAL_RCC_OscConfig+0x638>)
 8002e5a:	496e      	ldr	r1, [pc, #440]	; (8003014 <HAL_RCC_OscConfig+0x644>)
 8002e5c:	400a      	ands	r2, r1
 8002e5e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2220      	movs	r2, #32
 8002e66:	4013      	ands	r3, r2
 8002e68:	d039      	beq.n	8002ede <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d01b      	beq.n	8002eaa <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e72:	4b65      	ldr	r3, [pc, #404]	; (8003008 <HAL_RCC_OscConfig+0x638>)
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	4b64      	ldr	r3, [pc, #400]	; (8003008 <HAL_RCC_OscConfig+0x638>)
 8002e78:	2180      	movs	r1, #128	; 0x80
 8002e7a:	03c9      	lsls	r1, r1, #15
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e80:	f7fe f95c 	bl	800113c <HAL_GetTick>
 8002e84:	0003      	movs	r3, r0
 8002e86:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002e88:	e008      	b.n	8002e9c <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e8a:	f7fe f957 	bl	800113c <HAL_GetTick>
 8002e8e:	0002      	movs	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e0f9      	b.n	8003090 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002e9c:	4b5a      	ldr	r3, [pc, #360]	; (8003008 <HAL_RCC_OscConfig+0x638>)
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	2380      	movs	r3, #128	; 0x80
 8002ea2:	041b      	lsls	r3, r3, #16
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	d0f0      	beq.n	8002e8a <HAL_RCC_OscConfig+0x4ba>
 8002ea8:	e019      	b.n	8002ede <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002eaa:	4b57      	ldr	r3, [pc, #348]	; (8003008 <HAL_RCC_OscConfig+0x638>)
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	4b56      	ldr	r3, [pc, #344]	; (8003008 <HAL_RCC_OscConfig+0x638>)
 8002eb0:	4959      	ldr	r1, [pc, #356]	; (8003018 <HAL_RCC_OscConfig+0x648>)
 8002eb2:	400a      	ands	r2, r1
 8002eb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb6:	f7fe f941 	bl	800113c <HAL_GetTick>
 8002eba:	0003      	movs	r3, r0
 8002ebc:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ec0:	f7fe f93c 	bl	800113c <HAL_GetTick>
 8002ec4:	0002      	movs	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e0de      	b.n	8003090 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002ed2:	4b4d      	ldr	r3, [pc, #308]	; (8003008 <HAL_RCC_OscConfig+0x638>)
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	2380      	movs	r3, #128	; 0x80
 8002ed8:	041b      	lsls	r3, r3, #16
 8002eda:	4013      	ands	r3, r2
 8002edc:	d1f0      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d100      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x518>
 8002ee6:	e0d2      	b.n	800308e <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ee8:	4b47      	ldr	r3, [pc, #284]	; (8003008 <HAL_RCC_OscConfig+0x638>)
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	2238      	movs	r2, #56	; 0x38
 8002eee:	4013      	ands	r3, r2
 8002ef0:	2b10      	cmp	r3, #16
 8002ef2:	d100      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x526>
 8002ef4:	e081      	b.n	8002ffa <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d156      	bne.n	8002fac <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002efe:	4b42      	ldr	r3, [pc, #264]	; (8003008 <HAL_RCC_OscConfig+0x638>)
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	4b41      	ldr	r3, [pc, #260]	; (8003008 <HAL_RCC_OscConfig+0x638>)
 8002f04:	4945      	ldr	r1, [pc, #276]	; (800301c <HAL_RCC_OscConfig+0x64c>)
 8002f06:	400a      	ands	r2, r1
 8002f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0a:	f7fe f917 	bl	800113c <HAL_GetTick>
 8002f0e:	0003      	movs	r3, r0
 8002f10:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f14:	f7fe f912 	bl	800113c <HAL_GetTick>
 8002f18:	0002      	movs	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e0b4      	b.n	8003090 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f26:	4b38      	ldr	r3, [pc, #224]	; (8003008 <HAL_RCC_OscConfig+0x638>)
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	2380      	movs	r3, #128	; 0x80
 8002f2c:	049b      	lsls	r3, r3, #18
 8002f2e:	4013      	ands	r3, r2
 8002f30:	d1f0      	bne.n	8002f14 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f32:	4b35      	ldr	r3, [pc, #212]	; (8003008 <HAL_RCC_OscConfig+0x638>)
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	4a3a      	ldr	r2, [pc, #232]	; (8003020 <HAL_RCC_OscConfig+0x650>)
 8002f38:	4013      	ands	r3, r2
 8002f3a:	0019      	movs	r1, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f44:	431a      	orrs	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4a:	021b      	lsls	r3, r3, #8
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	431a      	orrs	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	4b29      	ldr	r3, [pc, #164]	; (8003008 <HAL_RCC_OscConfig+0x638>)
 8002f62:	430a      	orrs	r2, r1
 8002f64:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f66:	4b28      	ldr	r3, [pc, #160]	; (8003008 <HAL_RCC_OscConfig+0x638>)
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	4b27      	ldr	r3, [pc, #156]	; (8003008 <HAL_RCC_OscConfig+0x638>)
 8002f6c:	2180      	movs	r1, #128	; 0x80
 8002f6e:	0449      	lsls	r1, r1, #17
 8002f70:	430a      	orrs	r2, r1
 8002f72:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002f74:	4b24      	ldr	r3, [pc, #144]	; (8003008 <HAL_RCC_OscConfig+0x638>)
 8002f76:	68da      	ldr	r2, [r3, #12]
 8002f78:	4b23      	ldr	r3, [pc, #140]	; (8003008 <HAL_RCC_OscConfig+0x638>)
 8002f7a:	2180      	movs	r1, #128	; 0x80
 8002f7c:	0549      	lsls	r1, r1, #21
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f82:	f7fe f8db 	bl	800113c <HAL_GetTick>
 8002f86:	0003      	movs	r3, r0
 8002f88:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f8c:	f7fe f8d6 	bl	800113c <HAL_GetTick>
 8002f90:	0002      	movs	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e078      	b.n	8003090 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f9e:	4b1a      	ldr	r3, [pc, #104]	; (8003008 <HAL_RCC_OscConfig+0x638>)
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	2380      	movs	r3, #128	; 0x80
 8002fa4:	049b      	lsls	r3, r3, #18
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	d0f0      	beq.n	8002f8c <HAL_RCC_OscConfig+0x5bc>
 8002faa:	e070      	b.n	800308e <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fac:	4b16      	ldr	r3, [pc, #88]	; (8003008 <HAL_RCC_OscConfig+0x638>)
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	4b15      	ldr	r3, [pc, #84]	; (8003008 <HAL_RCC_OscConfig+0x638>)
 8002fb2:	491a      	ldr	r1, [pc, #104]	; (800301c <HAL_RCC_OscConfig+0x64c>)
 8002fb4:	400a      	ands	r2, r1
 8002fb6:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002fb8:	4b13      	ldr	r3, [pc, #76]	; (8003008 <HAL_RCC_OscConfig+0x638>)
 8002fba:	68da      	ldr	r2, [r3, #12]
 8002fbc:	4b12      	ldr	r3, [pc, #72]	; (8003008 <HAL_RCC_OscConfig+0x638>)
 8002fbe:	2103      	movs	r1, #3
 8002fc0:	438a      	bics	r2, r1
 8002fc2:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002fc4:	4b10      	ldr	r3, [pc, #64]	; (8003008 <HAL_RCC_OscConfig+0x638>)
 8002fc6:	68da      	ldr	r2, [r3, #12]
 8002fc8:	4b0f      	ldr	r3, [pc, #60]	; (8003008 <HAL_RCC_OscConfig+0x638>)
 8002fca:	4916      	ldr	r1, [pc, #88]	; (8003024 <HAL_RCC_OscConfig+0x654>)
 8002fcc:	400a      	ands	r2, r1
 8002fce:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd0:	f7fe f8b4 	bl	800113c <HAL_GetTick>
 8002fd4:	0003      	movs	r3, r0
 8002fd6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fd8:	e008      	b.n	8002fec <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fda:	f7fe f8af 	bl	800113c <HAL_GetTick>
 8002fde:	0002      	movs	r2, r0
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e051      	b.n	8003090 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fec:	4b06      	ldr	r3, [pc, #24]	; (8003008 <HAL_RCC_OscConfig+0x638>)
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	2380      	movs	r3, #128	; 0x80
 8002ff2:	049b      	lsls	r3, r3, #18
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	d1f0      	bne.n	8002fda <HAL_RCC_OscConfig+0x60a>
 8002ff8:	e049      	b.n	800308e <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d112      	bne.n	8003028 <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e044      	b.n	8003090 <HAL_RCC_OscConfig+0x6c0>
 8003006:	46c0      	nop			; (mov r8, r8)
 8003008:	40021000 	.word	0x40021000
 800300c:	40007000 	.word	0x40007000
 8003010:	00001388 	.word	0x00001388
 8003014:	efffffff 	.word	0xefffffff
 8003018:	ffbfffff 	.word	0xffbfffff
 800301c:	feffffff 	.word	0xfeffffff
 8003020:	11c1808c 	.word	0x11c1808c
 8003024:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003028:	4b1b      	ldr	r3, [pc, #108]	; (8003098 <HAL_RCC_OscConfig+0x6c8>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	2203      	movs	r2, #3
 8003032:	401a      	ands	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	429a      	cmp	r2, r3
 800303a:	d126      	bne.n	800308a <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	2270      	movs	r2, #112	; 0x70
 8003040:	401a      	ands	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003046:	429a      	cmp	r2, r3
 8003048:	d11f      	bne.n	800308a <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	23fe      	movs	r3, #254	; 0xfe
 800304e:	01db      	lsls	r3, r3, #7
 8003050:	401a      	ands	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003056:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003058:	429a      	cmp	r2, r3
 800305a:	d116      	bne.n	800308a <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800305c:	697a      	ldr	r2, [r7, #20]
 800305e:	23f8      	movs	r3, #248	; 0xf8
 8003060:	039b      	lsls	r3, r3, #14
 8003062:	401a      	ands	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003068:	429a      	cmp	r2, r3
 800306a:	d10e      	bne.n	800308a <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800306c:	697a      	ldr	r2, [r7, #20]
 800306e:	23e0      	movs	r3, #224	; 0xe0
 8003070:	051b      	lsls	r3, r3, #20
 8003072:	401a      	ands	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003078:	429a      	cmp	r2, r3
 800307a:	d106      	bne.n	800308a <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	0f5b      	lsrs	r3, r3, #29
 8003080:	075a      	lsls	r2, r3, #29
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003086:	429a      	cmp	r2, r3
 8003088:	d001      	beq.n	800308e <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e000      	b.n	8003090 <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	0018      	movs	r0, r3
 8003092:	46bd      	mov	sp, r7
 8003094:	b008      	add	sp, #32
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40021000 	.word	0x40021000

0800309c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e0e9      	b.n	8003284 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030b0:	4b76      	ldr	r3, [pc, #472]	; (800328c <HAL_RCC_ClockConfig+0x1f0>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2207      	movs	r2, #7
 80030b6:	4013      	ands	r3, r2
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d91e      	bls.n	80030fc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030be:	4b73      	ldr	r3, [pc, #460]	; (800328c <HAL_RCC_ClockConfig+0x1f0>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2207      	movs	r2, #7
 80030c4:	4393      	bics	r3, r2
 80030c6:	0019      	movs	r1, r3
 80030c8:	4b70      	ldr	r3, [pc, #448]	; (800328c <HAL_RCC_ClockConfig+0x1f0>)
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80030d0:	f7fe f834 	bl	800113c <HAL_GetTick>
 80030d4:	0003      	movs	r3, r0
 80030d6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80030d8:	e009      	b.n	80030ee <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030da:	f7fe f82f 	bl	800113c <HAL_GetTick>
 80030de:	0002      	movs	r2, r0
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	4a6a      	ldr	r2, [pc, #424]	; (8003290 <HAL_RCC_ClockConfig+0x1f4>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e0ca      	b.n	8003284 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80030ee:	4b67      	ldr	r3, [pc, #412]	; (800328c <HAL_RCC_ClockConfig+0x1f0>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2207      	movs	r2, #7
 80030f4:	4013      	ands	r3, r2
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d1ee      	bne.n	80030da <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2202      	movs	r2, #2
 8003102:	4013      	ands	r3, r2
 8003104:	d015      	beq.n	8003132 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2204      	movs	r2, #4
 800310c:	4013      	ands	r3, r2
 800310e:	d006      	beq.n	800311e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003110:	4b60      	ldr	r3, [pc, #384]	; (8003294 <HAL_RCC_ClockConfig+0x1f8>)
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	4b5f      	ldr	r3, [pc, #380]	; (8003294 <HAL_RCC_ClockConfig+0x1f8>)
 8003116:	21e0      	movs	r1, #224	; 0xe0
 8003118:	01c9      	lsls	r1, r1, #7
 800311a:	430a      	orrs	r2, r1
 800311c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800311e:	4b5d      	ldr	r3, [pc, #372]	; (8003294 <HAL_RCC_ClockConfig+0x1f8>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	4a5d      	ldr	r2, [pc, #372]	; (8003298 <HAL_RCC_ClockConfig+0x1fc>)
 8003124:	4013      	ands	r3, r2
 8003126:	0019      	movs	r1, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	4b59      	ldr	r3, [pc, #356]	; (8003294 <HAL_RCC_ClockConfig+0x1f8>)
 800312e:	430a      	orrs	r2, r1
 8003130:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2201      	movs	r2, #1
 8003138:	4013      	ands	r3, r2
 800313a:	d057      	beq.n	80031ec <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d107      	bne.n	8003154 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003144:	4b53      	ldr	r3, [pc, #332]	; (8003294 <HAL_RCC_ClockConfig+0x1f8>)
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	2380      	movs	r3, #128	; 0x80
 800314a:	029b      	lsls	r3, r3, #10
 800314c:	4013      	ands	r3, r2
 800314e:	d12b      	bne.n	80031a8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e097      	b.n	8003284 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	2b02      	cmp	r3, #2
 800315a:	d107      	bne.n	800316c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800315c:	4b4d      	ldr	r3, [pc, #308]	; (8003294 <HAL_RCC_ClockConfig+0x1f8>)
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	2380      	movs	r3, #128	; 0x80
 8003162:	049b      	lsls	r3, r3, #18
 8003164:	4013      	ands	r3, r2
 8003166:	d11f      	bne.n	80031a8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e08b      	b.n	8003284 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d107      	bne.n	8003184 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003174:	4b47      	ldr	r3, [pc, #284]	; (8003294 <HAL_RCC_ClockConfig+0x1f8>)
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	2380      	movs	r3, #128	; 0x80
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	4013      	ands	r3, r2
 800317e:	d113      	bne.n	80031a8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e07f      	b.n	8003284 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	2b03      	cmp	r3, #3
 800318a:	d106      	bne.n	800319a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800318c:	4b41      	ldr	r3, [pc, #260]	; (8003294 <HAL_RCC_ClockConfig+0x1f8>)
 800318e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003190:	2202      	movs	r2, #2
 8003192:	4013      	ands	r3, r2
 8003194:	d108      	bne.n	80031a8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e074      	b.n	8003284 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800319a:	4b3e      	ldr	r3, [pc, #248]	; (8003294 <HAL_RCC_ClockConfig+0x1f8>)
 800319c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800319e:	2202      	movs	r2, #2
 80031a0:	4013      	ands	r3, r2
 80031a2:	d101      	bne.n	80031a8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e06d      	b.n	8003284 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031a8:	4b3a      	ldr	r3, [pc, #232]	; (8003294 <HAL_RCC_ClockConfig+0x1f8>)
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	2207      	movs	r2, #7
 80031ae:	4393      	bics	r3, r2
 80031b0:	0019      	movs	r1, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	4b37      	ldr	r3, [pc, #220]	; (8003294 <HAL_RCC_ClockConfig+0x1f8>)
 80031b8:	430a      	orrs	r2, r1
 80031ba:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031bc:	f7fd ffbe 	bl	800113c <HAL_GetTick>
 80031c0:	0003      	movs	r3, r0
 80031c2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c4:	e009      	b.n	80031da <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031c6:	f7fd ffb9 	bl	800113c <HAL_GetTick>
 80031ca:	0002      	movs	r2, r0
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	4a2f      	ldr	r2, [pc, #188]	; (8003290 <HAL_RCC_ClockConfig+0x1f4>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e054      	b.n	8003284 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031da:	4b2e      	ldr	r3, [pc, #184]	; (8003294 <HAL_RCC_ClockConfig+0x1f8>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	2238      	movs	r2, #56	; 0x38
 80031e0:	401a      	ands	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d1ec      	bne.n	80031c6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031ec:	4b27      	ldr	r3, [pc, #156]	; (800328c <HAL_RCC_ClockConfig+0x1f0>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2207      	movs	r2, #7
 80031f2:	4013      	ands	r3, r2
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d21e      	bcs.n	8003238 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031fa:	4b24      	ldr	r3, [pc, #144]	; (800328c <HAL_RCC_ClockConfig+0x1f0>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2207      	movs	r2, #7
 8003200:	4393      	bics	r3, r2
 8003202:	0019      	movs	r1, r3
 8003204:	4b21      	ldr	r3, [pc, #132]	; (800328c <HAL_RCC_ClockConfig+0x1f0>)
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	430a      	orrs	r2, r1
 800320a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800320c:	f7fd ff96 	bl	800113c <HAL_GetTick>
 8003210:	0003      	movs	r3, r0
 8003212:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003214:	e009      	b.n	800322a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003216:	f7fd ff91 	bl	800113c <HAL_GetTick>
 800321a:	0002      	movs	r2, r0
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	4a1b      	ldr	r2, [pc, #108]	; (8003290 <HAL_RCC_ClockConfig+0x1f4>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d901      	bls.n	800322a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e02c      	b.n	8003284 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800322a:	4b18      	ldr	r3, [pc, #96]	; (800328c <HAL_RCC_ClockConfig+0x1f0>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2207      	movs	r2, #7
 8003230:	4013      	ands	r3, r2
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	429a      	cmp	r2, r3
 8003236:	d1ee      	bne.n	8003216 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2204      	movs	r2, #4
 800323e:	4013      	ands	r3, r2
 8003240:	d009      	beq.n	8003256 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003242:	4b14      	ldr	r3, [pc, #80]	; (8003294 <HAL_RCC_ClockConfig+0x1f8>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	4a15      	ldr	r2, [pc, #84]	; (800329c <HAL_RCC_ClockConfig+0x200>)
 8003248:	4013      	ands	r3, r2
 800324a:	0019      	movs	r1, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68da      	ldr	r2, [r3, #12]
 8003250:	4b10      	ldr	r3, [pc, #64]	; (8003294 <HAL_RCC_ClockConfig+0x1f8>)
 8003252:	430a      	orrs	r2, r1
 8003254:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003256:	f000 f829 	bl	80032ac <HAL_RCC_GetSysClockFreq>
 800325a:	0001      	movs	r1, r0
 800325c:	4b0d      	ldr	r3, [pc, #52]	; (8003294 <HAL_RCC_ClockConfig+0x1f8>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	0a1b      	lsrs	r3, r3, #8
 8003262:	220f      	movs	r2, #15
 8003264:	401a      	ands	r2, r3
 8003266:	4b0e      	ldr	r3, [pc, #56]	; (80032a0 <HAL_RCC_ClockConfig+0x204>)
 8003268:	0092      	lsls	r2, r2, #2
 800326a:	58d3      	ldr	r3, [r2, r3]
 800326c:	221f      	movs	r2, #31
 800326e:	4013      	ands	r3, r2
 8003270:	000a      	movs	r2, r1
 8003272:	40da      	lsrs	r2, r3
 8003274:	4b0b      	ldr	r3, [pc, #44]	; (80032a4 <HAL_RCC_ClockConfig+0x208>)
 8003276:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003278:	4b0b      	ldr	r3, [pc, #44]	; (80032a8 <HAL_RCC_ClockConfig+0x20c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	0018      	movs	r0, r3
 800327e:	f7fd ff01 	bl	8001084 <HAL_InitTick>
 8003282:	0003      	movs	r3, r0
}
 8003284:	0018      	movs	r0, r3
 8003286:	46bd      	mov	sp, r7
 8003288:	b004      	add	sp, #16
 800328a:	bd80      	pop	{r7, pc}
 800328c:	40022000 	.word	0x40022000
 8003290:	00001388 	.word	0x00001388
 8003294:	40021000 	.word	0x40021000
 8003298:	fffff0ff 	.word	0xfffff0ff
 800329c:	ffff8fff 	.word	0xffff8fff
 80032a0:	080038d8 	.word	0x080038d8
 80032a4:	20000000 	.word	0x20000000
 80032a8:	20000004 	.word	0x20000004

080032ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032b2:	4b3c      	ldr	r3, [pc, #240]	; (80033a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	2238      	movs	r2, #56	; 0x38
 80032b8:	4013      	ands	r3, r2
 80032ba:	d10f      	bne.n	80032dc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80032bc:	4b39      	ldr	r3, [pc, #228]	; (80033a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	0adb      	lsrs	r3, r3, #11
 80032c2:	2207      	movs	r2, #7
 80032c4:	4013      	ands	r3, r2
 80032c6:	2201      	movs	r2, #1
 80032c8:	409a      	lsls	r2, r3
 80032ca:	0013      	movs	r3, r2
 80032cc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80032ce:	6839      	ldr	r1, [r7, #0]
 80032d0:	4835      	ldr	r0, [pc, #212]	; (80033a8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80032d2:	f7fc ff17 	bl	8000104 <__udivsi3>
 80032d6:	0003      	movs	r3, r0
 80032d8:	613b      	str	r3, [r7, #16]
 80032da:	e05d      	b.n	8003398 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032dc:	4b31      	ldr	r3, [pc, #196]	; (80033a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	2238      	movs	r2, #56	; 0x38
 80032e2:	4013      	ands	r3, r2
 80032e4:	2b08      	cmp	r3, #8
 80032e6:	d102      	bne.n	80032ee <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80032e8:	4b30      	ldr	r3, [pc, #192]	; (80033ac <HAL_RCC_GetSysClockFreq+0x100>)
 80032ea:	613b      	str	r3, [r7, #16]
 80032ec:	e054      	b.n	8003398 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032ee:	4b2d      	ldr	r3, [pc, #180]	; (80033a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	2238      	movs	r2, #56	; 0x38
 80032f4:	4013      	ands	r3, r2
 80032f6:	2b10      	cmp	r3, #16
 80032f8:	d138      	bne.n	800336c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80032fa:	4b2a      	ldr	r3, [pc, #168]	; (80033a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	2203      	movs	r2, #3
 8003300:	4013      	ands	r3, r2
 8003302:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003304:	4b27      	ldr	r3, [pc, #156]	; (80033a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	091b      	lsrs	r3, r3, #4
 800330a:	2207      	movs	r2, #7
 800330c:	4013      	ands	r3, r2
 800330e:	3301      	adds	r3, #1
 8003310:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2b03      	cmp	r3, #3
 8003316:	d10d      	bne.n	8003334 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003318:	68b9      	ldr	r1, [r7, #8]
 800331a:	4824      	ldr	r0, [pc, #144]	; (80033ac <HAL_RCC_GetSysClockFreq+0x100>)
 800331c:	f7fc fef2 	bl	8000104 <__udivsi3>
 8003320:	0003      	movs	r3, r0
 8003322:	0019      	movs	r1, r3
 8003324:	4b1f      	ldr	r3, [pc, #124]	; (80033a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	0a1b      	lsrs	r3, r3, #8
 800332a:	227f      	movs	r2, #127	; 0x7f
 800332c:	4013      	ands	r3, r2
 800332e:	434b      	muls	r3, r1
 8003330:	617b      	str	r3, [r7, #20]
        break;
 8003332:	e00d      	b.n	8003350 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003334:	68b9      	ldr	r1, [r7, #8]
 8003336:	481c      	ldr	r0, [pc, #112]	; (80033a8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003338:	f7fc fee4 	bl	8000104 <__udivsi3>
 800333c:	0003      	movs	r3, r0
 800333e:	0019      	movs	r1, r3
 8003340:	4b18      	ldr	r3, [pc, #96]	; (80033a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	0a1b      	lsrs	r3, r3, #8
 8003346:	227f      	movs	r2, #127	; 0x7f
 8003348:	4013      	ands	r3, r2
 800334a:	434b      	muls	r3, r1
 800334c:	617b      	str	r3, [r7, #20]
        break;
 800334e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003350:	4b14      	ldr	r3, [pc, #80]	; (80033a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	0f5b      	lsrs	r3, r3, #29
 8003356:	2207      	movs	r2, #7
 8003358:	4013      	ands	r3, r2
 800335a:	3301      	adds	r3, #1
 800335c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	6978      	ldr	r0, [r7, #20]
 8003362:	f7fc fecf 	bl	8000104 <__udivsi3>
 8003366:	0003      	movs	r3, r0
 8003368:	613b      	str	r3, [r7, #16]
 800336a:	e015      	b.n	8003398 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800336c:	4b0d      	ldr	r3, [pc, #52]	; (80033a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	2238      	movs	r2, #56	; 0x38
 8003372:	4013      	ands	r3, r2
 8003374:	2b20      	cmp	r3, #32
 8003376:	d103      	bne.n	8003380 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003378:	2380      	movs	r3, #128	; 0x80
 800337a:	021b      	lsls	r3, r3, #8
 800337c:	613b      	str	r3, [r7, #16]
 800337e:	e00b      	b.n	8003398 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003380:	4b08      	ldr	r3, [pc, #32]	; (80033a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	2238      	movs	r2, #56	; 0x38
 8003386:	4013      	ands	r3, r2
 8003388:	2b18      	cmp	r3, #24
 800338a:	d103      	bne.n	8003394 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800338c:	23fa      	movs	r3, #250	; 0xfa
 800338e:	01db      	lsls	r3, r3, #7
 8003390:	613b      	str	r3, [r7, #16]
 8003392:	e001      	b.n	8003398 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003394:	2300      	movs	r3, #0
 8003396:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003398:	693b      	ldr	r3, [r7, #16]
}
 800339a:	0018      	movs	r0, r3
 800339c:	46bd      	mov	sp, r7
 800339e:	b006      	add	sp, #24
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	46c0      	nop			; (mov r8, r8)
 80033a4:	40021000 	.word	0x40021000
 80033a8:	00f42400 	.word	0x00f42400
 80033ac:	007a1200 	.word	0x007a1200

080033b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80033b8:	2313      	movs	r3, #19
 80033ba:	18fb      	adds	r3, r7, r3
 80033bc:	2200      	movs	r2, #0
 80033be:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033c0:	2312      	movs	r3, #18
 80033c2:	18fb      	adds	r3, r7, r3
 80033c4:	2200      	movs	r2, #0
 80033c6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	2380      	movs	r3, #128	; 0x80
 80033ce:	029b      	lsls	r3, r3, #10
 80033d0:	4013      	ands	r3, r2
 80033d2:	d100      	bne.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80033d4:	e0ad      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033d6:	2011      	movs	r0, #17
 80033d8:	183b      	adds	r3, r7, r0
 80033da:	2200      	movs	r2, #0
 80033dc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033de:	4b47      	ldr	r3, [pc, #284]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80033e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033e2:	2380      	movs	r3, #128	; 0x80
 80033e4:	055b      	lsls	r3, r3, #21
 80033e6:	4013      	ands	r3, r2
 80033e8:	d110      	bne.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ea:	4b44      	ldr	r3, [pc, #272]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80033ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033ee:	4b43      	ldr	r3, [pc, #268]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80033f0:	2180      	movs	r1, #128	; 0x80
 80033f2:	0549      	lsls	r1, r1, #21
 80033f4:	430a      	orrs	r2, r1
 80033f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80033f8:	4b40      	ldr	r3, [pc, #256]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80033fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033fc:	2380      	movs	r3, #128	; 0x80
 80033fe:	055b      	lsls	r3, r3, #21
 8003400:	4013      	ands	r3, r2
 8003402:	60bb      	str	r3, [r7, #8]
 8003404:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003406:	183b      	adds	r3, r7, r0
 8003408:	2201      	movs	r2, #1
 800340a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800340c:	4b3c      	ldr	r3, [pc, #240]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	4b3b      	ldr	r3, [pc, #236]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003412:	2180      	movs	r1, #128	; 0x80
 8003414:	0049      	lsls	r1, r1, #1
 8003416:	430a      	orrs	r2, r1
 8003418:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800341a:	f7fd fe8f 	bl	800113c <HAL_GetTick>
 800341e:	0003      	movs	r3, r0
 8003420:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003422:	e00b      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003424:	f7fd fe8a 	bl	800113c <HAL_GetTick>
 8003428:	0002      	movs	r2, r0
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d904      	bls.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003432:	2313      	movs	r3, #19
 8003434:	18fb      	adds	r3, r7, r3
 8003436:	2203      	movs	r2, #3
 8003438:	701a      	strb	r2, [r3, #0]
        break;
 800343a:	e005      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800343c:	4b30      	ldr	r3, [pc, #192]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	2380      	movs	r3, #128	; 0x80
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	4013      	ands	r3, r2
 8003446:	d0ed      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003448:	2313      	movs	r3, #19
 800344a:	18fb      	adds	r3, r7, r3
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d15e      	bne.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003452:	4b2a      	ldr	r3, [pc, #168]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003454:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003456:	23c0      	movs	r3, #192	; 0xc0
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4013      	ands	r3, r2
 800345c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d019      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	429a      	cmp	r2, r3
 800346c:	d014      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800346e:	4b23      	ldr	r3, [pc, #140]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003472:	4a24      	ldr	r2, [pc, #144]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003474:	4013      	ands	r3, r2
 8003476:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003478:	4b20      	ldr	r3, [pc, #128]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800347a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800347c:	4b1f      	ldr	r3, [pc, #124]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800347e:	2180      	movs	r1, #128	; 0x80
 8003480:	0249      	lsls	r1, r1, #9
 8003482:	430a      	orrs	r2, r1
 8003484:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003486:	4b1d      	ldr	r3, [pc, #116]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003488:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800348a:	4b1c      	ldr	r3, [pc, #112]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800348c:	491e      	ldr	r1, [pc, #120]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800348e:	400a      	ands	r2, r1
 8003490:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003492:	4b1a      	ldr	r3, [pc, #104]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	2201      	movs	r2, #1
 800349c:	4013      	ands	r3, r2
 800349e:	d016      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a0:	f7fd fe4c 	bl	800113c <HAL_GetTick>
 80034a4:	0003      	movs	r3, r0
 80034a6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034a8:	e00c      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034aa:	f7fd fe47 	bl	800113c <HAL_GetTick>
 80034ae:	0002      	movs	r2, r0
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	4a15      	ldr	r2, [pc, #84]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d904      	bls.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80034ba:	2313      	movs	r3, #19
 80034bc:	18fb      	adds	r3, r7, r3
 80034be:	2203      	movs	r2, #3
 80034c0:	701a      	strb	r2, [r3, #0]
            break;
 80034c2:	e004      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034c4:	4b0d      	ldr	r3, [pc, #52]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80034c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c8:	2202      	movs	r2, #2
 80034ca:	4013      	ands	r3, r2
 80034cc:	d0ed      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80034ce:	2313      	movs	r3, #19
 80034d0:	18fb      	adds	r3, r7, r3
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10a      	bne.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034d8:	4b08      	ldr	r3, [pc, #32]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80034da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034dc:	4a09      	ldr	r2, [pc, #36]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80034de:	4013      	ands	r3, r2
 80034e0:	0019      	movs	r1, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034e6:	4b05      	ldr	r3, [pc, #20]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80034e8:	430a      	orrs	r2, r1
 80034ea:	65da      	str	r2, [r3, #92]	; 0x5c
 80034ec:	e016      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034ee:	2312      	movs	r3, #18
 80034f0:	18fb      	adds	r3, r7, r3
 80034f2:	2213      	movs	r2, #19
 80034f4:	18ba      	adds	r2, r7, r2
 80034f6:	7812      	ldrb	r2, [r2, #0]
 80034f8:	701a      	strb	r2, [r3, #0]
 80034fa:	e00f      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80034fc:	40021000 	.word	0x40021000
 8003500:	40007000 	.word	0x40007000
 8003504:	fffffcff 	.word	0xfffffcff
 8003508:	fffeffff 	.word	0xfffeffff
 800350c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003510:	2312      	movs	r3, #18
 8003512:	18fb      	adds	r3, r7, r3
 8003514:	2213      	movs	r2, #19
 8003516:	18ba      	adds	r2, r7, r2
 8003518:	7812      	ldrb	r2, [r2, #0]
 800351a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800351c:	2311      	movs	r3, #17
 800351e:	18fb      	adds	r3, r7, r3
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d105      	bne.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003526:	4bb6      	ldr	r3, [pc, #728]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003528:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800352a:	4bb5      	ldr	r3, [pc, #724]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800352c:	49b5      	ldr	r1, [pc, #724]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800352e:	400a      	ands	r2, r1
 8003530:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2201      	movs	r2, #1
 8003538:	4013      	ands	r3, r2
 800353a:	d009      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800353c:	4bb0      	ldr	r3, [pc, #704]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800353e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003540:	2203      	movs	r2, #3
 8003542:	4393      	bics	r3, r2
 8003544:	0019      	movs	r1, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	4bad      	ldr	r3, [pc, #692]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800354c:	430a      	orrs	r2, r1
 800354e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2202      	movs	r2, #2
 8003556:	4013      	ands	r3, r2
 8003558:	d009      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800355a:	4ba9      	ldr	r3, [pc, #676]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800355c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355e:	220c      	movs	r2, #12
 8003560:	4393      	bics	r3, r2
 8003562:	0019      	movs	r1, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	4ba5      	ldr	r3, [pc, #660]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800356a:	430a      	orrs	r2, r1
 800356c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2204      	movs	r2, #4
 8003574:	4013      	ands	r3, r2
 8003576:	d009      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003578:	4ba1      	ldr	r3, [pc, #644]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800357a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357c:	2230      	movs	r2, #48	; 0x30
 800357e:	4393      	bics	r3, r2
 8003580:	0019      	movs	r1, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68da      	ldr	r2, [r3, #12]
 8003586:	4b9e      	ldr	r3, [pc, #632]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003588:	430a      	orrs	r2, r1
 800358a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2210      	movs	r2, #16
 8003592:	4013      	ands	r3, r2
 8003594:	d009      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003596:	4b9a      	ldr	r3, [pc, #616]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359a:	4a9b      	ldr	r2, [pc, #620]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800359c:	4013      	ands	r3, r2
 800359e:	0019      	movs	r1, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	691a      	ldr	r2, [r3, #16]
 80035a4:	4b96      	ldr	r3, [pc, #600]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035a6:	430a      	orrs	r2, r1
 80035a8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	2380      	movs	r3, #128	; 0x80
 80035b0:	015b      	lsls	r3, r3, #5
 80035b2:	4013      	ands	r3, r2
 80035b4:	d009      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80035b6:	4b92      	ldr	r3, [pc, #584]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ba:	4a94      	ldr	r2, [pc, #592]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80035bc:	4013      	ands	r3, r2
 80035be:	0019      	movs	r1, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	695a      	ldr	r2, [r3, #20]
 80035c4:	4b8e      	ldr	r3, [pc, #568]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035c6:	430a      	orrs	r2, r1
 80035c8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	2380      	movs	r3, #128	; 0x80
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4013      	ands	r3, r2
 80035d4:	d009      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035d6:	4b8a      	ldr	r3, [pc, #552]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035da:	4a8d      	ldr	r2, [pc, #564]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 80035dc:	4013      	ands	r3, r2
 80035de:	0019      	movs	r1, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035e4:	4b86      	ldr	r3, [pc, #536]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035e6:	430a      	orrs	r2, r1
 80035e8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	2380      	movs	r3, #128	; 0x80
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	4013      	ands	r3, r2
 80035f4:	d009      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035f6:	4b82      	ldr	r3, [pc, #520]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035fa:	4a86      	ldr	r2, [pc, #536]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 80035fc:	4013      	ands	r3, r2
 80035fe:	0019      	movs	r1, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003604:	4b7e      	ldr	r3, [pc, #504]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003606:	430a      	orrs	r2, r1
 8003608:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2220      	movs	r2, #32
 8003610:	4013      	ands	r3, r2
 8003612:	d009      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003614:	4b7a      	ldr	r3, [pc, #488]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003618:	4a7f      	ldr	r2, [pc, #508]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800361a:	4013      	ands	r3, r2
 800361c:	0019      	movs	r1, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	699a      	ldr	r2, [r3, #24]
 8003622:	4b77      	ldr	r3, [pc, #476]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003624:	430a      	orrs	r2, r1
 8003626:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2240      	movs	r2, #64	; 0x40
 800362e:	4013      	ands	r3, r2
 8003630:	d009      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003632:	4b73      	ldr	r3, [pc, #460]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003636:	4a79      	ldr	r2, [pc, #484]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003638:	4013      	ands	r3, r2
 800363a:	0019      	movs	r1, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	69da      	ldr	r2, [r3, #28]
 8003640:	4b6f      	ldr	r3, [pc, #444]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003642:	430a      	orrs	r2, r1
 8003644:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	2380      	movs	r3, #128	; 0x80
 800364c:	01db      	lsls	r3, r3, #7
 800364e:	4013      	ands	r3, r2
 8003650:	d015      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003652:	4b6b      	ldr	r3, [pc, #428]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	0899      	lsrs	r1, r3, #2
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800365e:	4b68      	ldr	r3, [pc, #416]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003660:	430a      	orrs	r2, r1
 8003662:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003668:	2380      	movs	r3, #128	; 0x80
 800366a:	05db      	lsls	r3, r3, #23
 800366c:	429a      	cmp	r2, r3
 800366e:	d106      	bne.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003670:	4b63      	ldr	r3, [pc, #396]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003672:	68da      	ldr	r2, [r3, #12]
 8003674:	4b62      	ldr	r3, [pc, #392]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003676:	2180      	movs	r1, #128	; 0x80
 8003678:	0249      	lsls	r1, r1, #9
 800367a:	430a      	orrs	r2, r1
 800367c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	2380      	movs	r3, #128	; 0x80
 8003684:	031b      	lsls	r3, r3, #12
 8003686:	4013      	ands	r3, r2
 8003688:	d009      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800368a:	4b5d      	ldr	r3, [pc, #372]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800368c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368e:	2240      	movs	r2, #64	; 0x40
 8003690:	4393      	bics	r3, r2
 8003692:	0019      	movs	r1, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003698:	4b59      	ldr	r3, [pc, #356]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800369a:	430a      	orrs	r2, r1
 800369c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	2380      	movs	r3, #128	; 0x80
 80036a4:	039b      	lsls	r3, r3, #14
 80036a6:	4013      	ands	r3, r2
 80036a8:	d016      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80036aa:	4b55      	ldr	r3, [pc, #340]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80036ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ae:	4a5c      	ldr	r2, [pc, #368]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80036b0:	4013      	ands	r3, r2
 80036b2:	0019      	movs	r1, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036b8:	4b51      	ldr	r3, [pc, #324]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80036ba:	430a      	orrs	r2, r1
 80036bc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036c2:	2380      	movs	r3, #128	; 0x80
 80036c4:	03db      	lsls	r3, r3, #15
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d106      	bne.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80036ca:	4b4d      	ldr	r3, [pc, #308]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80036cc:	68da      	ldr	r2, [r3, #12]
 80036ce:	4b4c      	ldr	r3, [pc, #304]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80036d0:	2180      	movs	r1, #128	; 0x80
 80036d2:	0449      	lsls	r1, r1, #17
 80036d4:	430a      	orrs	r2, r1
 80036d6:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	2380      	movs	r3, #128	; 0x80
 80036de:	03db      	lsls	r3, r3, #15
 80036e0:	4013      	ands	r3, r2
 80036e2:	d016      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80036e4:	4b46      	ldr	r3, [pc, #280]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80036e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e8:	4a4e      	ldr	r2, [pc, #312]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80036ea:	4013      	ands	r3, r2
 80036ec:	0019      	movs	r1, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036f2:	4b43      	ldr	r3, [pc, #268]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80036f4:	430a      	orrs	r2, r1
 80036f6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036fc:	2380      	movs	r3, #128	; 0x80
 80036fe:	045b      	lsls	r3, r3, #17
 8003700:	429a      	cmp	r2, r3
 8003702:	d106      	bne.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003704:	4b3e      	ldr	r3, [pc, #248]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003706:	68da      	ldr	r2, [r3, #12]
 8003708:	4b3d      	ldr	r3, [pc, #244]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800370a:	2180      	movs	r1, #128	; 0x80
 800370c:	0449      	lsls	r1, r1, #17
 800370e:	430a      	orrs	r2, r1
 8003710:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	2380      	movs	r3, #128	; 0x80
 8003718:	011b      	lsls	r3, r3, #4
 800371a:	4013      	ands	r3, r2
 800371c:	d014      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800371e:	4b38      	ldr	r3, [pc, #224]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003722:	2203      	movs	r2, #3
 8003724:	4393      	bics	r3, r2
 8003726:	0019      	movs	r1, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a1a      	ldr	r2, [r3, #32]
 800372c:	4b34      	ldr	r3, [pc, #208]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800372e:	430a      	orrs	r2, r1
 8003730:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d106      	bne.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800373a:	4b31      	ldr	r3, [pc, #196]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800373c:	68da      	ldr	r2, [r3, #12]
 800373e:	4b30      	ldr	r3, [pc, #192]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003740:	2180      	movs	r1, #128	; 0x80
 8003742:	0249      	lsls	r1, r1, #9
 8003744:	430a      	orrs	r2, r1
 8003746:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	2380      	movs	r3, #128	; 0x80
 800374e:	019b      	lsls	r3, r3, #6
 8003750:	4013      	ands	r3, r2
 8003752:	d014      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003754:	4b2a      	ldr	r3, [pc, #168]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003758:	220c      	movs	r2, #12
 800375a:	4393      	bics	r3, r2
 800375c:	0019      	movs	r1, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003762:	4b27      	ldr	r3, [pc, #156]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003764:	430a      	orrs	r2, r1
 8003766:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376c:	2b04      	cmp	r3, #4
 800376e:	d106      	bne.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003770:	4b23      	ldr	r3, [pc, #140]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003772:	68da      	ldr	r2, [r3, #12]
 8003774:	4b22      	ldr	r3, [pc, #136]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003776:	2180      	movs	r1, #128	; 0x80
 8003778:	0249      	lsls	r1, r1, #9
 800377a:	430a      	orrs	r2, r1
 800377c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	2380      	movs	r3, #128	; 0x80
 8003784:	045b      	lsls	r3, r3, #17
 8003786:	4013      	ands	r3, r2
 8003788:	d016      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800378a:	4b1d      	ldr	r3, [pc, #116]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800378c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378e:	4a22      	ldr	r2, [pc, #136]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003790:	4013      	ands	r3, r2
 8003792:	0019      	movs	r1, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003798:	4b19      	ldr	r3, [pc, #100]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800379a:	430a      	orrs	r2, r1
 800379c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037a2:	2380      	movs	r3, #128	; 0x80
 80037a4:	019b      	lsls	r3, r3, #6
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d106      	bne.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80037aa:	4b15      	ldr	r3, [pc, #84]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80037ac:	68da      	ldr	r2, [r3, #12]
 80037ae:	4b14      	ldr	r3, [pc, #80]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80037b0:	2180      	movs	r1, #128	; 0x80
 80037b2:	0449      	lsls	r1, r1, #17
 80037b4:	430a      	orrs	r2, r1
 80037b6:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	2380      	movs	r3, #128	; 0x80
 80037be:	049b      	lsls	r3, r3, #18
 80037c0:	4013      	ands	r3, r2
 80037c2:	d016      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80037c4:	4b0e      	ldr	r3, [pc, #56]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80037c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c8:	4a10      	ldr	r2, [pc, #64]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80037ca:	4013      	ands	r3, r2
 80037cc:	0019      	movs	r1, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037d2:	4b0b      	ldr	r3, [pc, #44]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80037d4:	430a      	orrs	r2, r1
 80037d6:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037dc:	2380      	movs	r3, #128	; 0x80
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d106      	bne.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80037e4:	4b06      	ldr	r3, [pc, #24]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80037e6:	68da      	ldr	r2, [r3, #12]
 80037e8:	4b05      	ldr	r3, [pc, #20]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80037ea:	2180      	movs	r1, #128	; 0x80
 80037ec:	0449      	lsls	r1, r1, #17
 80037ee:	430a      	orrs	r2, r1
 80037f0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80037f2:	2312      	movs	r3, #18
 80037f4:	18fb      	adds	r3, r7, r3
 80037f6:	781b      	ldrb	r3, [r3, #0]
}
 80037f8:	0018      	movs	r0, r3
 80037fa:	46bd      	mov	sp, r7
 80037fc:	b006      	add	sp, #24
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	40021000 	.word	0x40021000
 8003804:	efffffff 	.word	0xefffffff
 8003808:	fffff3ff 	.word	0xfffff3ff
 800380c:	fffffcff 	.word	0xfffffcff
 8003810:	fff3ffff 	.word	0xfff3ffff
 8003814:	ffcfffff 	.word	0xffcfffff
 8003818:	ffffcfff 	.word	0xffffcfff
 800381c:	ffff3fff 	.word	0xffff3fff
 8003820:	ffbfffff 	.word	0xffbfffff
 8003824:	feffffff 	.word	0xfeffffff

08003828 <__libc_init_array>:
 8003828:	b570      	push	{r4, r5, r6, lr}
 800382a:	2600      	movs	r6, #0
 800382c:	4d0c      	ldr	r5, [pc, #48]	; (8003860 <__libc_init_array+0x38>)
 800382e:	4c0d      	ldr	r4, [pc, #52]	; (8003864 <__libc_init_array+0x3c>)
 8003830:	1b64      	subs	r4, r4, r5
 8003832:	10a4      	asrs	r4, r4, #2
 8003834:	42a6      	cmp	r6, r4
 8003836:	d109      	bne.n	800384c <__libc_init_array+0x24>
 8003838:	2600      	movs	r6, #0
 800383a:	f000 f821 	bl	8003880 <_init>
 800383e:	4d0a      	ldr	r5, [pc, #40]	; (8003868 <__libc_init_array+0x40>)
 8003840:	4c0a      	ldr	r4, [pc, #40]	; (800386c <__libc_init_array+0x44>)
 8003842:	1b64      	subs	r4, r4, r5
 8003844:	10a4      	asrs	r4, r4, #2
 8003846:	42a6      	cmp	r6, r4
 8003848:	d105      	bne.n	8003856 <__libc_init_array+0x2e>
 800384a:	bd70      	pop	{r4, r5, r6, pc}
 800384c:	00b3      	lsls	r3, r6, #2
 800384e:	58eb      	ldr	r3, [r5, r3]
 8003850:	4798      	blx	r3
 8003852:	3601      	adds	r6, #1
 8003854:	e7ee      	b.n	8003834 <__libc_init_array+0xc>
 8003856:	00b3      	lsls	r3, r6, #2
 8003858:	58eb      	ldr	r3, [r5, r3]
 800385a:	4798      	blx	r3
 800385c:	3601      	adds	r6, #1
 800385e:	e7f2      	b.n	8003846 <__libc_init_array+0x1e>
 8003860:	08003918 	.word	0x08003918
 8003864:	08003918 	.word	0x08003918
 8003868:	08003918 	.word	0x08003918
 800386c:	0800391c 	.word	0x0800391c

08003870 <memset>:
 8003870:	0003      	movs	r3, r0
 8003872:	1882      	adds	r2, r0, r2
 8003874:	4293      	cmp	r3, r2
 8003876:	d100      	bne.n	800387a <memset+0xa>
 8003878:	4770      	bx	lr
 800387a:	7019      	strb	r1, [r3, #0]
 800387c:	3301      	adds	r3, #1
 800387e:	e7f9      	b.n	8003874 <memset+0x4>

08003880 <_init>:
 8003880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003882:	46c0      	nop			; (mov r8, r8)
 8003884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003886:	bc08      	pop	{r3}
 8003888:	469e      	mov	lr, r3
 800388a:	4770      	bx	lr

0800388c <_fini>:
 800388c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800388e:	46c0      	nop			; (mov r8, r8)
 8003890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003892:	bc08      	pop	{r3}
 8003894:	469e      	mov	lr, r3
 8003896:	4770      	bx	lr
